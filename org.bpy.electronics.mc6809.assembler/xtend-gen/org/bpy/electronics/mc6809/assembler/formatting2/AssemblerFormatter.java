/**
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.formatting2;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage;
import org.bpy.electronics.mc6809.assembler.assembler.CommentLine;
import org.bpy.electronics.mc6809.assembler.assembler.Model;
import org.bpy.electronics.mc6809.assembler.assembler.SourceLine;
import org.bpy.electronics.mc6809.assembler.services.AssemblerGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class AssemblerFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AssemblerGrammarAccess _assemblerGrammarAccess;

  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<SourceLine> _sourceLines = model.getSourceLines();
    for (final SourceLine sourceLine : _sourceLines) {
      document.<SourceLine>format(sourceLine);
    }
  }

  protected void _format(final SourceLine sourceLine, @Extension final IFormattableDocument document) {
    document.<EObject>format(sourceLine.getLineContent());
  }

  protected void _format(final CommentLine commentLine, @Extension final IFormattableDocument document) {
    String _startingSpace = commentLine.getStartingSpace();
    boolean _notEquals = (!Objects.equal(_startingSpace, null));
    if (_notEquals) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.setSpace("      ");
      };
      document.prepend(this.textRegionExtensions.regionFor(commentLine).feature(AssemblerPackage.Literals.COMMENT_LINE__COMMENT), _function);
    }
  }

  public void format(final Object commentLine, final IFormattableDocument document) {
    if (commentLine instanceof XtextResource) {
      _format((XtextResource)commentLine, document);
      return;
    } else if (commentLine instanceof CommentLine) {
      _format((CommentLine)commentLine, document);
      return;
    } else if (commentLine instanceof Model) {
      _format((Model)commentLine, document);
      return;
    } else if (commentLine instanceof SourceLine) {
      _format((SourceLine)commentLine, document);
      return;
    } else if (commentLine instanceof EObject) {
      _format((EObject)commentLine, document);
      return;
    } else if (commentLine == null) {
      _format((Void)null, document);
      return;
    } else if (commentLine != null) {
      _format(commentLine, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(commentLine, document).toString());
    }
  }
}
