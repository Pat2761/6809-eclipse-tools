/**
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.formatting2;

import com.google.common.base.Objects;
import com.google.common.base.Strings;
import java.util.Arrays;
import org.bpy.electronics.mc6809.assembler.assembler.AdcInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.AdddInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.AndCCInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.AndInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.AslInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.AsrInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage;
import org.bpy.electronics.mc6809.assembler.assembler.BccInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BcsInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BeqInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BgeInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BgtInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BhiInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BhsInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BitInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BleInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BloInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BlsInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BltInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BmiInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BneInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BplInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BraInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BrnInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BsrInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BvcInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.BvsInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.ClrInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.CmpInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.ComInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.CommentLine;
import org.bpy.electronics.mc6809.assembler.assembler.CwaiInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.DecInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.EorInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.ExgInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.IdentifierValue;
import org.bpy.electronics.mc6809.assembler.assembler.IncInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.InstructionLine;
import org.bpy.electronics.mc6809.assembler.assembler.JmpInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.JsrInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.Label;
import org.bpy.electronics.mc6809.assembler.assembler.LabelLine;
import org.bpy.electronics.mc6809.assembler.assembler.LdInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.LeaInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.LslInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.LsrInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.Model;
import org.bpy.electronics.mc6809.assembler.assembler.NegInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.OrCCInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.OrInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.PshsInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.PshuInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.PulsInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.PuluInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.RolInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.RorInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.SbcInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.SourceLine;
import org.bpy.electronics.mc6809.assembler.assembler.StInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.SubInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.SubdInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.TfrInstruction;
import org.bpy.electronics.mc6809.assembler.assembler.TstInstruction;
import org.bpy.electronics.mc6809.preferences.core.PreferenceManager;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatting;
import org.eclipse.xtext.formatting2.ITextReplacer;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class AssemblerFormatter extends AbstractFormatter2 {
  /**
   * Reference on the preference manager
   */
  private PreferenceManager preferenceManager;

  /**
   * Current value of the tab policy
   */
  private String tabPolicy;

  /**
   * Current value of the tab size
   */
  private int tabSize;

  /**
   * Current column value of the instruction
   */
  private int instructionPosition;

  /**
   * Current column value of the operand
   */
  private int operandPosition;

  /**
   * Current column value of the comment
   */
  private int commentPosition;

  /**
   * Allow to initialize the formatter.
   * read formatter preference
   * call formatter for all children of the model
   */
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    this.preferenceManager = PreferenceManager.getInstance();
    this.tabPolicy = this.preferenceManager.getStringPreferenceValue(PreferenceManager.TAB_POLICY);
    this.tabSize = this.preferenceManager.getIntPreferenceValue(PreferenceManager.TAB_SIZE);
    this.instructionPosition = this.preferenceManager.getIntPreferenceValue(PreferenceManager.INSTRUCTION_POSITION);
    this.operandPosition = this.preferenceManager.getIntPreferenceValue(PreferenceManager.OPERAND_POSITION);
    this.commentPosition = this.preferenceManager.getIntPreferenceValue(PreferenceManager.COMMENT_POSITION);
    EList<SourceLine> _sourceLines = model.getSourceLines();
    for (final SourceLine sourceLine : _sourceLines) {
      document.<SourceLine>format(sourceLine);
    }
  }

  /**
   * Call the formatter for a source line
   */
  protected void _format(final SourceLine sourceLine, @Extension final IFormattableDocument document) {
    document.<EObject>format(sourceLine.getLineContent());
  }

  /**
   * Call the formatter for a line which start with space and contains only a comment
   */
  protected void _format(final CommentLine commentLine, @Extension final IFormattableDocument document) {
    String _startingSpace = commentLine.getStartingSpace();
    boolean _tripleNotEquals = (_startingSpace != null);
    if (_tripleNotEquals) {
      boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
      if (_equals) {
        this.formatSpaceOnly(commentLine, document);
      } else {
        boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
        if (_equals_1) {
          this.formatTabOnly(commentLine, document);
        } else {
          this.formatMixed(commentLine, document);
        }
      }
    }
  }

  /**
   * Format a comment line when the tab policy is Space only
   */
  private void formatSpaceOnly(final CommentLine commentLine, @Extension final IFormattableDocument document) {
    IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
    final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
      it.setSpace(" ");
    };
    final IHiddenRegionFormatting fmt = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
    final ITextReplacer replacer = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(commentLine).feature(AssemblerPackage.Literals.COMMENT_LINE__STARTING_SPACE), fmt);
    document.addReplacer(replacer);
    int _xifexpression = (int) 0;
    if (((this.commentPosition - 1) > 1)) {
      _xifexpression = (this.commentPosition - 1);
    } else {
      _xifexpression = 1;
    }
    final String strPosition = Strings.repeat(" ", _xifexpression);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setSpace(strPosition);
    };
    document.prepend(this.textRegionExtensions.regionFor(commentLine).feature(AssemblerPackage.Literals.COMMENT_LINE__COMMENT), _function_1);
  }

  /**
   * Format a comment line when the tab policy is Tab only
   */
  private void formatTabOnly(final CommentLine commentLine, @Extension final IFormattableDocument document) {
    final int nbTabs = (this.commentPosition / this.tabSize);
    IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
    final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
      it.setSpace("\t");
    };
    final IHiddenRegionFormatting fmt = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
    final ITextReplacer replacer = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(commentLine).feature(AssemblerPackage.Literals.COMMENT_LINE__STARTING_SPACE), fmt);
    document.addReplacer(replacer);
    int _xifexpression = (int) 0;
    if (((nbTabs - 1) > 1)) {
      _xifexpression = (nbTabs - 1);
    } else {
      _xifexpression = 1;
    }
    final String strPosition = Strings.repeat("\t", _xifexpression);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setSpace(strPosition);
    };
    document.prepend(this.textRegionExtensions.regionFor(commentLine).feature(AssemblerPackage.Literals.COMMENT_LINE__COMMENT), _function_1);
  }

  /**
   * Format a comment line when the tab policy is a mixed of space and tab
   */
  private void formatMixed(final CommentLine commentLine, @Extension final IFormattableDocument document) {
    final int nbTabs = (this.commentPosition / this.tabSize);
    final int nbSpaces = (this.commentPosition - (this.tabSize * nbTabs));
    IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
    final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
      it.setSpace("\t");
    };
    final IHiddenRegionFormatting fmt = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
    final ITextReplacer replacer = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(commentLine).feature(AssemblerPackage.Literals.COMMENT_LINE__STARTING_SPACE), fmt);
    document.addReplacer(replacer);
    int _xifexpression = (int) 0;
    if (((nbTabs - 1) > 1)) {
      _xifexpression = (nbTabs - 1);
    } else {
      _xifexpression = 1;
    }
    String strPosition = Strings.repeat("\t", _xifexpression);
    if ((nbSpaces != 0)) {
      String _strPosition = strPosition;
      String _repeat = Strings.repeat(" ", nbSpaces);
      strPosition = (_strPosition + _repeat);
    }
    final String spaces = strPosition;
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setSpace(spaces);
    };
    document.prepend(this.textRegionExtensions.regionFor(commentLine).feature(AssemblerPackage.Literals.COMMENT_LINE__COMMENT), _function_1);
  }

  /**
   * Call the formatter for a line which start with a label and contains only comments
   */
  protected void _format(final LabelLine labelLine, @Extension final IFormattableDocument document) {
    String _comment = labelLine.getComment();
    boolean _tripleNotEquals = (_comment != null);
    if (_tripleNotEquals) {
      boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
      if (_equals) {
        this.formatSpaceOnly(labelLine, document);
      } else {
        boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
        if (_equals_1) {
          this.formatTabOnly(labelLine, document);
        } else {
          this.formatMixed(labelLine, document);
        }
      }
    }
  }

  private void formatMixed(final LabelLine labelLine, @Extension final IFormattableDocument document) {
  }

  private void formatTabOnly(final LabelLine labelLine, @Extension final IFormattableDocument document) {
    int wsSpace = 0;
    String _ws1 = labelLine.getWs1();
    boolean _tripleNotEquals = (_ws1 != null);
    if (_tripleNotEquals) {
      IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
      final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
        it.setSpace(" ");
      };
      final IHiddenRegionFormatting fmt = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
      final ITextReplacer replacer = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(labelLine).feature(AssemblerPackage.Literals.LABEL_LINE__WS1), fmt);
      document.addReplacer(replacer);
      wsSpace = 1;
    }
    int _length = labelLine.getLabel().getName().getValue().length();
    int labelLength = (_length + wsSpace);
    boolean _isPoint = labelLine.getLabel().isPoint();
    if (_isPoint) {
      labelLength++;
    }
    final String strPosition = Strings.repeat(" ", ((this.commentPosition - labelLength) - 1));
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setSpace(strPosition);
    };
    document.prepend(this.textRegionExtensions.regionFor(labelLine).feature(AssemblerPackage.Literals.LABEL_LINE__COMMENT), _function_1);
  }

  private void formatSpaceOnly(final LabelLine labelLine, @Extension final IFormattableDocument document) {
    int wsSpace = 0;
    String _ws1 = labelLine.getWs1();
    boolean _tripleNotEquals = (_ws1 != null);
    if (_tripleNotEquals) {
      IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
      final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
        it.setSpace(" ");
      };
      final IHiddenRegionFormatting fmt = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
      final ITextReplacer replacer = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(labelLine).feature(AssemblerPackage.Literals.LABEL_LINE__WS1), fmt);
      document.addReplacer(replacer);
      wsSpace = 1;
    }
    int _length = labelLine.getLabel().getName().getValue().length();
    int labelLength = (_length + wsSpace);
    boolean _isPoint = labelLine.getLabel().isPoint();
    if (_isPoint) {
      labelLength++;
    }
    final String strPosition = Strings.repeat(" ", ((this.commentPosition - labelLength) - 1));
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setSpace(strPosition);
    };
    document.prepend(this.textRegionExtensions.regionFor(labelLine).feature(AssemblerPackage.Literals.LABEL_LINE__COMMENT), _function_1);
  }

  protected void _format(final InstructionLine instructionLine, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnly(instructionLine, document);
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnly(instructionLine, document);
      } else {
        boolean _equals_2 = Objects.equal(PreferenceManager.MIXED, this.tabPolicy);
        if (_equals_2) {
          this.formatMixed(instructionLine, document);
        }
      }
    }
  }

  /**
   * Format an instructionLine Object when the tab policy is Space only
   */
  private void formatSpaceOnly(final InstructionLine instructionLine, @Extension final IFormattableDocument document) {
    IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
    final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
      it.setSpace(" ");
    };
    final IHiddenRegionFormatting fmt = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
    final ITextReplacer replacer1 = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), fmt);
    document.addReplacer(replacer1);
    String _ws2 = instructionLine.getWs2();
    boolean _tripleNotEquals = (_ws2 != null);
    if (_tripleNotEquals) {
      final ITextReplacer replacer2 = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS2), fmt);
      if ((replacer2 != null)) {
        document.addReplacer(replacer2);
      }
    }
    final int labelLength = this.length(instructionLine.getLabel());
    final String spacesBeforeInstruction = Strings.repeat(" ", ((this.instructionPosition - labelLength) - 1));
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setSpace(spacesBeforeInstruction);
    };
    document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), _function_1);
    document.<EObject>format(instructionLine.getInstruction());
    String _ws2_1 = instructionLine.getWs2();
    boolean _tripleNotEquals_1 = (_ws2_1 != null);
    if (_tripleNotEquals_1) {
      final ISemanticRegion lastNodeInstruction = this.textRegionExtensions.regionFor(instructionLine).feature(
        AssemblerPackage.Literals.INSTRUCTION_LINE__WS2).getPreviousSemanticRegion();
      ISemanticRegion firstNodeInstruction = this.textRegionExtensions.regionFor(instructionLine).feature(
        AssemblerPackage.Literals.INSTRUCTION_LINE__WS1).getNextSemanticRegion();
      int nbSpaces = 0;
      if ((firstNodeInstruction == lastNodeInstruction)) {
        int _length = firstNodeInstruction.getText().trim().length();
        int _minus = (this.commentPosition - _length);
        int _minus_1 = (_minus - this.instructionPosition);
        int _minus_2 = (_minus_1 - 1);
        nbSpaces = _minus_2;
      } else {
        int _length_1 = lastNodeInstruction.getText().trim().length();
        int _minus_3 = (this.commentPosition - _length_1);
        int _minus_4 = (_minus_3 - this.operandPosition);
        int _minus_5 = (_minus_4 - 2);
        nbSpaces = _minus_5;
      }
      final String spacesAfterInstruction = Strings.repeat(" ", nbSpaces);
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.setSpace(spacesAfterInstruction);
      };
      document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS2), _function_2);
    }
  }

  /**
   * Format an instructionLine Object when the tab policy is Space only
   */
  private void formatTabOnly(final InstructionLine instructionLine, @Extension final IFormattableDocument document) {
    IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
    final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
      it.setSpace("\t");
    };
    final IHiddenRegionFormatting fmt1 = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
    final ITextReplacer replacer1 = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), fmt1);
    document.addReplacer(replacer1);
    String _ws2 = instructionLine.getWs2();
    boolean _tripleNotEquals = (_ws2 != null);
    if (_tripleNotEquals) {
      IHiddenRegionFormatting _createHiddenRegionFormatting_1 = document.getFormatter().createHiddenRegionFormatting();
      final Procedure1<IHiddenRegionFormatting> _function_1 = (IHiddenRegionFormatting it) -> {
        it.setSpace("\t");
      };
      final IHiddenRegionFormatting fmt2 = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting_1, _function_1);
      final ITextReplacer replacer2 = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS2), fmt2);
      if ((replacer2 != null)) {
        document.addReplacer(replacer2);
      }
    }
    final int labelLength = this.length(instructionLine.getLabel());
    final int estimatedPosition = (labelLength + this.tabSize);
    int _xifexpression = (int) 0;
    if (((estimatedPosition % this.tabSize) == 0)) {
      _xifexpression = estimatedPosition;
    } else {
      _xifexpression = ((estimatedPosition / this.tabSize) * this.tabSize);
    }
    final int labelEndPosition = _xifexpression;
    int nbTabNeeded = ((((this.instructionPosition - 1) - labelEndPosition) / this.tabSize) - 1);
    IdentifierValue _name = instructionLine.getLabel().getName();
    boolean _tripleEquals = (_name == null);
    if (_tripleEquals) {
      nbTabNeeded++;
    }
    final String tabsBeforeInstruction = Strings.repeat("\t", nbTabNeeded);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.setSpace(tabsBeforeInstruction);
    };
    document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), _function_2);
    document.<EObject>format(instructionLine.getInstruction());
    String _ws2_1 = instructionLine.getWs2();
    boolean _tripleNotEquals_1 = (_ws2_1 != null);
    if (_tripleNotEquals_1) {
      final ISemanticRegion lastNodeInstruction = this.textRegionExtensions.regionFor(instructionLine).feature(
        AssemblerPackage.Literals.INSTRUCTION_LINE__WS2).getPreviousSemanticRegion();
      ISemanticRegion firstNodeInstruction = this.textRegionExtensions.regionFor(instructionLine).feature(
        AssemblerPackage.Literals.INSTRUCTION_LINE__WS1).getNextSemanticRegion();
      int nbTabs = 0;
      if ((firstNodeInstruction == lastNodeInstruction)) {
        int _length = firstNodeInstruction.getText().trim().length();
        int _minus = (this.commentPosition - _length);
        int _minus_1 = (_minus - this.instructionPosition);
        int _minus_2 = (_minus_1 - 1);
        int _divide = (_minus_2 / this.tabSize);
        nbTabs = _divide;
      } else {
        int _length_1 = lastNodeInstruction.getText().trim().length();
        int _minus_3 = (this.commentPosition - _length_1);
        int _minus_4 = (_minus_3 - this.operandPosition);
        int _minus_5 = (_minus_4 - 2);
        int _divide_1 = (_minus_5 / this.tabSize);
        nbTabs = _divide_1;
      }
      final String spacesAfterInstruction = Strings.repeat("\t", nbTabs);
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.setSpace(spacesAfterInstruction);
      };
      document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS2), _function_3);
    }
  }

  /**
   * Format an instructionLine Object when the tab policy is Space only
   */
  private void formatMixed(final InstructionLine instructionLine, @Extension final IFormattableDocument document) {
    final int labelLength = this.length(instructionLine.getLabel());
    final int nbSpacesNeeded = ((this.instructionPosition - labelLength) - 1);
    if ((nbSpacesNeeded < 1)) {
      IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
      final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
        it.setSpace("\t");
      };
      final IHiddenRegionFormatting fmt1 = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
      final ITextReplacer replacer1 = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), fmt1);
      document.addReplacer(replacer1);
    } else {
      if ((nbSpacesNeeded < this.tabSize)) {
        IHiddenRegionFormatting _createHiddenRegionFormatting_1 = document.getFormatter().createHiddenRegionFormatting();
        final Procedure1<IHiddenRegionFormatting> _function_1 = (IHiddenRegionFormatting it) -> {
          it.setSpace("\t");
        };
        final IHiddenRegionFormatting fmt1_1 = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting_1, _function_1);
        final ITextReplacer replacer1_1 = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), fmt1_1);
        document.addReplacer(replacer1_1);
        final String spaceNeeded = Strings.repeat("\t", ((nbSpacesNeeded - this.tabSize) / this.tabSize));
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.setSpace(spaceNeeded);
        };
        document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), _function_2);
      } else {
        IHiddenRegionFormatting _createHiddenRegionFormatting_2 = document.getFormatter().createHiddenRegionFormatting();
        final Procedure1<IHiddenRegionFormatting> _function_3 = (IHiddenRegionFormatting it) -> {
          it.setSpace("\t");
        };
        final IHiddenRegionFormatting fmt1_2 = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting_2, _function_3);
        final ITextReplacer replacer1_2 = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), fmt1_2);
        document.addReplacer(replacer1_2);
        int _xifexpression = (int) 0;
        if ((labelLength == 0)) {
          _xifexpression = 0;
        } else {
          _xifexpression = (labelLength + this.tabSize);
        }
        final int estimatedPosition = _xifexpression;
        int _xifexpression_1 = (int) 0;
        if (((estimatedPosition % this.tabSize) == 0)) {
          _xifexpression_1 = estimatedPosition;
        } else {
          _xifexpression_1 = ((estimatedPosition / this.tabSize) * this.tabSize);
        }
        final int labelEndPosition = _xifexpression_1;
        final String tabsToInsert = Strings.repeat("\t", ((this.instructionPosition - labelEndPosition) / this.tabSize));
        final int rest = (((this.instructionPosition - labelEndPosition) - 1) % this.tabSize);
        if ((rest != 0)) {
          final String spacesToInsert = Strings.repeat(" ", rest);
          final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
            it.setSpace((tabsToInsert + spacesToInsert));
          };
          document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), _function_4);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
            it.setSpace(tabsToInsert);
          };
          document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), _function_5);
        }
      }
    }
    document.<EObject>format(instructionLine.getInstruction());
    String _ws2 = instructionLine.getWs2();
    boolean _tripleNotEquals = (_ws2 != null);
    if (_tripleNotEquals) {
      final ISemanticRegion lastNodeInstruction = this.textRegionExtensions.regionFor(instructionLine).feature(
        AssemblerPackage.Literals.INSTRUCTION_LINE__WS2).getPreviousSemanticRegion();
      final ISemanticRegion firstNodeInstruction = this.textRegionExtensions.regionFor(instructionLine).feature(
        AssemblerPackage.Literals.INSTRUCTION_LINE__WS1).getNextSemanticRegion();
      int nbSpacesToComplete = 0;
      boolean _equals = Objects.equal(lastNodeInstruction, firstNodeInstruction);
      if (_equals) {
        int _length = firstNodeInstruction.getText().trim().length();
        int _minus = (this.commentPosition - _length);
        int _minus_1 = (_minus - this.instructionPosition);
        nbSpacesToComplete = _minus_1;
      } else {
        int _length_1 = lastNodeInstruction.getText().trim().length();
        int _minus_2 = (this.commentPosition - _length_1);
        int _minus_3 = (_minus_2 - this.operandPosition);
        nbSpacesToComplete = _minus_3;
      }
      if ((nbSpacesToComplete < this.tabSize)) {
        IHiddenRegionFormatting _createHiddenRegionFormatting_3 = document.getFormatter().createHiddenRegionFormatting();
        final Procedure1<IHiddenRegionFormatting> _function_6 = (IHiddenRegionFormatting it) -> {
          it.setSpace(" ");
        };
        final IHiddenRegionFormatting fmt2 = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting_3, _function_6);
        final ITextReplacer replacer2 = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS2), fmt2);
        document.addReplacer(replacer2);
        nbSpacesToComplete--;
        final String spaceNeeded_1 = Strings.repeat(" ", nbSpacesToComplete);
        final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
          it.setSpace(spaceNeeded_1);
        };
        document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS1), _function_7);
      } else {
        IHiddenRegionFormatting _createHiddenRegionFormatting_4 = document.getFormatter().createHiddenRegionFormatting();
        final Procedure1<IHiddenRegionFormatting> _function_8 = (IHiddenRegionFormatting it) -> {
          it.setSpace("\t");
        };
        final IHiddenRegionFormatting fmt2_1 = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting_4, _function_8);
        final ITextReplacer replacer2_1 = this.createWhitespaceReplacer(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS2), fmt2_1);
        document.addReplacer(replacer2_1);
        int estimatedPosition_1 = 0;
        boolean _equals_1 = Objects.equal(lastNodeInstruction, firstNodeInstruction);
        if (_equals_1) {
          int _length_2 = firstNodeInstruction.getText().trim().length();
          int _plus = (this.instructionPosition + _length_2);
          int _plus_1 = (_plus + this.tabSize);
          estimatedPosition_1 = _plus_1;
        } else {
          int _length_3 = lastNodeInstruction.getText().trim().length();
          int _plus_2 = (this.operandPosition + _length_3);
          int _plus_3 = (_plus_2 + this.tabSize);
          estimatedPosition_1 = _plus_3;
        }
        int _xifexpression_2 = (int) 0;
        if (((estimatedPosition_1 % this.tabSize) == 
          0)) {
          _xifexpression_2 = estimatedPosition_1;
        } else {
          _xifexpression_2 = ((estimatedPosition_1 / this.tabSize) * this.tabSize);
        }
        final int realInstructionPosition = _xifexpression_2;
        final int leftSapces = ((this.commentPosition - realInstructionPosition) - 1);
        final String tabsToInsert_1 = Strings.repeat("\t", (leftSapces / this.tabSize));
        final int rest_1 = (leftSapces % this.tabSize);
        if ((rest_1 != 0)) {
          final String spacesToInsert_1 = Strings.repeat(" ", rest_1);
          final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
            it.setSpace((tabsToInsert_1 + spacesToInsert_1));
          };
          document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS2), _function_9);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
            it.setSpace(tabsToInsert_1);
          };
          document.append(this.textRegionExtensions.regionFor(instructionLine).feature(AssemblerPackage.Literals.INSTRUCTION_LINE__WS2), _function_10);
        }
      }
    }
  }

  /**
   * Format an Adc instruction Object
   */
  protected void _format(final AdcInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ADC_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ADC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ADC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final AdddInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ADDD_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ADDD_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ADDD_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final AndInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.AND_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.AND_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.AND_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final AndCCInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.AND_CC_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.AND_CC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.AND_CC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final AslInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ASL_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ASL_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ASL_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final AsrInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ASR_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ASR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ASR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BccInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BCC_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BCC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BCC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BcsInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BCS_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BCS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BCS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BeqInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BEQ_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BEQ_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BEQ_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BgeInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BGE_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BGE_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BGE_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BgtInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BGT_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BGT_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BGT_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BhiInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BHI_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BHI_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BHI_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BhsInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BHS_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BHS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BHS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BitInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BIT_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BIT_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BIT_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BleInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLE_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLE_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLE_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BloInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLO_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLO_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLO_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BlsInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLS_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BltInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLT_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLT_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BLT_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BmiInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BMI_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BMI_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BMI_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BneInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BNE_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BNE_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BNE_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BplInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BPL_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BPL_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BPL_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BraInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BRA_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BRA_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BRA_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BrnInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BRN_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BRN_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BRN_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BsrInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BSR_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BSR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BSR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BvcInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BVC_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BVC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BVC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final BvsInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BVS_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BVS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.BVS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final ClrInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.CLR_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.CLR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.CLR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final CmpInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.CMP_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.CMP_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.CMP_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final ComInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.COM_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.COM_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.COM_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final CwaiInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.CWAI_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.CWAI_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.CWAI_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final DecInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.DEC_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.DEC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.DEC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final EorInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.EOR_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.EOR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.EOR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final ExgInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.EXG_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.EXG_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.EXG_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final IncInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.INC_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.INC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.INC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final JmpInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.JMP_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.JMP_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.JMP_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final JsrInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.JSR_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.JSR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.JSR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final LdInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LD_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LD_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LD_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final LeaInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LEA_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LEA_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LEA_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final LslInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LSL_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LSL_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LSL_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final LsrInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LSR_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LSR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.LSR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final NegInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.NEG_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.NEG_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.NEG_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final OrInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.OR_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.OR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.OR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final OrCCInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.OR_CC_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.OR_CC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.OR_CC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final PshsInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PSHS_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PSHS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PSHS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final PshuInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PSHU_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PSHU_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PSHU_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final PulsInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PULS_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PULS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PULS_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final PuluInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PULU_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PULU_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.PULU_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final RolInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ROL_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ROL_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ROL_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final RorInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ROR_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ROR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ROR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final SbcInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.SBC_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.SBC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.SBC_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final StInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ST_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ST_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.ST_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final SubInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.SUB_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.SUB_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.SUB_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final SubdInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.SUBD_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.SUBD_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.SUBD_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final TfrInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.TFR_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.TFR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.TFR_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  protected void _format(final TstInstruction instruction, @Extension final IFormattableDocument document) {
    boolean _equals = Objects.equal(PreferenceManager.SPACE_ONLY, this.tabPolicy);
    if (_equals) {
      this.formatSpaceOnlyInstruction(document, 
        this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.TST_INSTRUCTION__WS_OPERAND), 
        instruction.getInstruction().length());
    } else {
      boolean _equals_1 = Objects.equal(PreferenceManager.TAB_ONLY, this.tabPolicy);
      if (_equals_1) {
        this.formatTabOnlyInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.TST_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      } else {
        this.formatMixedInstruction(document, 
          this.textRegionExtensions.regionFor(instruction).feature(AssemblerPackage.Literals.TST_INSTRUCTION__WS_OPERAND), 
          instruction.getInstruction().length());
      }
    }
  }

  /**
   * Allow to format the space between the instruction and the operand in case of tab policy
   * based on the space only policy
   */
  public void formatSpaceOnlyInstruction(final IFormattableDocument document, final ISemanticRegion region, final int instructionSize) {
    IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
    final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
      it.setSpace(" ");
    };
    final IHiddenRegionFormatting fmt = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
    final ITextReplacer replacer1 = this.createWhitespaceReplacer(region, fmt);
    document.addReplacer(replacer1);
    int nbSpacesNeeded = this.operandPosition;
    int _nbSpacesNeeded = nbSpacesNeeded;
    nbSpacesNeeded = (_nbSpacesNeeded - instructionSize);
    int _nbSpacesNeeded_1 = nbSpacesNeeded;
    nbSpacesNeeded = (_nbSpacesNeeded_1 - this.instructionPosition);
    final String spacesAfterInstruction = Strings.repeat(" ", (nbSpacesNeeded - 1));
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setSpace(spacesAfterInstruction);
    };
    final Procedure1<IHiddenRegionFormatter> function = _function_1;
    document.append(region, function);
  }

  /**
   * Allow to format the space between the instruction and the operand in case of tab policy
   * based on the tab only policy
   */
  public void formatTabOnlyInstruction(final IFormattableDocument document, final ISemanticRegion region, final int instructionSize) {
    IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
    final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
      it.setSpace("\t");
    };
    final IHiddenRegionFormatting fmt = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
    final ITextReplacer replacer1 = this.createWhitespaceReplacer(region, fmt);
    document.addReplacer(replacer1);
    final int estimatedPosition = ((this.instructionPosition + instructionSize) + this.tabSize);
    int _xifexpression = (int) 0;
    if (((estimatedPosition % this.tabSize) == 0)) {
      _xifexpression = estimatedPosition;
    } else {
      _xifexpression = ((estimatedPosition / this.tabSize) * this.tabSize);
    }
    final int realInstructionPosition = _xifexpression;
    int nbTabNeeded = ((this.operandPosition - realInstructionPosition) / this.tabSize);
    final String spacesAfterInstruction = Strings.repeat("\t", nbTabNeeded);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setSpace(spacesAfterInstruction);
    };
    final Procedure1<IHiddenRegionFormatter> function = _function_1;
    document.append(region, function);
  }

  /**
   * Allow to format the space between the instruction and the operand in case of tab policy
   * based on the mixed policy
   */
  public void formatMixedInstruction(final IFormattableDocument document, final ISemanticRegion region, final int instructionSize) {
    final int nbSapcesToFill = ((this.operandPosition - this.instructionPosition) - instructionSize);
    if ((nbSapcesToFill < 1)) {
      IHiddenRegionFormatting _createHiddenRegionFormatting = document.getFormatter().createHiddenRegionFormatting();
      final Procedure1<IHiddenRegionFormatting> _function = (IHiddenRegionFormatting it) -> {
        it.setSpace(" ");
      };
      final IHiddenRegionFormatting fmt = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting, _function);
      final ITextReplacer replacer1 = this.createWhitespaceReplacer(region, fmt);
      document.addReplacer(replacer1);
    }
    if ((nbSapcesToFill < this.tabSize)) {
      IHiddenRegionFormatting _createHiddenRegionFormatting_1 = document.getFormatter().createHiddenRegionFormatting();
      final Procedure1<IHiddenRegionFormatting> _function_1 = (IHiddenRegionFormatting it) -> {
        it.setSpace(" ");
      };
      final IHiddenRegionFormatting fmt_1 = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting_1, _function_1);
      final ITextReplacer replacer1_1 = this.createWhitespaceReplacer(region, fmt_1);
      document.addReplacer(replacer1_1);
      final String spacesAfterInstruction = Strings.repeat(" ", (nbSapcesToFill - 1));
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.setSpace(spacesAfterInstruction);
      };
      final Procedure1<IHiddenRegionFormatter> function = _function_2;
      document.append(region, function);
    } else {
      IHiddenRegionFormatting _createHiddenRegionFormatting_2 = document.getFormatter().createHiddenRegionFormatting();
      final Procedure1<IHiddenRegionFormatting> _function_3 = (IHiddenRegionFormatting it) -> {
        it.setSpace("\t");
      };
      final IHiddenRegionFormatting fmt_2 = ObjectExtensions.<IHiddenRegionFormatting>operator_doubleArrow(_createHiddenRegionFormatting_2, _function_3);
      final ITextReplacer replacer1_2 = this.createWhitespaceReplacer(region, fmt_2);
      document.addReplacer(replacer1_2);
      final int estimatedPosition = ((this.instructionPosition + instructionSize) + this.tabSize);
      int _xifexpression = (int) 0;
      if (((estimatedPosition % this.tabSize) == 0)) {
        _xifexpression = estimatedPosition;
      } else {
        _xifexpression = ((estimatedPosition / this.tabSize) * this.tabSize);
      }
      final int realInstructionPosition = _xifexpression;
      final int leftSapces = ((this.operandPosition - realInstructionPosition) - 1);
      final String tabsAfterInstruction = Strings.repeat("\t", (leftSapces / this.tabSize));
      final String spacesAfterTabs = Strings.repeat(" ", (leftSapces % this.tabSize));
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.setSpace((tabsAfterInstruction + spacesAfterTabs));
      };
      final Procedure1<IHiddenRegionFormatter> function_1 = _function_4;
      document.append(region, function_1);
    }
  }

  /**
   * Compute the length of a label object
   * @param label reference on the label
   * @return length of the label
   */
  public int length(final Label label) {
    int _xblockexpression = (int) 0;
    {
      int labelLength = 0;
      IdentifierValue _name = label.getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        labelLength = label.getName().getValue().trim().length();
        boolean _isPoint = label.isPoint();
        if (_isPoint) {
          labelLength++;
        }
      }
      _xblockexpression = labelLength;
    }
    return _xblockexpression;
  }

  public void format(final Object instruction, final IFormattableDocument document) {
    if (instruction instanceof XtextResource) {
      _format((XtextResource)instruction, document);
      return;
    } else if (instruction instanceof AdcInstruction) {
      _format((AdcInstruction)instruction, document);
      return;
    } else if (instruction instanceof AdddInstruction) {
      _format((AdddInstruction)instruction, document);
      return;
    } else if (instruction instanceof AndCCInstruction) {
      _format((AndCCInstruction)instruction, document);
      return;
    } else if (instruction instanceof AndInstruction) {
      _format((AndInstruction)instruction, document);
      return;
    } else if (instruction instanceof AslInstruction) {
      _format((AslInstruction)instruction, document);
      return;
    } else if (instruction instanceof AsrInstruction) {
      _format((AsrInstruction)instruction, document);
      return;
    } else if (instruction instanceof BccInstruction) {
      _format((BccInstruction)instruction, document);
      return;
    } else if (instruction instanceof BcsInstruction) {
      _format((BcsInstruction)instruction, document);
      return;
    } else if (instruction instanceof BeqInstruction) {
      _format((BeqInstruction)instruction, document);
      return;
    } else if (instruction instanceof BgeInstruction) {
      _format((BgeInstruction)instruction, document);
      return;
    } else if (instruction instanceof BgtInstruction) {
      _format((BgtInstruction)instruction, document);
      return;
    } else if (instruction instanceof BhiInstruction) {
      _format((BhiInstruction)instruction, document);
      return;
    } else if (instruction instanceof BhsInstruction) {
      _format((BhsInstruction)instruction, document);
      return;
    } else if (instruction instanceof BitInstruction) {
      _format((BitInstruction)instruction, document);
      return;
    } else if (instruction instanceof BleInstruction) {
      _format((BleInstruction)instruction, document);
      return;
    } else if (instruction instanceof BloInstruction) {
      _format((BloInstruction)instruction, document);
      return;
    } else if (instruction instanceof BlsInstruction) {
      _format((BlsInstruction)instruction, document);
      return;
    } else if (instruction instanceof BltInstruction) {
      _format((BltInstruction)instruction, document);
      return;
    } else if (instruction instanceof BmiInstruction) {
      _format((BmiInstruction)instruction, document);
      return;
    } else if (instruction instanceof BneInstruction) {
      _format((BneInstruction)instruction, document);
      return;
    } else if (instruction instanceof BplInstruction) {
      _format((BplInstruction)instruction, document);
      return;
    } else if (instruction instanceof BraInstruction) {
      _format((BraInstruction)instruction, document);
      return;
    } else if (instruction instanceof BrnInstruction) {
      _format((BrnInstruction)instruction, document);
      return;
    } else if (instruction instanceof BsrInstruction) {
      _format((BsrInstruction)instruction, document);
      return;
    } else if (instruction instanceof BvcInstruction) {
      _format((BvcInstruction)instruction, document);
      return;
    } else if (instruction instanceof BvsInstruction) {
      _format((BvsInstruction)instruction, document);
      return;
    } else if (instruction instanceof ClrInstruction) {
      _format((ClrInstruction)instruction, document);
      return;
    } else if (instruction instanceof CmpInstruction) {
      _format((CmpInstruction)instruction, document);
      return;
    } else if (instruction instanceof ComInstruction) {
      _format((ComInstruction)instruction, document);
      return;
    } else if (instruction instanceof CommentLine) {
      _format((CommentLine)instruction, document);
      return;
    } else if (instruction instanceof CwaiInstruction) {
      _format((CwaiInstruction)instruction, document);
      return;
    } else if (instruction instanceof DecInstruction) {
      _format((DecInstruction)instruction, document);
      return;
    } else if (instruction instanceof EorInstruction) {
      _format((EorInstruction)instruction, document);
      return;
    } else if (instruction instanceof ExgInstruction) {
      _format((ExgInstruction)instruction, document);
      return;
    } else if (instruction instanceof IncInstruction) {
      _format((IncInstruction)instruction, document);
      return;
    } else if (instruction instanceof InstructionLine) {
      _format((InstructionLine)instruction, document);
      return;
    } else if (instruction instanceof JmpInstruction) {
      _format((JmpInstruction)instruction, document);
      return;
    } else if (instruction instanceof JsrInstruction) {
      _format((JsrInstruction)instruction, document);
      return;
    } else if (instruction instanceof LabelLine) {
      _format((LabelLine)instruction, document);
      return;
    } else if (instruction instanceof LdInstruction) {
      _format((LdInstruction)instruction, document);
      return;
    } else if (instruction instanceof LeaInstruction) {
      _format((LeaInstruction)instruction, document);
      return;
    } else if (instruction instanceof LslInstruction) {
      _format((LslInstruction)instruction, document);
      return;
    } else if (instruction instanceof LsrInstruction) {
      _format((LsrInstruction)instruction, document);
      return;
    } else if (instruction instanceof Model) {
      _format((Model)instruction, document);
      return;
    } else if (instruction instanceof NegInstruction) {
      _format((NegInstruction)instruction, document);
      return;
    } else if (instruction instanceof OrCCInstruction) {
      _format((OrCCInstruction)instruction, document);
      return;
    } else if (instruction instanceof OrInstruction) {
      _format((OrInstruction)instruction, document);
      return;
    } else if (instruction instanceof PshsInstruction) {
      _format((PshsInstruction)instruction, document);
      return;
    } else if (instruction instanceof PshuInstruction) {
      _format((PshuInstruction)instruction, document);
      return;
    } else if (instruction instanceof PulsInstruction) {
      _format((PulsInstruction)instruction, document);
      return;
    } else if (instruction instanceof PuluInstruction) {
      _format((PuluInstruction)instruction, document);
      return;
    } else if (instruction instanceof RolInstruction) {
      _format((RolInstruction)instruction, document);
      return;
    } else if (instruction instanceof RorInstruction) {
      _format((RorInstruction)instruction, document);
      return;
    } else if (instruction instanceof SbcInstruction) {
      _format((SbcInstruction)instruction, document);
      return;
    } else if (instruction instanceof SourceLine) {
      _format((SourceLine)instruction, document);
      return;
    } else if (instruction instanceof StInstruction) {
      _format((StInstruction)instruction, document);
      return;
    } else if (instruction instanceof SubInstruction) {
      _format((SubInstruction)instruction, document);
      return;
    } else if (instruction instanceof SubdInstruction) {
      _format((SubdInstruction)instruction, document);
      return;
    } else if (instruction instanceof TfrInstruction) {
      _format((TfrInstruction)instruction, document);
      return;
    } else if (instruction instanceof TstInstruction) {
      _format((TstInstruction)instruction, document);
      return;
    } else if (instruction instanceof EObject) {
      _format((EObject)instruction, document);
      return;
    } else if (instruction == null) {
      _format((Void)null, document);
      return;
    } else if (instruction != null) {
      _format(instruction, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(instruction, document).toString());
    }
  }
}
