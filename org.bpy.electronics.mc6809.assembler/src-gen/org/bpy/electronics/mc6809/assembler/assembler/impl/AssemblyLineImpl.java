/**
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.assembler.impl;

import org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage;
import org.bpy.electronics.mc6809.assembler.assembler.AssemblyLine;
import org.bpy.electronics.mc6809.assembler.assembler.Directive;
import org.bpy.electronics.mc6809.assembler.assembler.LabelField;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assembly Line</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.AssemblyLineImpl#getLabelField <em>Label Field</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.AssemblyLineImpl#getCommand <em>Command</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssemblyLineImpl extends MinimalEObjectImpl.Container implements AssemblyLine
{
  /**
   * The cached value of the '{@link #getLabelField() <em>Label Field</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabelField()
   * @generated
   * @ordered
   */
  protected LabelField labelField;

  /**
   * The cached value of the '{@link #getCommand() <em>Command</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommand()
   * @generated
   * @ordered
   */
  protected Directive command;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssemblyLineImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AssemblerPackage.Literals.ASSEMBLY_LINE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelField getLabelField()
  {
    return labelField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabelField(LabelField newLabelField, NotificationChain msgs)
  {
    LabelField oldLabelField = labelField;
    labelField = newLabelField;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.ASSEMBLY_LINE__LABEL_FIELD, oldLabelField, newLabelField);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabelField(LabelField newLabelField)
  {
    if (newLabelField != labelField)
    {
      NotificationChain msgs = null;
      if (labelField != null)
        msgs = ((InternalEObject)labelField).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.ASSEMBLY_LINE__LABEL_FIELD, null, msgs);
      if (newLabelField != null)
        msgs = ((InternalEObject)newLabelField).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.ASSEMBLY_LINE__LABEL_FIELD, null, msgs);
      msgs = basicSetLabelField(newLabelField, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.ASSEMBLY_LINE__LABEL_FIELD, newLabelField, newLabelField));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Directive getCommand()
  {
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCommand(Directive newCommand, NotificationChain msgs)
  {
    Directive oldCommand = command;
    command = newCommand;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.ASSEMBLY_LINE__COMMAND, oldCommand, newCommand);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCommand(Directive newCommand)
  {
    if (newCommand != command)
    {
      NotificationChain msgs = null;
      if (command != null)
        msgs = ((InternalEObject)command).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.ASSEMBLY_LINE__COMMAND, null, msgs);
      if (newCommand != null)
        msgs = ((InternalEObject)newCommand).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.ASSEMBLY_LINE__COMMAND, null, msgs);
      msgs = basicSetCommand(newCommand, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.ASSEMBLY_LINE__COMMAND, newCommand, newCommand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AssemblerPackage.ASSEMBLY_LINE__LABEL_FIELD:
        return basicSetLabelField(null, msgs);
      case AssemblerPackage.ASSEMBLY_LINE__COMMAND:
        return basicSetCommand(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AssemblerPackage.ASSEMBLY_LINE__LABEL_FIELD:
        return getLabelField();
      case AssemblerPackage.ASSEMBLY_LINE__COMMAND:
        return getCommand();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AssemblerPackage.ASSEMBLY_LINE__LABEL_FIELD:
        setLabelField((LabelField)newValue);
        return;
      case AssemblerPackage.ASSEMBLY_LINE__COMMAND:
        setCommand((Directive)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.ASSEMBLY_LINE__LABEL_FIELD:
        setLabelField((LabelField)null);
        return;
      case AssemblerPackage.ASSEMBLY_LINE__COMMAND:
        setCommand((Directive)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.ASSEMBLY_LINE__LABEL_FIELD:
        return labelField != null;
      case AssemblerPackage.ASSEMBLY_LINE__COMMAND:
        return command != null;
    }
    return super.eIsSet(featureID);
  }

} //AssemblyLineImpl
