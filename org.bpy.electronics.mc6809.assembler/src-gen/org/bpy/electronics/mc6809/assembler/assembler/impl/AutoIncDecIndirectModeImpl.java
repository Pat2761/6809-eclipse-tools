/**
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.assembler.impl;

import org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage;
import org.bpy.electronics.mc6809.assembler.assembler.AutoIncDecIndirectMode;
import org.bpy.electronics.mc6809.assembler.assembler.NumericalValue;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Auto Inc Dec Indirect Mode</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.AutoIncDecIndirectModeImpl#getDeplacement <em>Deplacement</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.AutoIncDecIndirectModeImpl#getDecrement <em>Decrement</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.AutoIncDecIndirectModeImpl#getRegister <em>Register</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.AutoIncDecIndirectModeImpl#getIncrement <em>Increment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AutoIncDecIndirectModeImpl extends MinimalEObjectImpl.Container implements AutoIncDecIndirectMode
{
  /**
   * The cached value of the '{@link #getDeplacement() <em>Deplacement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeplacement()
   * @generated
   * @ordered
   */
  protected NumericalValue deplacement;

  /**
   * The default value of the '{@link #getDecrement() <em>Decrement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecrement()
   * @generated
   * @ordered
   */
  protected static final String DECREMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDecrement() <em>Decrement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecrement()
   * @generated
   * @ordered
   */
  protected String decrement = DECREMENT_EDEFAULT;

  /**
   * The default value of the '{@link #getRegister() <em>Register</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegister()
   * @generated
   * @ordered
   */
  protected static final String REGISTER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRegister() <em>Register</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegister()
   * @generated
   * @ordered
   */
  protected String register = REGISTER_EDEFAULT;

  /**
   * The default value of the '{@link #getIncrement() <em>Increment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncrement()
   * @generated
   * @ordered
   */
  protected static final String INCREMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIncrement() <em>Increment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncrement()
   * @generated
   * @ordered
   */
  protected String increment = INCREMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AutoIncDecIndirectModeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AssemblerPackage.Literals.AUTO_INC_DEC_INDIRECT_MODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericalValue getDeplacement()
  {
    return deplacement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeplacement(NumericalValue newDeplacement, NotificationChain msgs)
  {
    NumericalValue oldDeplacement = deplacement;
    deplacement = newDeplacement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DEPLACEMENT, oldDeplacement, newDeplacement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeplacement(NumericalValue newDeplacement)
  {
    if (newDeplacement != deplacement)
    {
      NotificationChain msgs = null;
      if (deplacement != null)
        msgs = ((InternalEObject)deplacement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DEPLACEMENT, null, msgs);
      if (newDeplacement != null)
        msgs = ((InternalEObject)newDeplacement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DEPLACEMENT, null, msgs);
      msgs = basicSetDeplacement(newDeplacement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DEPLACEMENT, newDeplacement, newDeplacement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDecrement()
  {
    return decrement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecrement(String newDecrement)
  {
    String oldDecrement = decrement;
    decrement = newDecrement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DECREMENT, oldDecrement, decrement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRegister()
  {
    return register;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRegister(String newRegister)
  {
    String oldRegister = register;
    register = newRegister;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__REGISTER, oldRegister, register));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIncrement()
  {
    return increment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIncrement(String newIncrement)
  {
    String oldIncrement = increment;
    increment = newIncrement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__INCREMENT, oldIncrement, increment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DEPLACEMENT:
        return basicSetDeplacement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DEPLACEMENT:
        return getDeplacement();
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DECREMENT:
        return getDecrement();
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__REGISTER:
        return getRegister();
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__INCREMENT:
        return getIncrement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DEPLACEMENT:
        setDeplacement((NumericalValue)newValue);
        return;
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DECREMENT:
        setDecrement((String)newValue);
        return;
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__REGISTER:
        setRegister((String)newValue);
        return;
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__INCREMENT:
        setIncrement((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DEPLACEMENT:
        setDeplacement((NumericalValue)null);
        return;
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DECREMENT:
        setDecrement(DECREMENT_EDEFAULT);
        return;
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__REGISTER:
        setRegister(REGISTER_EDEFAULT);
        return;
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__INCREMENT:
        setIncrement(INCREMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DEPLACEMENT:
        return deplacement != null;
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__DECREMENT:
        return DECREMENT_EDEFAULT == null ? decrement != null : !DECREMENT_EDEFAULT.equals(decrement);
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__REGISTER:
        return REGISTER_EDEFAULT == null ? register != null : !REGISTER_EDEFAULT.equals(register);
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE__INCREMENT:
        return INCREMENT_EDEFAULT == null ? increment != null : !INCREMENT_EDEFAULT.equals(increment);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (decrement: ");
    result.append(decrement);
    result.append(", register: ");
    result.append(register);
    result.append(", increment: ");
    result.append(increment);
    result.append(')');
    return result.toString();
  }

} //AutoIncDecIndirectModeImpl
