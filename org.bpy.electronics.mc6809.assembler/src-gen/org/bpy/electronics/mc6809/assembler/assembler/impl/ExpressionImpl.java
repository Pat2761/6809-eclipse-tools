/**
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.assembler.impl;

import java.util.Collection;

import org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage;
import org.bpy.electronics.mc6809.assembler.assembler.Expression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.ExpressionImpl#getAddition <em>Addition</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.ExpressionImpl#getValues <em>Values</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.ExpressionImpl#getExpressionValue <em>Expression Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The cached value of the '{@link #getAddition() <em>Addition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAddition()
   * @generated
   * @ordered
   */
  protected Expression addition;

  /**
   * The cached value of the '{@link #getValues() <em>Values</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValues()
   * @generated
   * @ordered
   */
  protected EList<EObject> values;

  /**
   * The cached value of the '{@link #getExpressionValue() <em>Expression Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionValue()
   * @generated
   * @ordered
   */
  protected EObject expressionValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AssemblerPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getAddition()
  {
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAddition(Expression newAddition, NotificationChain msgs)
  {
    Expression oldAddition = addition;
    addition = newAddition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.EXPRESSION__ADDITION, oldAddition, newAddition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAddition(Expression newAddition)
  {
    if (newAddition != addition)
    {
      NotificationChain msgs = null;
      if (addition != null)
        msgs = ((InternalEObject)addition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.EXPRESSION__ADDITION, null, msgs);
      if (newAddition != null)
        msgs = ((InternalEObject)newAddition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.EXPRESSION__ADDITION, null, msgs);
      msgs = basicSetAddition(newAddition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.EXPRESSION__ADDITION, newAddition, newAddition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getValues()
  {
    if (values == null)
    {
      values = new EObjectContainmentEList<EObject>(EObject.class, this, AssemblerPackage.EXPRESSION__VALUES);
    }
    return values;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getExpressionValue()
  {
    return expressionValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionValue(EObject newExpressionValue, NotificationChain msgs)
  {
    EObject oldExpressionValue = expressionValue;
    expressionValue = newExpressionValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.EXPRESSION__EXPRESSION_VALUE, oldExpressionValue, newExpressionValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionValue(EObject newExpressionValue)
  {
    if (newExpressionValue != expressionValue)
    {
      NotificationChain msgs = null;
      if (expressionValue != null)
        msgs = ((InternalEObject)expressionValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.EXPRESSION__EXPRESSION_VALUE, null, msgs);
      if (newExpressionValue != null)
        msgs = ((InternalEObject)newExpressionValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.EXPRESSION__EXPRESSION_VALUE, null, msgs);
      msgs = basicSetExpressionValue(newExpressionValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.EXPRESSION__EXPRESSION_VALUE, newExpressionValue, newExpressionValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AssemblerPackage.EXPRESSION__ADDITION:
        return basicSetAddition(null, msgs);
      case AssemblerPackage.EXPRESSION__VALUES:
        return ((InternalEList<?>)getValues()).basicRemove(otherEnd, msgs);
      case AssemblerPackage.EXPRESSION__EXPRESSION_VALUE:
        return basicSetExpressionValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AssemblerPackage.EXPRESSION__ADDITION:
        return getAddition();
      case AssemblerPackage.EXPRESSION__VALUES:
        return getValues();
      case AssemblerPackage.EXPRESSION__EXPRESSION_VALUE:
        return getExpressionValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AssemblerPackage.EXPRESSION__ADDITION:
        setAddition((Expression)newValue);
        return;
      case AssemblerPackage.EXPRESSION__VALUES:
        getValues().clear();
        getValues().addAll((Collection<? extends EObject>)newValue);
        return;
      case AssemblerPackage.EXPRESSION__EXPRESSION_VALUE:
        setExpressionValue((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.EXPRESSION__ADDITION:
        setAddition((Expression)null);
        return;
      case AssemblerPackage.EXPRESSION__VALUES:
        getValues().clear();
        return;
      case AssemblerPackage.EXPRESSION__EXPRESSION_VALUE:
        setExpressionValue((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.EXPRESSION__ADDITION:
        return addition != null;
      case AssemblerPackage.EXPRESSION__VALUES:
        return values != null && !values.isEmpty();
      case AssemblerPackage.EXPRESSION__EXPRESSION_VALUE:
        return expressionValue != null;
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
