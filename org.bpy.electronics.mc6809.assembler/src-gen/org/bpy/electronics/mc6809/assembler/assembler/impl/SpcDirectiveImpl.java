/**
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.assembler.impl;

import org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage;
import org.bpy.electronics.mc6809.assembler.assembler.Expression;
import org.bpy.electronics.mc6809.assembler.assembler.IdentifierValue;
import org.bpy.electronics.mc6809.assembler.assembler.SpcDirective;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Spc Directive</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.SpcDirectiveImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.SpcDirectiveImpl#getDirective <em>Directive</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.SpcDirectiveImpl#getSpaceCount <em>Space Count</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.SpcDirectiveImpl#getKeepCount <em>Keep Count</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.SpcDirectiveImpl#getComment <em>Comment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpcDirectiveImpl extends MinimalEObjectImpl.Container implements SpcDirective
{
  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected IdentifierValue name;

  /**
   * The default value of the '{@link #getDirective() <em>Directive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirective()
   * @generated
   * @ordered
   */
  protected static final String DIRECTIVE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDirective() <em>Directive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirective()
   * @generated
   * @ordered
   */
  protected String directive = DIRECTIVE_EDEFAULT;

  /**
   * The cached value of the '{@link #getSpaceCount() <em>Space Count</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpaceCount()
   * @generated
   * @ordered
   */
  protected Expression spaceCount;

  /**
   * The cached value of the '{@link #getKeepCount() <em>Keep Count</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeepCount()
   * @generated
   * @ordered
   */
  protected Expression keepCount;

  /**
   * The default value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected static final String COMMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected String comment = COMMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpcDirectiveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AssemblerPackage.Literals.SPC_DIRECTIVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdentifierValue getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(IdentifierValue newName, NotificationChain msgs)
  {
    IdentifierValue oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.SPC_DIRECTIVE__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(IdentifierValue newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.SPC_DIRECTIVE__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.SPC_DIRECTIVE__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.SPC_DIRECTIVE__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDirective()
  {
    return directive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDirective(String newDirective)
  {
    String oldDirective = directive;
    directive = newDirective;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.SPC_DIRECTIVE__DIRECTIVE, oldDirective, directive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getSpaceCount()
  {
    return spaceCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSpaceCount(Expression newSpaceCount, NotificationChain msgs)
  {
    Expression oldSpaceCount = spaceCount;
    spaceCount = newSpaceCount;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.SPC_DIRECTIVE__SPACE_COUNT, oldSpaceCount, newSpaceCount);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpaceCount(Expression newSpaceCount)
  {
    if (newSpaceCount != spaceCount)
    {
      NotificationChain msgs = null;
      if (spaceCount != null)
        msgs = ((InternalEObject)spaceCount).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.SPC_DIRECTIVE__SPACE_COUNT, null, msgs);
      if (newSpaceCount != null)
        msgs = ((InternalEObject)newSpaceCount).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.SPC_DIRECTIVE__SPACE_COUNT, null, msgs);
      msgs = basicSetSpaceCount(newSpaceCount, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.SPC_DIRECTIVE__SPACE_COUNT, newSpaceCount, newSpaceCount));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getKeepCount()
  {
    return keepCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetKeepCount(Expression newKeepCount, NotificationChain msgs)
  {
    Expression oldKeepCount = keepCount;
    keepCount = newKeepCount;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.SPC_DIRECTIVE__KEEP_COUNT, oldKeepCount, newKeepCount);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeepCount(Expression newKeepCount)
  {
    if (newKeepCount != keepCount)
    {
      NotificationChain msgs = null;
      if (keepCount != null)
        msgs = ((InternalEObject)keepCount).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.SPC_DIRECTIVE__KEEP_COUNT, null, msgs);
      if (newKeepCount != null)
        msgs = ((InternalEObject)newKeepCount).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.SPC_DIRECTIVE__KEEP_COUNT, null, msgs);
      msgs = basicSetKeepCount(newKeepCount, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.SPC_DIRECTIVE__KEEP_COUNT, newKeepCount, newKeepCount));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(String newComment)
  {
    String oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.SPC_DIRECTIVE__COMMENT, oldComment, comment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AssemblerPackage.SPC_DIRECTIVE__NAME:
        return basicSetName(null, msgs);
      case AssemblerPackage.SPC_DIRECTIVE__SPACE_COUNT:
        return basicSetSpaceCount(null, msgs);
      case AssemblerPackage.SPC_DIRECTIVE__KEEP_COUNT:
        return basicSetKeepCount(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AssemblerPackage.SPC_DIRECTIVE__NAME:
        return getName();
      case AssemblerPackage.SPC_DIRECTIVE__DIRECTIVE:
        return getDirective();
      case AssemblerPackage.SPC_DIRECTIVE__SPACE_COUNT:
        return getSpaceCount();
      case AssemblerPackage.SPC_DIRECTIVE__KEEP_COUNT:
        return getKeepCount();
      case AssemblerPackage.SPC_DIRECTIVE__COMMENT:
        return getComment();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AssemblerPackage.SPC_DIRECTIVE__NAME:
        setName((IdentifierValue)newValue);
        return;
      case AssemblerPackage.SPC_DIRECTIVE__DIRECTIVE:
        setDirective((String)newValue);
        return;
      case AssemblerPackage.SPC_DIRECTIVE__SPACE_COUNT:
        setSpaceCount((Expression)newValue);
        return;
      case AssemblerPackage.SPC_DIRECTIVE__KEEP_COUNT:
        setKeepCount((Expression)newValue);
        return;
      case AssemblerPackage.SPC_DIRECTIVE__COMMENT:
        setComment((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.SPC_DIRECTIVE__NAME:
        setName((IdentifierValue)null);
        return;
      case AssemblerPackage.SPC_DIRECTIVE__DIRECTIVE:
        setDirective(DIRECTIVE_EDEFAULT);
        return;
      case AssemblerPackage.SPC_DIRECTIVE__SPACE_COUNT:
        setSpaceCount((Expression)null);
        return;
      case AssemblerPackage.SPC_DIRECTIVE__KEEP_COUNT:
        setKeepCount((Expression)null);
        return;
      case AssemblerPackage.SPC_DIRECTIVE__COMMENT:
        setComment(COMMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.SPC_DIRECTIVE__NAME:
        return name != null;
      case AssemblerPackage.SPC_DIRECTIVE__DIRECTIVE:
        return DIRECTIVE_EDEFAULT == null ? directive != null : !DIRECTIVE_EDEFAULT.equals(directive);
      case AssemblerPackage.SPC_DIRECTIVE__SPACE_COUNT:
        return spaceCount != null;
      case AssemblerPackage.SPC_DIRECTIVE__KEEP_COUNT:
        return keepCount != null;
      case AssemblerPackage.SPC_DIRECTIVE__COMMENT:
        return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (directive: ");
    result.append(directive);
    result.append(", comment: ");
    result.append(comment);
    result.append(')');
    return result.toString();
  }

} //SpcDirectiveImpl
