/**
 * generated by Xtext 2.29.0
 */
package org.bpy.electronics.mc6809.assembler.assembler.util;

import org.bpy.electronics.mc6809.assembler.assembler.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage
 * @generated
 */
public class AssemblerAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AssemblerPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssemblerAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AssemblerPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssemblerSwitch<Adapter> modelSwitch =
    new AssemblerSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseSourceLine(SourceLine object)
      {
        return createSourceLineAdapter();
      }
      @Override
      public Adapter caseBlankLine(BlankLine object)
      {
        return createBlankLineAdapter();
      }
      @Override
      public Adapter caseCommentLine(CommentLine object)
      {
        return createCommentLineAdapter();
      }
      @Override
      public Adapter caseInstructionLine(InstructionLine object)
      {
        return createInstructionLineAdapter();
      }
      @Override
      public Adapter caseTstInstruction(TstInstruction object)
      {
        return createTstInstructionAdapter();
      }
      @Override
      public Adapter caseTfrInstruction(TfrInstruction object)
      {
        return createTfrInstructionAdapter();
      }
      @Override
      public Adapter caseSyncInstruction(SyncInstruction object)
      {
        return createSyncInstructionAdapter();
      }
      @Override
      public Adapter caseSwi3Instruction(Swi3Instruction object)
      {
        return createSwi3InstructionAdapter();
      }
      @Override
      public Adapter caseSwi2Instruction(Swi2Instruction object)
      {
        return createSwi2InstructionAdapter();
      }
      @Override
      public Adapter caseSwiInstruction(SwiInstruction object)
      {
        return createSwiInstructionAdapter();
      }
      @Override
      public Adapter caseSubdInstruction(SubdInstruction object)
      {
        return createSubdInstructionAdapter();
      }
      @Override
      public Adapter caseSubInstruction(SubInstruction object)
      {
        return createSubInstructionAdapter();
      }
      @Override
      public Adapter caseSt16Instruction(St16Instruction object)
      {
        return createSt16InstructionAdapter();
      }
      @Override
      public Adapter caseSt8Instruction(St8Instruction object)
      {
        return createSt8InstructionAdapter();
      }
      @Override
      public Adapter caseSexInstruction(SexInstruction object)
      {
        return createSexInstructionAdapter();
      }
      @Override
      public Adapter caseSbcInstruction(SbcInstruction object)
      {
        return createSbcInstructionAdapter();
      }
      @Override
      public Adapter caseRtsInstruction(RtsInstruction object)
      {
        return createRtsInstructionAdapter();
      }
      @Override
      public Adapter caseRtiInstruction(RtiInstruction object)
      {
        return createRtiInstructionAdapter();
      }
      @Override
      public Adapter caseRorInstruction(RorInstruction object)
      {
        return createRorInstructionAdapter();
      }
      @Override
      public Adapter caseRolInstruction(RolInstruction object)
      {
        return createRolInstructionAdapter();
      }
      @Override
      public Adapter casePuluInstruction(PuluInstruction object)
      {
        return createPuluInstructionAdapter();
      }
      @Override
      public Adapter casePulsInstruction(PulsInstruction object)
      {
        return createPulsInstructionAdapter();
      }
      @Override
      public Adapter casePshuInstruction(PshuInstruction object)
      {
        return createPshuInstructionAdapter();
      }
      @Override
      public Adapter casePshsInstruction(PshsInstruction object)
      {
        return createPshsInstructionAdapter();
      }
      @Override
      public Adapter caseOrccInstruction(OrccInstruction object)
      {
        return createOrccInstructionAdapter();
      }
      @Override
      public Adapter caseOrInstruction(OrInstruction object)
      {
        return createOrInstructionAdapter();
      }
      @Override
      public Adapter caseNopInstruction(NopInstruction object)
      {
        return createNopInstructionAdapter();
      }
      @Override
      public Adapter caseNegInstruction(NegInstruction object)
      {
        return createNegInstructionAdapter();
      }
      @Override
      public Adapter caseMulInstruction(MulInstruction object)
      {
        return createMulInstructionAdapter();
      }
      @Override
      public Adapter caseLsrInstruction(LsrInstruction object)
      {
        return createLsrInstructionAdapter();
      }
      @Override
      public Adapter caseLslInstruction(LslInstruction object)
      {
        return createLslInstructionAdapter();
      }
      @Override
      public Adapter caseLeaInstruction(LeaInstruction object)
      {
        return createLeaInstructionAdapter();
      }
      @Override
      public Adapter caseLd16Instruction(Ld16Instruction object)
      {
        return createLd16InstructionAdapter();
      }
      @Override
      public Adapter caseLd8Instruction(Ld8Instruction object)
      {
        return createLd8InstructionAdapter();
      }
      @Override
      public Adapter caseJsrInstruction(JsrInstruction object)
      {
        return createJsrInstructionAdapter();
      }
      @Override
      public Adapter caseJmpInstruction(JmpInstruction object)
      {
        return createJmpInstructionAdapter();
      }
      @Override
      public Adapter caseIncInstruction(IncInstruction object)
      {
        return createIncInstructionAdapter();
      }
      @Override
      public Adapter caseExgInstruction(ExgInstruction object)
      {
        return createExgInstructionAdapter();
      }
      @Override
      public Adapter caseEorInstruction(EorInstruction object)
      {
        return createEorInstructionAdapter();
      }
      @Override
      public Adapter caseDecInstruction(DecInstruction object)
      {
        return createDecInstructionAdapter();
      }
      @Override
      public Adapter caseDaaInstruction(DaaInstruction object)
      {
        return createDaaInstructionAdapter();
      }
      @Override
      public Adapter caseCwaiInstruction(CwaiInstruction object)
      {
        return createCwaiInstructionAdapter();
      }
      @Override
      public Adapter caseComInstruction(ComInstruction object)
      {
        return createComInstructionAdapter();
      }
      @Override
      public Adapter caseCmpInstruction(CmpInstruction object)
      {
        return createCmpInstructionAdapter();
      }
      @Override
      public Adapter caseClrInstruction(ClrInstruction object)
      {
        return createClrInstructionAdapter();
      }
      @Override
      public Adapter caseBvsInstruction(BvsInstruction object)
      {
        return createBvsInstructionAdapter();
      }
      @Override
      public Adapter caseBvcInstruction(BvcInstruction object)
      {
        return createBvcInstructionAdapter();
      }
      @Override
      public Adapter caseBsrInstruction(BsrInstruction object)
      {
        return createBsrInstructionAdapter();
      }
      @Override
      public Adapter caseBrnInstruction(BrnInstruction object)
      {
        return createBrnInstructionAdapter();
      }
      @Override
      public Adapter caseBraInstruction(BraInstruction object)
      {
        return createBraInstructionAdapter();
      }
      @Override
      public Adapter caseBplInstruction(BplInstruction object)
      {
        return createBplInstructionAdapter();
      }
      @Override
      public Adapter caseBneInstruction(BneInstruction object)
      {
        return createBneInstructionAdapter();
      }
      @Override
      public Adapter caseBmiInstruction(BmiInstruction object)
      {
        return createBmiInstructionAdapter();
      }
      @Override
      public Adapter caseBltInstruction(BltInstruction object)
      {
        return createBltInstructionAdapter();
      }
      @Override
      public Adapter caseBlsInstruction(BlsInstruction object)
      {
        return createBlsInstructionAdapter();
      }
      @Override
      public Adapter caseBloInstruction(BloInstruction object)
      {
        return createBloInstructionAdapter();
      }
      @Override
      public Adapter caseBleInstruction(BleInstruction object)
      {
        return createBleInstructionAdapter();
      }
      @Override
      public Adapter caseBitInstruction(BitInstruction object)
      {
        return createBitInstructionAdapter();
      }
      @Override
      public Adapter caseBhsInstruction(BhsInstruction object)
      {
        return createBhsInstructionAdapter();
      }
      @Override
      public Adapter caseBhiInstruction(BhiInstruction object)
      {
        return createBhiInstructionAdapter();
      }
      @Override
      public Adapter caseBgtInstruction(BgtInstruction object)
      {
        return createBgtInstructionAdapter();
      }
      @Override
      public Adapter caseBgeInstruction(BgeInstruction object)
      {
        return createBgeInstructionAdapter();
      }
      @Override
      public Adapter caseBeqInstruction(BeqInstruction object)
      {
        return createBeqInstructionAdapter();
      }
      @Override
      public Adapter caseBcsInstruction(BcsInstruction object)
      {
        return createBcsInstructionAdapter();
      }
      @Override
      public Adapter caseBccInstruction(BccInstruction object)
      {
        return createBccInstructionAdapter();
      }
      @Override
      public Adapter caseAsrInstruction(AsrInstruction object)
      {
        return createAsrInstructionAdapter();
      }
      @Override
      public Adapter caseAslInstruction(AslInstruction object)
      {
        return createAslInstructionAdapter();
      }
      @Override
      public Adapter caseAndCCInstruction(AndCCInstruction object)
      {
        return createAndCCInstructionAdapter();
      }
      @Override
      public Adapter caseAndInstruction(AndInstruction object)
      {
        return createAndInstructionAdapter();
      }
      @Override
      public Adapter caseAdddInstruction(AdddInstruction object)
      {
        return createAdddInstructionAdapter();
      }
      @Override
      public Adapter caseAddInstruction(AddInstruction object)
      {
        return createAddInstructionAdapter();
      }
      @Override
      public Adapter caseAdcInstruction(AdcInstruction object)
      {
        return createAdcInstructionAdapter();
      }
      @Override
      public Adapter caseAbxInstruction(AbxInstruction object)
      {
        return createAbxInstructionAdapter();
      }
      @Override
      public Adapter caseExtendedIndirectOperand(ExtendedIndirectOperand object)
      {
        return createExtendedIndirectOperandAdapter();
      }
      @Override
      public Adapter caseExtendedOperand(ExtendedOperand object)
      {
        return createExtendedOperandAdapter();
      }
      @Override
      public Adapter caseDirectOperand(DirectOperand object)
      {
        return createDirectOperandAdapter();
      }
      @Override
      public Adapter caseImmediatOperand(ImmediatOperand object)
      {
        return createImmediatOperandAdapter();
      }
      @Override
      public Adapter caseIndexedOperand(IndexedOperand object)
      {
        return createIndexedOperandAdapter();
      }
      @Override
      public Adapter caseConstantIndexedMode(ConstantIndexedMode object)
      {
        return createConstantIndexedModeAdapter();
      }
      @Override
      public Adapter caseConstantIndexedMovingIndirectMode(ConstantIndexedMovingIndirectMode object)
      {
        return createConstantIndexedMovingIndirectModeAdapter();
      }
      @Override
      public Adapter caseAccumulatorMovingMode(AccumulatorMovingMode object)
      {
        return createAccumulatorMovingModeAdapter();
      }
      @Override
      public Adapter caseAccumulatorMovingIndirectMode(AccumulatorMovingIndirectMode object)
      {
        return createAccumulatorMovingIndirectModeAdapter();
      }
      @Override
      public Adapter caseAutoIncDecMode(AutoIncDecMode object)
      {
        return createAutoIncDecModeAdapter();
      }
      @Override
      public Adapter caseAutoIncDecIndirectMode(AutoIncDecIndirectMode object)
      {
        return createAutoIncDecIndirectModeAdapter();
      }
      @Override
      public Adapter caseRelatifToPCMode(RelatifToPCMode object)
      {
        return createRelatifToPCModeAdapter();
      }
      @Override
      public Adapter caseRelatifToPCIndirectMode(RelatifToPCIndirectMode object)
      {
        return createRelatifToPCIndirectModeAdapter();
      }
      @Override
      public Adapter caseRelativeMode(RelativeMode object)
      {
        return createRelativeModeAdapter();
      }
      @Override
      public Adapter caseDirectiveLine(DirectiveLine object)
      {
        return createDirectiveLineAdapter();
      }
      @Override
      public Adapter caseFccDirective(FccDirective object)
      {
        return createFccDirectiveAdapter();
      }
      @Override
      public Adapter caseRegDirective(RegDirective object)
      {
        return createRegDirectiveAdapter();
      }
      @Override
      public Adapter caseSpcDirective(SpcDirective object)
      {
        return createSpcDirectiveAdapter();
      }
      @Override
      public Adapter caseNamDirective(NamDirective object)
      {
        return createNamDirectiveAdapter();
      }
      @Override
      public Adapter casePagDirective(PagDirective object)
      {
        return createPagDirectiveAdapter();
      }
      @Override
      public Adapter caseOptDirective(OptDirective object)
      {
        return createOptDirectiveAdapter();
      }
      @Override
      public Adapter caseFailDirective(FailDirective object)
      {
        return createFailDirectiveAdapter();
      }
      @Override
      public Adapter caseSetDirective(SetDirective object)
      {
        return createSetDirectiveAdapter();
      }
      @Override
      public Adapter caseFillDirective(FillDirective object)
      {
        return createFillDirectiveAdapter();
      }
      @Override
      public Adapter caseBszDirective(BszDirective object)
      {
        return createBszDirectiveAdapter();
      }
      @Override
      public Adapter caseFdbDirective(FdbDirective object)
      {
        return createFdbDirectiveAdapter();
      }
      @Override
      public Adapter caseFcbDirective(FcbDirective object)
      {
        return createFcbDirectiveAdapter();
      }
      @Override
      public Adapter caseRmbDirective(RmbDirective object)
      {
        return createRmbDirectiveAdapter();
      }
      @Override
      public Adapter caseEndDirective(EndDirective object)
      {
        return createEndDirectiveAdapter();
      }
      @Override
      public Adapter caseOrgDirective(OrgDirective object)
      {
        return createOrgDirectiveAdapter();
      }
      @Override
      public Adapter caseEquDirective(EquDirective object)
      {
        return createEquDirectiveAdapter();
      }
      @Override
      public Adapter caseListOfExpression(ListOfExpression object)
      {
        return createListOfExpressionAdapter();
      }
      @Override
      public Adapter caseCommaExpression(CommaExpression object)
      {
        return createCommaExpressionAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseNumericalValue(NumericalValue object)
      {
        return createNumericalValueAdapter();
      }
      @Override
      public Adapter caseIdentifierValue(IdentifierValue object)
      {
        return createIdentifierValueAdapter();
      }
      @Override
      public Adapter caseStringValue(StringValue object)
      {
        return createStringValueAdapter();
      }
      @Override
      public Adapter caseDecimalValue(DecimalValue object)
      {
        return createDecimalValueAdapter();
      }
      @Override
      public Adapter caseHexaDecimalValue(HexaDecimalValue object)
      {
        return createHexaDecimalValueAdapter();
      }
      @Override
      public Adapter caseOctalValue(OctalValue object)
      {
        return createOctalValueAdapter();
      }
      @Override
      public Adapter caseBinaryValue(BinaryValue object)
      {
        return createBinaryValueAdapter();
      }
      @Override
      public Adapter caseCharacterValue(CharacterValue object)
      {
        return createCharacterValueAdapter();
      }
      @Override
      public Adapter caseMultiplication(Multiplication object)
      {
        return createMultiplicationAdapter();
      }
      @Override
      public Adapter caseDivision(Division object)
      {
        return createDivisionAdapter();
      }
      @Override
      public Adapter caseModulo(Modulo object)
      {
        return createModuloAdapter();
      }
      @Override
      public Adapter caseAddition(Addition object)
      {
        return createAdditionAdapter();
      }
      @Override
      public Adapter caseSubstraction(Substraction object)
      {
        return createSubstractionAdapter();
      }
      @Override
      public Adapter caseLeftShift(LeftShift object)
      {
        return createLeftShiftAdapter();
      }
      @Override
      public Adapter caseRightShift(RightShift object)
      {
        return createRightShiftAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseXor(Xor object)
      {
        return createXorAdapter();
      }
      @Override
      public Adapter caseNot(Not object)
      {
        return createNotAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.SourceLine <em>Source Line</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.SourceLine
   * @generated
   */
  public Adapter createSourceLineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BlankLine <em>Blank Line</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BlankLine
   * @generated
   */
  public Adapter createBlankLineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.CommentLine <em>Comment Line</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.CommentLine
   * @generated
   */
  public Adapter createCommentLineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.InstructionLine <em>Instruction Line</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.InstructionLine
   * @generated
   */
  public Adapter createInstructionLineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.TstInstruction <em>Tst Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.TstInstruction
   * @generated
   */
  public Adapter createTstInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.TfrInstruction <em>Tfr Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.TfrInstruction
   * @generated
   */
  public Adapter createTfrInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.SyncInstruction <em>Sync Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.SyncInstruction
   * @generated
   */
  public Adapter createSyncInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Swi3Instruction <em>Swi3 Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Swi3Instruction
   * @generated
   */
  public Adapter createSwi3InstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Swi2Instruction <em>Swi2 Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Swi2Instruction
   * @generated
   */
  public Adapter createSwi2InstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.SwiInstruction <em>Swi Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.SwiInstruction
   * @generated
   */
  public Adapter createSwiInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.SubdInstruction <em>Subd Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.SubdInstruction
   * @generated
   */
  public Adapter createSubdInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.SubInstruction <em>Sub Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.SubInstruction
   * @generated
   */
  public Adapter createSubInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.St16Instruction <em>St16 Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.St16Instruction
   * @generated
   */
  public Adapter createSt16InstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.St8Instruction <em>St8 Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.St8Instruction
   * @generated
   */
  public Adapter createSt8InstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.SexInstruction <em>Sex Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.SexInstruction
   * @generated
   */
  public Adapter createSexInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.SbcInstruction <em>Sbc Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.SbcInstruction
   * @generated
   */
  public Adapter createSbcInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RtsInstruction <em>Rts Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RtsInstruction
   * @generated
   */
  public Adapter createRtsInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RtiInstruction <em>Rti Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RtiInstruction
   * @generated
   */
  public Adapter createRtiInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RorInstruction <em>Ror Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RorInstruction
   * @generated
   */
  public Adapter createRorInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RolInstruction <em>Rol Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RolInstruction
   * @generated
   */
  public Adapter createRolInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.PuluInstruction <em>Pulu Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.PuluInstruction
   * @generated
   */
  public Adapter createPuluInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.PulsInstruction <em>Puls Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.PulsInstruction
   * @generated
   */
  public Adapter createPulsInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.PshuInstruction <em>Pshu Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.PshuInstruction
   * @generated
   */
  public Adapter createPshuInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.PshsInstruction <em>Pshs Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.PshsInstruction
   * @generated
   */
  public Adapter createPshsInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.OrccInstruction <em>Orcc Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.OrccInstruction
   * @generated
   */
  public Adapter createOrccInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.OrInstruction <em>Or Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.OrInstruction
   * @generated
   */
  public Adapter createOrInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.NopInstruction <em>Nop Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.NopInstruction
   * @generated
   */
  public Adapter createNopInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.NegInstruction <em>Neg Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.NegInstruction
   * @generated
   */
  public Adapter createNegInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.MulInstruction <em>Mul Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.MulInstruction
   * @generated
   */
  public Adapter createMulInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.LsrInstruction <em>Lsr Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.LsrInstruction
   * @generated
   */
  public Adapter createLsrInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.LslInstruction <em>Lsl Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.LslInstruction
   * @generated
   */
  public Adapter createLslInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.LeaInstruction <em>Lea Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.LeaInstruction
   * @generated
   */
  public Adapter createLeaInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Ld16Instruction <em>Ld16 Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Ld16Instruction
   * @generated
   */
  public Adapter createLd16InstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Ld8Instruction <em>Ld8 Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Ld8Instruction
   * @generated
   */
  public Adapter createLd8InstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.JsrInstruction <em>Jsr Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.JsrInstruction
   * @generated
   */
  public Adapter createJsrInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.JmpInstruction <em>Jmp Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.JmpInstruction
   * @generated
   */
  public Adapter createJmpInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.IncInstruction <em>Inc Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.IncInstruction
   * @generated
   */
  public Adapter createIncInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.ExgInstruction <em>Exg Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.ExgInstruction
   * @generated
   */
  public Adapter createExgInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.EorInstruction <em>Eor Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.EorInstruction
   * @generated
   */
  public Adapter createEorInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.DecInstruction <em>Dec Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.DecInstruction
   * @generated
   */
  public Adapter createDecInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.DaaInstruction <em>Daa Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.DaaInstruction
   * @generated
   */
  public Adapter createDaaInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.CwaiInstruction <em>Cwai Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.CwaiInstruction
   * @generated
   */
  public Adapter createCwaiInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.ComInstruction <em>Com Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.ComInstruction
   * @generated
   */
  public Adapter createComInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.CmpInstruction <em>Cmp Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.CmpInstruction
   * @generated
   */
  public Adapter createCmpInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.ClrInstruction <em>Clr Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.ClrInstruction
   * @generated
   */
  public Adapter createClrInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BvsInstruction <em>Bvs Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BvsInstruction
   * @generated
   */
  public Adapter createBvsInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BvcInstruction <em>Bvc Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BvcInstruction
   * @generated
   */
  public Adapter createBvcInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BsrInstruction <em>Bsr Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BsrInstruction
   * @generated
   */
  public Adapter createBsrInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BrnInstruction <em>Brn Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BrnInstruction
   * @generated
   */
  public Adapter createBrnInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BraInstruction <em>Bra Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BraInstruction
   * @generated
   */
  public Adapter createBraInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BplInstruction <em>Bpl Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BplInstruction
   * @generated
   */
  public Adapter createBplInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BneInstruction <em>Bne Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BneInstruction
   * @generated
   */
  public Adapter createBneInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BmiInstruction <em>Bmi Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BmiInstruction
   * @generated
   */
  public Adapter createBmiInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BltInstruction <em>Blt Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BltInstruction
   * @generated
   */
  public Adapter createBltInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BlsInstruction <em>Bls Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BlsInstruction
   * @generated
   */
  public Adapter createBlsInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BloInstruction <em>Blo Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BloInstruction
   * @generated
   */
  public Adapter createBloInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BleInstruction <em>Ble Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BleInstruction
   * @generated
   */
  public Adapter createBleInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BitInstruction <em>Bit Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BitInstruction
   * @generated
   */
  public Adapter createBitInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BhsInstruction <em>Bhs Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BhsInstruction
   * @generated
   */
  public Adapter createBhsInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BhiInstruction <em>Bhi Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BhiInstruction
   * @generated
   */
  public Adapter createBhiInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BgtInstruction <em>Bgt Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BgtInstruction
   * @generated
   */
  public Adapter createBgtInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BgeInstruction <em>Bge Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BgeInstruction
   * @generated
   */
  public Adapter createBgeInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BeqInstruction <em>Beq Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BeqInstruction
   * @generated
   */
  public Adapter createBeqInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BcsInstruction <em>Bcs Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BcsInstruction
   * @generated
   */
  public Adapter createBcsInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BccInstruction <em>Bcc Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BccInstruction
   * @generated
   */
  public Adapter createBccInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AsrInstruction <em>Asr Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AsrInstruction
   * @generated
   */
  public Adapter createAsrInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AslInstruction <em>Asl Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AslInstruction
   * @generated
   */
  public Adapter createAslInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AndCCInstruction <em>And CC Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AndCCInstruction
   * @generated
   */
  public Adapter createAndCCInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AndInstruction <em>And Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AndInstruction
   * @generated
   */
  public Adapter createAndInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AdddInstruction <em>Addd Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AdddInstruction
   * @generated
   */
  public Adapter createAdddInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AddInstruction <em>Add Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AddInstruction
   * @generated
   */
  public Adapter createAddInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AdcInstruction <em>Adc Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AdcInstruction
   * @generated
   */
  public Adapter createAdcInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AbxInstruction <em>Abx Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AbxInstruction
   * @generated
   */
  public Adapter createAbxInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.ExtendedIndirectOperand <em>Extended Indirect Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.ExtendedIndirectOperand
   * @generated
   */
  public Adapter createExtendedIndirectOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.ExtendedOperand <em>Extended Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.ExtendedOperand
   * @generated
   */
  public Adapter createExtendedOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.DirectOperand <em>Direct Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.DirectOperand
   * @generated
   */
  public Adapter createDirectOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.ImmediatOperand <em>Immediat Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.ImmediatOperand
   * @generated
   */
  public Adapter createImmediatOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.IndexedOperand <em>Indexed Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.IndexedOperand
   * @generated
   */
  public Adapter createIndexedOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.ConstantIndexedMode <em>Constant Indexed Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.ConstantIndexedMode
   * @generated
   */
  public Adapter createConstantIndexedModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.ConstantIndexedMovingIndirectMode <em>Constant Indexed Moving Indirect Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.ConstantIndexedMovingIndirectMode
   * @generated
   */
  public Adapter createConstantIndexedMovingIndirectModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AccumulatorMovingMode <em>Accumulator Moving Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AccumulatorMovingMode
   * @generated
   */
  public Adapter createAccumulatorMovingModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AccumulatorMovingIndirectMode <em>Accumulator Moving Indirect Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AccumulatorMovingIndirectMode
   * @generated
   */
  public Adapter createAccumulatorMovingIndirectModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AutoIncDecMode <em>Auto Inc Dec Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AutoIncDecMode
   * @generated
   */
  public Adapter createAutoIncDecModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.AutoIncDecIndirectMode <em>Auto Inc Dec Indirect Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.AutoIncDecIndirectMode
   * @generated
   */
  public Adapter createAutoIncDecIndirectModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RelatifToPCMode <em>Relatif To PC Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RelatifToPCMode
   * @generated
   */
  public Adapter createRelatifToPCModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RelatifToPCIndirectMode <em>Relatif To PC Indirect Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RelatifToPCIndirectMode
   * @generated
   */
  public Adapter createRelatifToPCIndirectModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RelativeMode <em>Relative Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RelativeMode
   * @generated
   */
  public Adapter createRelativeModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.DirectiveLine <em>Directive Line</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.DirectiveLine
   * @generated
   */
  public Adapter createDirectiveLineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.FccDirective <em>Fcc Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.FccDirective
   * @generated
   */
  public Adapter createFccDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RegDirective <em>Reg Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RegDirective
   * @generated
   */
  public Adapter createRegDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.SpcDirective <em>Spc Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.SpcDirective
   * @generated
   */
  public Adapter createSpcDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.NamDirective <em>Nam Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.NamDirective
   * @generated
   */
  public Adapter createNamDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.PagDirective <em>Pag Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.PagDirective
   * @generated
   */
  public Adapter createPagDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.OptDirective <em>Opt Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.OptDirective
   * @generated
   */
  public Adapter createOptDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.FailDirective <em>Fail Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.FailDirective
   * @generated
   */
  public Adapter createFailDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.SetDirective <em>Set Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.SetDirective
   * @generated
   */
  public Adapter createSetDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.FillDirective <em>Fill Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.FillDirective
   * @generated
   */
  public Adapter createFillDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BszDirective <em>Bsz Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BszDirective
   * @generated
   */
  public Adapter createBszDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.FdbDirective <em>Fdb Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.FdbDirective
   * @generated
   */
  public Adapter createFdbDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.FcbDirective <em>Fcb Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.FcbDirective
   * @generated
   */
  public Adapter createFcbDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RmbDirective <em>Rmb Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RmbDirective
   * @generated
   */
  public Adapter createRmbDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.EndDirective <em>End Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.EndDirective
   * @generated
   */
  public Adapter createEndDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.OrgDirective <em>Org Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.OrgDirective
   * @generated
   */
  public Adapter createOrgDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.EquDirective <em>Equ Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.EquDirective
   * @generated
   */
  public Adapter createEquDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.ListOfExpression <em>List Of Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.ListOfExpression
   * @generated
   */
  public Adapter createListOfExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.CommaExpression <em>Comma Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.CommaExpression
   * @generated
   */
  public Adapter createCommaExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.NumericalValue <em>Numerical Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.NumericalValue
   * @generated
   */
  public Adapter createNumericalValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.IdentifierValue <em>Identifier Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.IdentifierValue
   * @generated
   */
  public Adapter createIdentifierValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.StringValue <em>String Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.StringValue
   * @generated
   */
  public Adapter createStringValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.DecimalValue <em>Decimal Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.DecimalValue
   * @generated
   */
  public Adapter createDecimalValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.HexaDecimalValue <em>Hexa Decimal Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.HexaDecimalValue
   * @generated
   */
  public Adapter createHexaDecimalValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.OctalValue <em>Octal Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.OctalValue
   * @generated
   */
  public Adapter createOctalValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.BinaryValue <em>Binary Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.BinaryValue
   * @generated
   */
  public Adapter createBinaryValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.CharacterValue <em>Character Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.CharacterValue
   * @generated
   */
  public Adapter createCharacterValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Multiplication <em>Multiplication</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Multiplication
   * @generated
   */
  public Adapter createMultiplicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Division <em>Division</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Division
   * @generated
   */
  public Adapter createDivisionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Modulo <em>Modulo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Modulo
   * @generated
   */
  public Adapter createModuloAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Addition <em>Addition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Addition
   * @generated
   */
  public Adapter createAdditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Substraction <em>Substraction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Substraction
   * @generated
   */
  public Adapter createSubstractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.LeftShift <em>Left Shift</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.LeftShift
   * @generated
   */
  public Adapter createLeftShiftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.RightShift <em>Right Shift</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.RightShift
   * @generated
   */
  public Adapter createRightShiftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Xor <em>Xor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Xor
   * @generated
   */
  public Adapter createXorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bpy.electronics.mc6809.assembler.assembler.Not <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bpy.electronics.mc6809.assembler.assembler.Not
   * @generated
   */
  public Adapter createNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AssemblerAdapterFactory
