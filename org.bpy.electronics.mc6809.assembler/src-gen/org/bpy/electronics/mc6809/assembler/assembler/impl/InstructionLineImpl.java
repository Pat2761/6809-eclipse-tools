/**
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.assembler.impl;

import org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage;
import org.bpy.electronics.mc6809.assembler.assembler.InstructionLine;
import org.bpy.electronics.mc6809.assembler.assembler.Label;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Instruction Line</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.InstructionLineImpl#getLabel <em>Label</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.InstructionLineImpl#getWs1 <em>Ws1</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.InstructionLineImpl#getInstruction <em>Instruction</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.InstructionLineImpl#getWs2 <em>Ws2</em>}</li>
 *   <li>{@link org.bpy.electronics.mc6809.assembler.assembler.impl.InstructionLineImpl#getComment <em>Comment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InstructionLineImpl extends MinimalEObjectImpl.Container implements InstructionLine
{
  /**
   * The cached value of the '{@link #getLabel() <em>Label</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabel()
   * @generated
   * @ordered
   */
  protected Label label;

  /**
   * The default value of the '{@link #getWs1() <em>Ws1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWs1()
   * @generated
   * @ordered
   */
  protected static final String WS1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWs1() <em>Ws1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWs1()
   * @generated
   * @ordered
   */
  protected String ws1 = WS1_EDEFAULT;

  /**
   * The cached value of the '{@link #getInstruction() <em>Instruction</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstruction()
   * @generated
   * @ordered
   */
  protected EObject instruction;

  /**
   * The default value of the '{@link #getWs2() <em>Ws2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWs2()
   * @generated
   * @ordered
   */
  protected static final String WS2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWs2() <em>Ws2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWs2()
   * @generated
   * @ordered
   */
  protected String ws2 = WS2_EDEFAULT;

  /**
   * The default value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected static final String COMMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected String comment = COMMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InstructionLineImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AssemblerPackage.Literals.INSTRUCTION_LINE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Label getLabel()
  {
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabel(Label newLabel, NotificationChain msgs)
  {
    Label oldLabel = label;
    label = newLabel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.INSTRUCTION_LINE__LABEL, oldLabel, newLabel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabel(Label newLabel)
  {
    if (newLabel != label)
    {
      NotificationChain msgs = null;
      if (label != null)
        msgs = ((InternalEObject)label).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.INSTRUCTION_LINE__LABEL, null, msgs);
      if (newLabel != null)
        msgs = ((InternalEObject)newLabel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.INSTRUCTION_LINE__LABEL, null, msgs);
      msgs = basicSetLabel(newLabel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.INSTRUCTION_LINE__LABEL, newLabel, newLabel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWs1()
  {
    return ws1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWs1(String newWs1)
  {
    String oldWs1 = ws1;
    ws1 = newWs1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.INSTRUCTION_LINE__WS1, oldWs1, ws1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getInstruction()
  {
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInstruction(EObject newInstruction, NotificationChain msgs)
  {
    EObject oldInstruction = instruction;
    instruction = newInstruction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssemblerPackage.INSTRUCTION_LINE__INSTRUCTION, oldInstruction, newInstruction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInstruction(EObject newInstruction)
  {
    if (newInstruction != instruction)
    {
      NotificationChain msgs = null;
      if (instruction != null)
        msgs = ((InternalEObject)instruction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.INSTRUCTION_LINE__INSTRUCTION, null, msgs);
      if (newInstruction != null)
        msgs = ((InternalEObject)newInstruction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AssemblerPackage.INSTRUCTION_LINE__INSTRUCTION, null, msgs);
      msgs = basicSetInstruction(newInstruction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.INSTRUCTION_LINE__INSTRUCTION, newInstruction, newInstruction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWs2()
  {
    return ws2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWs2(String newWs2)
  {
    String oldWs2 = ws2;
    ws2 = newWs2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.INSTRUCTION_LINE__WS2, oldWs2, ws2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(String newComment)
  {
    String oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AssemblerPackage.INSTRUCTION_LINE__COMMENT, oldComment, comment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AssemblerPackage.INSTRUCTION_LINE__LABEL:
        return basicSetLabel(null, msgs);
      case AssemblerPackage.INSTRUCTION_LINE__INSTRUCTION:
        return basicSetInstruction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AssemblerPackage.INSTRUCTION_LINE__LABEL:
        return getLabel();
      case AssemblerPackage.INSTRUCTION_LINE__WS1:
        return getWs1();
      case AssemblerPackage.INSTRUCTION_LINE__INSTRUCTION:
        return getInstruction();
      case AssemblerPackage.INSTRUCTION_LINE__WS2:
        return getWs2();
      case AssemblerPackage.INSTRUCTION_LINE__COMMENT:
        return getComment();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AssemblerPackage.INSTRUCTION_LINE__LABEL:
        setLabel((Label)newValue);
        return;
      case AssemblerPackage.INSTRUCTION_LINE__WS1:
        setWs1((String)newValue);
        return;
      case AssemblerPackage.INSTRUCTION_LINE__INSTRUCTION:
        setInstruction((EObject)newValue);
        return;
      case AssemblerPackage.INSTRUCTION_LINE__WS2:
        setWs2((String)newValue);
        return;
      case AssemblerPackage.INSTRUCTION_LINE__COMMENT:
        setComment((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.INSTRUCTION_LINE__LABEL:
        setLabel((Label)null);
        return;
      case AssemblerPackage.INSTRUCTION_LINE__WS1:
        setWs1(WS1_EDEFAULT);
        return;
      case AssemblerPackage.INSTRUCTION_LINE__INSTRUCTION:
        setInstruction((EObject)null);
        return;
      case AssemblerPackage.INSTRUCTION_LINE__WS2:
        setWs2(WS2_EDEFAULT);
        return;
      case AssemblerPackage.INSTRUCTION_LINE__COMMENT:
        setComment(COMMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AssemblerPackage.INSTRUCTION_LINE__LABEL:
        return label != null;
      case AssemblerPackage.INSTRUCTION_LINE__WS1:
        return WS1_EDEFAULT == null ? ws1 != null : !WS1_EDEFAULT.equals(ws1);
      case AssemblerPackage.INSTRUCTION_LINE__INSTRUCTION:
        return instruction != null;
      case AssemblerPackage.INSTRUCTION_LINE__WS2:
        return WS2_EDEFAULT == null ? ws2 != null : !WS2_EDEFAULT.equals(ws2);
      case AssemblerPackage.INSTRUCTION_LINE__COMMENT:
        return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ws1: ");
    result.append(ws1);
    result.append(", ws2: ");
    result.append(ws2);
    result.append(", comment: ");
    result.append(comment);
    result.append(')');
    return result.toString();
  }

} //InstructionLineImpl
