/**
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.assembler.util;

import org.bpy.electronics.mc6809.assembler.assembler.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage
 * @generated
 */
public class AssemblerSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AssemblerPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssemblerSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AssemblerPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AssemblerPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.SOURCE_LINE:
      {
        SourceLine sourceLine = (SourceLine)theEObject;
        T result = caseSourceLine(sourceLine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BLANK_LINE:
      {
        BlankLine blankLine = (BlankLine)theEObject;
        T result = caseBlankLine(blankLine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.COMMENT_LINE:
      {
        CommentLine commentLine = (CommentLine)theEObject;
        T result = caseCommentLine(commentLine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.INSTRUCTION_LINE:
      {
        InstructionLine instructionLine = (InstructionLine)theEObject;
        T result = caseInstructionLine(instructionLine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.CWAI_INSTRUCTION:
      {
        CwaiInstruction cwaiInstruction = (CwaiInstruction)theEObject;
        T result = caseCwaiInstruction(cwaiInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.COM_INSTRUCTION:
      {
        ComInstruction comInstruction = (ComInstruction)theEObject;
        T result = caseComInstruction(comInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.CMP_INSTRUCTION:
      {
        CmpInstruction cmpInstruction = (CmpInstruction)theEObject;
        T result = caseCmpInstruction(cmpInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.CLR_INSTRUCTION:
      {
        ClrInstruction clrInstruction = (ClrInstruction)theEObject;
        T result = caseClrInstruction(clrInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BVS_INSTRUCTION:
      {
        BvsInstruction bvsInstruction = (BvsInstruction)theEObject;
        T result = caseBvsInstruction(bvsInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BVC_INSTRUCTION:
      {
        BvcInstruction bvcInstruction = (BvcInstruction)theEObject;
        T result = caseBvcInstruction(bvcInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BSR_INSTRUCTION:
      {
        BsrInstruction bsrInstruction = (BsrInstruction)theEObject;
        T result = caseBsrInstruction(bsrInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BRN_INSTRUCTION:
      {
        BrnInstruction brnInstruction = (BrnInstruction)theEObject;
        T result = caseBrnInstruction(brnInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BRA_INSTRUCTION:
      {
        BraInstruction braInstruction = (BraInstruction)theEObject;
        T result = caseBraInstruction(braInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BPL_INSTRUCTION:
      {
        BplInstruction bplInstruction = (BplInstruction)theEObject;
        T result = caseBplInstruction(bplInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BNE_INSTRUCTION:
      {
        BneInstruction bneInstruction = (BneInstruction)theEObject;
        T result = caseBneInstruction(bneInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BMI_INSTRUCTION:
      {
        BmiInstruction bmiInstruction = (BmiInstruction)theEObject;
        T result = caseBmiInstruction(bmiInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BLT_INSTRUCTION:
      {
        BltInstruction bltInstruction = (BltInstruction)theEObject;
        T result = caseBltInstruction(bltInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BLS_INSTRUCTION:
      {
        BlsInstruction blsInstruction = (BlsInstruction)theEObject;
        T result = caseBlsInstruction(blsInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BLO_INSTRUCTION:
      {
        BloInstruction bloInstruction = (BloInstruction)theEObject;
        T result = caseBloInstruction(bloInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BLE_INSTRUCTION:
      {
        BleInstruction bleInstruction = (BleInstruction)theEObject;
        T result = caseBleInstruction(bleInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BIT_INSTRUCTION:
      {
        BitInstruction bitInstruction = (BitInstruction)theEObject;
        T result = caseBitInstruction(bitInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BHS_INSTRUCTION:
      {
        BhsInstruction bhsInstruction = (BhsInstruction)theEObject;
        T result = caseBhsInstruction(bhsInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BHI_INSTRUCTION:
      {
        BhiInstruction bhiInstruction = (BhiInstruction)theEObject;
        T result = caseBhiInstruction(bhiInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BGT_INSTRUCTION:
      {
        BgtInstruction bgtInstruction = (BgtInstruction)theEObject;
        T result = caseBgtInstruction(bgtInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BGE_INSTRUCTION:
      {
        BgeInstruction bgeInstruction = (BgeInstruction)theEObject;
        T result = caseBgeInstruction(bgeInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BEQ_INSTRUCTION:
      {
        BeqInstruction beqInstruction = (BeqInstruction)theEObject;
        T result = caseBeqInstruction(beqInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BCS_INSTRUCTION:
      {
        BcsInstruction bcsInstruction = (BcsInstruction)theEObject;
        T result = caseBcsInstruction(bcsInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BCC_INSTRUCTION:
      {
        BccInstruction bccInstruction = (BccInstruction)theEObject;
        T result = caseBccInstruction(bccInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ASR_INSTRUCTION:
      {
        AsrInstruction asrInstruction = (AsrInstruction)theEObject;
        T result = caseAsrInstruction(asrInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ASL_INSTRUCTION:
      {
        AslInstruction aslInstruction = (AslInstruction)theEObject;
        T result = caseAslInstruction(aslInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.AND_CC_INSTRUCTION:
      {
        AndCCInstruction andCCInstruction = (AndCCInstruction)theEObject;
        T result = caseAndCCInstruction(andCCInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.AND_INSTRUCTION:
      {
        AndInstruction andInstruction = (AndInstruction)theEObject;
        T result = caseAndInstruction(andInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ADDD_INSTRUCTION:
      {
        AdddInstruction adddInstruction = (AdddInstruction)theEObject;
        T result = caseAdddInstruction(adddInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ADD_INSTRUCTION:
      {
        AddInstruction addInstruction = (AddInstruction)theEObject;
        T result = caseAddInstruction(addInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ADC_INSTRUCTION:
      {
        AdcInstruction adcInstruction = (AdcInstruction)theEObject;
        T result = caseAdcInstruction(adcInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ABX_INSTRUCTION:
      {
        AbxInstruction abxInstruction = (AbxInstruction)theEObject;
        T result = caseAbxInstruction(abxInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.EXTENDED_INDIRECT_OPERAND:
      {
        ExtendedIndirectOperand extendedIndirectOperand = (ExtendedIndirectOperand)theEObject;
        T result = caseExtendedIndirectOperand(extendedIndirectOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.EXTENDED_OPERAND:
      {
        ExtendedOperand extendedOperand = (ExtendedOperand)theEObject;
        T result = caseExtendedOperand(extendedOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.DIRECT_OPERAND:
      {
        DirectOperand directOperand = (DirectOperand)theEObject;
        T result = caseDirectOperand(directOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.IMMEDIAT_OPERAND:
      {
        ImmediatOperand immediatOperand = (ImmediatOperand)theEObject;
        T result = caseImmediatOperand(immediatOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.INDEXED_OPERAND:
      {
        IndexedOperand indexedOperand = (IndexedOperand)theEObject;
        T result = caseIndexedOperand(indexedOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.CONSTANT_INDEXED_MODE:
      {
        ConstantIndexedMode constantIndexedMode = (ConstantIndexedMode)theEObject;
        T result = caseConstantIndexedMode(constantIndexedMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.CONSTANT_INDEXED_MOVING_INDIRECT_MODE:
      {
        ConstantIndexedMovingIndirectMode constantIndexedMovingIndirectMode = (ConstantIndexedMovingIndirectMode)theEObject;
        T result = caseConstantIndexedMovingIndirectMode(constantIndexedMovingIndirectMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ACCUMULATOR_MOVING_MODE:
      {
        AccumulatorMovingMode accumulatorMovingMode = (AccumulatorMovingMode)theEObject;
        T result = caseAccumulatorMovingMode(accumulatorMovingMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ACCUMULATOR_MOVING_INDIRECT_MODE:
      {
        AccumulatorMovingIndirectMode accumulatorMovingIndirectMode = (AccumulatorMovingIndirectMode)theEObject;
        T result = caseAccumulatorMovingIndirectMode(accumulatorMovingIndirectMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.AUTO_INC_DEC_MODE:
      {
        AutoIncDecMode autoIncDecMode = (AutoIncDecMode)theEObject;
        T result = caseAutoIncDecMode(autoIncDecMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.AUTO_INC_DEC_INDIRECT_MODE:
      {
        AutoIncDecIndirectMode autoIncDecIndirectMode = (AutoIncDecIndirectMode)theEObject;
        T result = caseAutoIncDecIndirectMode(autoIncDecIndirectMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.RELATIF_TO_PC_MODE:
      {
        RelatifToPCMode relatifToPCMode = (RelatifToPCMode)theEObject;
        T result = caseRelatifToPCMode(relatifToPCMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.RELATIF_TO_PC_INDIRECT_MODE:
      {
        RelatifToPCIndirectMode relatifToPCIndirectMode = (RelatifToPCIndirectMode)theEObject;
        T result = caseRelatifToPCIndirectMode(relatifToPCIndirectMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.RELATIVE_MODE:
      {
        RelativeMode relativeMode = (RelativeMode)theEObject;
        T result = caseRelativeMode(relativeMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.DIRECTIVE_LINE:
      {
        DirectiveLine directiveLine = (DirectiveLine)theEObject;
        T result = caseDirectiveLine(directiveLine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.FCC_DIRECTIVE:
      {
        FccDirective fccDirective = (FccDirective)theEObject;
        T result = caseFccDirective(fccDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.REG_DIRECTIVE:
      {
        RegDirective regDirective = (RegDirective)theEObject;
        T result = caseRegDirective(regDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.SPC_DIRECTIVE:
      {
        SpcDirective spcDirective = (SpcDirective)theEObject;
        T result = caseSpcDirective(spcDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.NAM_DIRECTIVE:
      {
        NamDirective namDirective = (NamDirective)theEObject;
        T result = caseNamDirective(namDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.PAG_DIRECTIVE:
      {
        PagDirective pagDirective = (PagDirective)theEObject;
        T result = casePagDirective(pagDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.OPT_DIRECTIVE:
      {
        OptDirective optDirective = (OptDirective)theEObject;
        T result = caseOptDirective(optDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.FAIL_DIRECTIVE:
      {
        FailDirective failDirective = (FailDirective)theEObject;
        T result = caseFailDirective(failDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.SET_DIRECTIVE:
      {
        SetDirective setDirective = (SetDirective)theEObject;
        T result = caseSetDirective(setDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.FILL_DIRECTIVE:
      {
        FillDirective fillDirective = (FillDirective)theEObject;
        T result = caseFillDirective(fillDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BSZ_DIRECTIVE:
      {
        BszDirective bszDirective = (BszDirective)theEObject;
        T result = caseBszDirective(bszDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.FDB_DIRECTIVE:
      {
        FdbDirective fdbDirective = (FdbDirective)theEObject;
        T result = caseFdbDirective(fdbDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.FCB_DIRECTIVE:
      {
        FcbDirective fcbDirective = (FcbDirective)theEObject;
        T result = caseFcbDirective(fcbDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.RMB_DIRECTIVE:
      {
        RmbDirective rmbDirective = (RmbDirective)theEObject;
        T result = caseRmbDirective(rmbDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.END_DIRECTIVE:
      {
        EndDirective endDirective = (EndDirective)theEObject;
        T result = caseEndDirective(endDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ORG_DIRECTIVE:
      {
        OrgDirective orgDirective = (OrgDirective)theEObject;
        T result = caseOrgDirective(orgDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.EQU_DIRECTIVE:
      {
        EquDirective equDirective = (EquDirective)theEObject;
        T result = caseEquDirective(equDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.LIST_OF_EXPRESSION:
      {
        ListOfExpression listOfExpression = (ListOfExpression)theEObject;
        T result = caseListOfExpression(listOfExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.NUMERICAL_VALUE:
      {
        NumericalValue numericalValue = (NumericalValue)theEObject;
        T result = caseNumericalValue(numericalValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.IDENTIFIER_VALUE:
      {
        IdentifierValue identifierValue = (IdentifierValue)theEObject;
        T result = caseIdentifierValue(identifierValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.STRING_VALUE:
      {
        StringValue stringValue = (StringValue)theEObject;
        T result = caseStringValue(stringValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.DECIMAL_VALUE:
      {
        DecimalValue decimalValue = (DecimalValue)theEObject;
        T result = caseDecimalValue(decimalValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.HEXA_DECIMAL_VALUE:
      {
        HexaDecimalValue hexaDecimalValue = (HexaDecimalValue)theEObject;
        T result = caseHexaDecimalValue(hexaDecimalValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.OCTAL_VALUE:
      {
        OctalValue octalValue = (OctalValue)theEObject;
        T result = caseOctalValue(octalValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.BINARY_VALUE:
      {
        BinaryValue binaryValue = (BinaryValue)theEObject;
        T result = caseBinaryValue(binaryValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.CHARACTER_VALUE:
      {
        CharacterValue characterValue = (CharacterValue)theEObject;
        T result = caseCharacterValue(characterValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.MULTIPLICATION:
      {
        Multiplication multiplication = (Multiplication)theEObject;
        T result = caseMultiplication(multiplication);
        if (result == null) result = caseExpression(multiplication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.DIVISION:
      {
        Division division = (Division)theEObject;
        T result = caseDivision(division);
        if (result == null) result = caseExpression(division);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.MODULO:
      {
        Modulo modulo = (Modulo)theEObject;
        T result = caseModulo(modulo);
        if (result == null) result = caseExpression(modulo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.ADDITION:
      {
        Addition addition = (Addition)theEObject;
        T result = caseAddition(addition);
        if (result == null) result = caseExpression(addition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.SUBSTRACTION:
      {
        Substraction substraction = (Substraction)theEObject;
        T result = caseSubstraction(substraction);
        if (result == null) result = caseExpression(substraction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.LEFT_SHIFT:
      {
        LeftShift leftShift = (LeftShift)theEObject;
        T result = caseLeftShift(leftShift);
        if (result == null) result = caseExpression(leftShift);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.RIGHT_SHIFT:
      {
        RightShift rightShift = (RightShift)theEObject;
        T result = caseRightShift(rightShift);
        if (result == null) result = caseExpression(rightShift);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseExpression(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.OR:
      {
        Or or = (Or)theEObject;
        T result = caseOr(or);
        if (result == null) result = caseExpression(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.XOR:
      {
        Xor xor = (Xor)theEObject;
        T result = caseXor(xor);
        if (result == null) result = caseExpression(xor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AssemblerPackage.NOT:
      {
        Not not = (Not)theEObject;
        T result = caseNot(not);
        if (result == null) result = caseExpression(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source Line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source Line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSourceLine(SourceLine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Blank Line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Blank Line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlankLine(BlankLine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comment Line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comment Line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommentLine(CommentLine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instruction Line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instruction Line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstructionLine(InstructionLine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cwai Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cwai Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCwaiInstruction(CwaiInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Com Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Com Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComInstruction(ComInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cmp Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cmp Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCmpInstruction(CmpInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Clr Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Clr Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClrInstruction(ClrInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bvs Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bvs Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBvsInstruction(BvsInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bvc Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bvc Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBvcInstruction(BvcInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bsr Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bsr Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBsrInstruction(BsrInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Brn Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Brn Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBrnInstruction(BrnInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bra Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bra Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBraInstruction(BraInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bpl Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bpl Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBplInstruction(BplInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bne Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bne Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBneInstruction(BneInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bmi Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bmi Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBmiInstruction(BmiInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Blt Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Blt Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBltInstruction(BltInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bls Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bls Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlsInstruction(BlsInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Blo Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Blo Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBloInstruction(BloInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ble Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ble Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBleInstruction(BleInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitInstruction(BitInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bhs Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bhs Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBhsInstruction(BhsInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bhi Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bhi Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBhiInstruction(BhiInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bgt Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bgt Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBgtInstruction(BgtInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bge Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bge Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBgeInstruction(BgeInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Beq Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Beq Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBeqInstruction(BeqInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bcs Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bcs Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBcsInstruction(BcsInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bcc Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bcc Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBccInstruction(BccInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Asr Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Asr Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAsrInstruction(AsrInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Asl Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Asl Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAslInstruction(AslInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And CC Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And CC Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndCCInstruction(AndCCInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndInstruction(AndInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Addd Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Addd Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdddInstruction(AdddInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddInstruction(AddInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Adc Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Adc Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdcInstruction(AdcInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abx Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abx Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbxInstruction(AbxInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extended Indirect Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extended Indirect Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtendedIndirectOperand(ExtendedIndirectOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extended Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extended Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtendedOperand(ExtendedOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Direct Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Direct Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectOperand(DirectOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Immediat Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Immediat Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImmediatOperand(ImmediatOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Indexed Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Indexed Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexedOperand(IndexedOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant Indexed Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant Indexed Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantIndexedMode(ConstantIndexedMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant Indexed Moving Indirect Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant Indexed Moving Indirect Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantIndexedMovingIndirectMode(ConstantIndexedMovingIndirectMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Accumulator Moving Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Accumulator Moving Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAccumulatorMovingMode(AccumulatorMovingMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Accumulator Moving Indirect Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Accumulator Moving Indirect Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAccumulatorMovingIndirectMode(AccumulatorMovingIndirectMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Auto Inc Dec Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Auto Inc Dec Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAutoIncDecMode(AutoIncDecMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Auto Inc Dec Indirect Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Auto Inc Dec Indirect Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAutoIncDecIndirectMode(AutoIncDecIndirectMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relatif To PC Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relatif To PC Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelatifToPCMode(RelatifToPCMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relatif To PC Indirect Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relatif To PC Indirect Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelatifToPCIndirectMode(RelatifToPCIndirectMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relative Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relative Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelativeMode(RelativeMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Directive Line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Directive Line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectiveLine(DirectiveLine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fcc Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fcc Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFccDirective(FccDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reg Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reg Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegDirective(RegDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spc Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spc Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpcDirective(SpcDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nam Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nam Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamDirective(NamDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pag Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pag Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePagDirective(PagDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Opt Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Opt Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptDirective(OptDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fail Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fail Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFailDirective(FailDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetDirective(SetDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fill Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fill Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFillDirective(FillDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bsz Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bsz Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBszDirective(BszDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fdb Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fdb Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFdbDirective(FdbDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fcb Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fcb Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFcbDirective(FcbDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rmb Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rmb Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRmbDirective(RmbDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndDirective(EndDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Org Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Org Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrgDirective(OrgDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equ Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equ Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquDirective(EquDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Of Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Of Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListOfExpression(ListOfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numerical Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numerical Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericalValue(NumericalValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Identifier Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Identifier Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdentifierValue(IdentifierValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringValue(StringValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Decimal Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Decimal Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDecimalValue(DecimalValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hexa Decimal Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hexa Decimal Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHexaDecimalValue(HexaDecimalValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Octal Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Octal Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOctalValue(OctalValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryValue(BinaryValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Character Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Character Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacterValue(CharacterValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplication(Multiplication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Division</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Division</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDivision(Division object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modulo</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modulo</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModulo(Modulo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Addition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Addition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddition(Addition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Substraction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Substraction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubstraction(Substraction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Left Shift</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Left Shift</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLeftShift(LeftShift object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Right Shift</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Right Shift</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRightShift(RightShift object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOr(Or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXor(Xor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNot(Not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AssemblerSwitch
