/*
 * generated by Xtext 2.29.0
 */
grammar InternalAssembler;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.bpy.electronics.mc6809.assembler.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.bpy.electronics.mc6809.assembler.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.bpy.electronics.mc6809.assembler.services.AssemblerGrammarAccess;

}

@parser::members {

 	private AssemblerGrammarAccess grammarAccess;

    public InternalAssemblerParser(TokenStream input, AssemblerGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected AssemblerGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getSourceLinesSourceLineParserRuleCall_0());
			}
			lv_sourceLines_0_0=ruleSourceLine
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"sourceLines",
					lv_sourceLines_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.SourceLine");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSourceLine
entryRuleSourceLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceLineRule()); }
	iv_ruleSourceLine=ruleSourceLine
	{ $current=$iv_ruleSourceLine.current; }
	EOF;

// Rule SourceLine
ruleSourceLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceLineAccess().getLineContentBlankLineParserRuleCall_0_0());
				}
				lv_lineContent_0_0=ruleBlankLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceLineRule());
					}
					set(
						$current,
						"lineContent",
						lv_lineContent_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.BlankLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceLineAccess().getLineContentCommentLineParserRuleCall_1_0());
				}
				lv_lineContent_1_0=ruleCommentLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceLineRule());
					}
					set(
						$current,
						"lineContent",
						lv_lineContent_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.CommentLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceLineAccess().getLineContentDirectiveLineParserRuleCall_2_0());
				}
				lv_lineContent_2_0=ruleDirectiveLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceLineRule());
					}
					set(
						$current,
						"lineContent",
						lv_lineContent_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.DirectiveLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceLineAccess().getLineContentInstructionLineParserRuleCall_3_0());
				}
				lv_lineContent_3_0=ruleInstructionLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceLineRule());
					}
					set(
						$current,
						"lineContent",
						lv_lineContent_3_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.InstructionLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlankLine
entryRuleBlankLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlankLineRule()); }
	iv_ruleBlankLine=ruleBlankLine
	{ $current=$iv_ruleBlankLine.current; }
	EOF;

// Rule BlankLine
ruleBlankLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlankLineAccess().getBlankLineAction_0(),
					$current);
			}
		)
		(
			(
				lv_blankLine_1_0=RULE_WS
				{
					newLeafNode(lv_blankLine_1_0, grammarAccess.getBlankLineAccess().getBlankLineWSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBlankLineRule());
					}
					setWithLastConsumed(
						$current,
						"blankLine",
						lv_blankLine_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.WS");
				}
			)
		)?
		{
			newCompositeNode(grammarAccess.getBlankLineAccess().getEndOfLineParserRuleCall_2());
		}
		ruleEndOfLine
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommentLine
entryRuleCommentLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentLineRule()); }
	iv_ruleCommentLine=ruleCommentLine
	{ $current=$iv_ruleCommentLine.current; }
	EOF;

// Rule CommentLine
ruleCommentLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCommentLineAccess().getCommentLineAction_0(),
					$current);
			}
		)
		(
			(
				lv_startingSpace_1_0=RULE_WS
				{
					newLeafNode(lv_startingSpace_1_0, grammarAccess.getCommentLineAccess().getStartingSpaceWSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommentLineRule());
					}
					setWithLastConsumed(
						$current,
						"startingSpace",
						lv_startingSpace_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.WS");
				}
			)
		)?
		(
			(
				lv_comment_2_0=RULE_ANY_EXCEPT_COMMENT_END_OF_LINE
				{
					newLeafNode(lv_comment_2_0, grammarAccess.getCommentLineAccess().getCommentANY_EXCEPT_COMMENT_END_OF_LINETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommentLineRule());
					}
					setWithLastConsumed(
						$current,
						"comment",
						lv_comment_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.ANY_EXCEPT_COMMENT_END_OF_LINE");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getCommentLineAccess().getEndOfLineParserRuleCall_3());
		}
		ruleEndOfLine
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInstructionLine
entryRuleInstructionLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionLineRule()); }
	iv_ruleInstructionLine=ruleInstructionLine
	{ $current=$iv_ruleInstructionLine.current; }
	EOF;

// Rule InstructionLine
ruleInstructionLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionLineAccess().getNameIdentifierValueParserRuleCall_0_0());
				}
				lv_name_0_0=ruleIdentifierValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.IdentifierValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getInstructionLineAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionAbxInstructionParserRuleCall_2_0_0());
					}
					lv_instruction_2_0=ruleAbxInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.AbxInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionAdcInstructionParserRuleCall_2_1_0());
					}
					lv_instruction_3_0=ruleAdcInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.AdcInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionAddInstructionParserRuleCall_2_2_0());
					}
					lv_instruction_4_0=ruleAddInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_4_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.AddInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionAdddInstructionParserRuleCall_2_3_0());
					}
					lv_instruction_5_0=ruleAdddInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_5_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.AdddInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionAndInstructionParserRuleCall_2_4_0());
					}
					lv_instruction_6_0=ruleAndInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_6_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.AndInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionAndCCInstructionParserRuleCall_2_5_0());
					}
					lv_instruction_7_0=ruleAndCCInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_7_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.AndCCInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionAslInstructionParserRuleCall_2_6_0());
					}
					lv_instruction_8_0=ruleAslInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_8_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.AslInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionAsrInstructionParserRuleCall_2_7_0());
					}
					lv_instruction_9_0=ruleAsrInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_9_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.AsrInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBccInstructionParserRuleCall_2_8_0());
					}
					lv_instruction_10_0=ruleBccInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_10_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BccInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBcsInstructionParserRuleCall_2_9_0());
					}
					lv_instruction_11_0=ruleBcsInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_11_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BcsInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBeqInstructionParserRuleCall_2_10_0());
					}
					lv_instruction_12_0=ruleBeqInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_12_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BeqInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBgeInstructionParserRuleCall_2_11_0());
					}
					lv_instruction_13_0=ruleBgeInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_13_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BgeInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBgtInstructionParserRuleCall_2_12_0());
					}
					lv_instruction_14_0=ruleBgtInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_14_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BgtInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBhiInstructionParserRuleCall_2_13_0());
					}
					lv_instruction_15_0=ruleBhiInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_15_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BhiInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBhsInstructionParserRuleCall_2_14_0());
					}
					lv_instruction_16_0=ruleBhsInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_16_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BhsInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBitInstructionParserRuleCall_2_15_0());
					}
					lv_instruction_17_0=ruleBitInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_17_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BitInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBleInstructionParserRuleCall_2_16_0());
					}
					lv_instruction_18_0=ruleBleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_18_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BleInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBloInstructionParserRuleCall_2_17_0());
					}
					lv_instruction_19_0=ruleBloInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_19_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BloInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBlsInstructionParserRuleCall_2_18_0());
					}
					lv_instruction_20_0=ruleBlsInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_20_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BlsInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBltInstructionParserRuleCall_2_19_0());
					}
					lv_instruction_21_0=ruleBltInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_21_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BltInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBmiInstructionParserRuleCall_2_20_0());
					}
					lv_instruction_22_0=ruleBmiInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_22_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BmiInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBneInstructionParserRuleCall_2_21_0());
					}
					lv_instruction_23_0=ruleBneInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_23_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BneInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBplInstructionParserRuleCall_2_22_0());
					}
					lv_instruction_24_0=ruleBplInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_24_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BplInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBraInstructionParserRuleCall_2_23_0());
					}
					lv_instruction_25_0=ruleBraInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_25_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BraInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBrnInstructionParserRuleCall_2_24_0());
					}
					lv_instruction_26_0=ruleBrnInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_26_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BrnInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBsrInstructionParserRuleCall_2_25_0());
					}
					lv_instruction_27_0=ruleBsrInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_27_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BsrInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBvcInstructionParserRuleCall_2_26_0());
					}
					lv_instruction_28_0=ruleBvcInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_28_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BvcInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionBvsInstructionParserRuleCall_2_27_0());
					}
					lv_instruction_29_0=ruleBvsInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_29_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BvsInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionClrInstructionParserRuleCall_2_28_0());
					}
					lv_instruction_30_0=ruleClrInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_30_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ClrInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionCmpInstructionParserRuleCall_2_29_0());
					}
					lv_instruction_31_0=ruleCmpInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_31_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.CmpInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionComInstructionParserRuleCall_2_30_0());
					}
					lv_instruction_32_0=ruleComInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_32_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ComInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionCwaiInstructionParserRuleCall_2_31_0());
					}
					lv_instruction_33_0=ruleCwaiInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_33_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.CwaiInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionDaaInstructionParserRuleCall_2_32_0());
					}
					lv_instruction_34_0=ruleDaaInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_34_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.DaaInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionDecInstructionParserRuleCall_2_33_0());
					}
					lv_instruction_35_0=ruleDecInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_35_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.DecInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionEorInstructionParserRuleCall_2_34_0());
					}
					lv_instruction_36_0=ruleEorInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_36_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.EorInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionExgInstructionParserRuleCall_2_35_0());
					}
					lv_instruction_37_0=ruleExgInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_37_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExgInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionIncInstructionParserRuleCall_2_36_0());
					}
					lv_instruction_38_0=ruleIncInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_38_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.IncInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionJmpInstructionParserRuleCall_2_37_0());
					}
					lv_instruction_39_0=ruleJmpInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_39_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.JmpInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionJsrInstructionParserRuleCall_2_38_0());
					}
					lv_instruction_40_0=ruleJsrInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_40_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.JsrInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionLd8InstructionParserRuleCall_2_39_0());
					}
					lv_instruction_41_0=ruleLd8Instruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_41_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Ld8Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionLd16InstructionParserRuleCall_2_40_0());
					}
					lv_instruction_42_0=ruleLd16Instruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_42_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Ld16Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionLeaInstructionParserRuleCall_2_41_0());
					}
					lv_instruction_43_0=ruleLeaInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_43_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.LeaInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionLslInstructionParserRuleCall_2_42_0());
					}
					lv_instruction_44_0=ruleLslInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_44_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.LslInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionLsrInstructionParserRuleCall_2_43_0());
					}
					lv_instruction_45_0=ruleLsrInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_45_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.LsrInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionMulInstructionParserRuleCall_2_44_0());
					}
					lv_instruction_46_0=ruleMulInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_46_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.MulInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionNegInstructionParserRuleCall_2_45_0());
					}
					lv_instruction_47_0=ruleNegInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_47_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.NegInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionNopInstructionParserRuleCall_2_46_0());
					}
					lv_instruction_48_0=ruleNopInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_48_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.NopInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionOrInstructionParserRuleCall_2_47_0());
					}
					lv_instruction_49_0=ruleOrInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_49_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.OrInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionOrccInstructionParserRuleCall_2_48_0());
					}
					lv_instruction_50_0=ruleOrccInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_50_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.OrccInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionPshsInstructionParserRuleCall_2_49_0());
					}
					lv_instruction_51_0=rulePshsInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_51_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.PshsInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionPshuInstructionParserRuleCall_2_50_0());
					}
					lv_instruction_52_0=rulePshuInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_52_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.PshuInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionPulsInstructionParserRuleCall_2_51_0());
					}
					lv_instruction_53_0=rulePulsInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_53_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.PulsInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionPuluInstructionParserRuleCall_2_52_0());
					}
					lv_instruction_54_0=rulePuluInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_54_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.PuluInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionRolInstructionParserRuleCall_2_53_0());
					}
					lv_instruction_55_0=ruleRolInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_55_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.RolInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionRorInstructionParserRuleCall_2_54_0());
					}
					lv_instruction_56_0=ruleRorInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_56_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.RorInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionRtiInstructionParserRuleCall_2_55_0());
					}
					lv_instruction_57_0=ruleRtiInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_57_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.RtiInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionRtsInstructionParserRuleCall_2_56_0());
					}
					lv_instruction_58_0=ruleRtsInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_58_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.RtsInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSbcInstructionParserRuleCall_2_57_0());
					}
					lv_instruction_59_0=ruleSbcInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_59_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.SbcInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSexInstructionParserRuleCall_2_58_0());
					}
					lv_instruction_60_0=ruleSexInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_60_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.SexInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSt8InstructionParserRuleCall_2_59_0());
					}
					lv_instruction_61_0=ruleSt8Instruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_61_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.St8Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSt16InstructionParserRuleCall_2_60_0());
					}
					lv_instruction_62_0=ruleSt16Instruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_62_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.St16Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSubInstructionParserRuleCall_2_61_0());
					}
					lv_instruction_63_0=ruleSubInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_63_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.SubInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSubdInstructionParserRuleCall_2_62_0());
					}
					lv_instruction_64_0=ruleSubdInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_64_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.SubdInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSwiInstructionParserRuleCall_2_63_0());
					}
					lv_instruction_65_0=ruleSwiInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_65_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.SwiInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSwi2InstructionParserRuleCall_2_64_0());
					}
					lv_instruction_66_0=ruleSwi2Instruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_66_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Swi2Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSwi3InstructionParserRuleCall_2_65_0());
					}
					lv_instruction_67_0=ruleSwi3Instruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_67_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Swi3Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionSyncInstructionParserRuleCall_2_66_0());
					}
					lv_instruction_68_0=ruleSyncInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_68_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.SyncInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionTfrInstructionParserRuleCall_2_67_0());
					}
					lv_instruction_69_0=ruleTfrInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_69_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.TfrInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionLineAccess().getInstructionTstInstructionParserRuleCall_2_68_0());
					}
					lv_instruction_70_0=ruleTstInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionLineRule());
						}
						set(
							$current,
							"instruction",
							lv_instruction_70_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.TstInstruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			this_WS_71=RULE_WS
			{
				newLeafNode(this_WS_71, grammarAccess.getInstructionLineAccess().getWSTerminalRuleCall_3_0());
			}
			(
				(
					lv_comment_72_0=RULE_ANY_EXCEPT_COMMENT_END_OF_LINE
					{
						newLeafNode(lv_comment_72_0, grammarAccess.getInstructionLineAccess().getCommentANY_EXCEPT_COMMENT_END_OF_LINETerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInstructionLineRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_72_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ANY_EXCEPT_COMMENT_END_OF_LINE");
					}
				)
			)
		)?
		(
			this_WS_73=RULE_WS
			{
				newLeafNode(this_WS_73, grammarAccess.getInstructionLineAccess().getWSTerminalRuleCall_4());
			}
		)?
		{
			newCompositeNode(grammarAccess.getInstructionLineAccess().getEndOfLineParserRuleCall_5());
		}
		ruleEndOfLine
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTstInstruction
entryRuleTstInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTstInstructionRule()); }
	iv_ruleTstInstruction=ruleTstInstruction
	{ $current=$iv_ruleTstInstruction.current; }
	EOF;

// Rule TstInstruction
ruleTstInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='TSTA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getTstInstructionAccess().getInstructionTSTAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTstInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='TSTB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getTstInstructionAccess().getInstructionTSTBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTstInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='TST'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getTstInstructionAccess().getInstructionTSTKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTstInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "TST");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getTstInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTstInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTstInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getTstInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTstInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getTstInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTstInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getTstInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTstInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleTfrInstruction
entryRuleTfrInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTfrInstructionRule()); }
	iv_ruleTfrInstruction=ruleTfrInstruction
	{ $current=$iv_ruleTfrInstruction.current; }
	EOF;

// Rule TfrInstruction
ruleTfrInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='TFR'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getTfrInstructionAccess().getInstructionTFRKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTfrInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "TFR");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getTfrInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTfrInstructionAccess().getReg1RegisterEnumRuleCall_2_0());
				}
				lv_reg1_2_0=ruleRegister
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTfrInstructionRule());
					}
					set(
						$current,
						"reg1",
						lv_reg1_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Register");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getTfrInstructionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTfrInstructionAccess().getReg2RegisterEnumRuleCall_4_0());
				}
				lv_reg2_4_0=ruleRegister
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTfrInstructionRule());
					}
					set(
						$current,
						"reg2",
						lv_reg2_4_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Register");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSyncInstruction
entryRuleSyncInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSyncInstructionRule()); }
	iv_ruleSyncInstruction=ruleSyncInstruction
	{ $current=$iv_ruleSyncInstruction.current; }
	EOF;

// Rule SyncInstruction
ruleSyncInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='SYNC'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getSyncInstructionAccess().getInstructionSYNCKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSyncInstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "SYNC");
			}
		)
	)
;

// Entry rule entryRuleSwi3Instruction
entryRuleSwi3Instruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwi3InstructionRule()); }
	iv_ruleSwi3Instruction=ruleSwi3Instruction
	{ $current=$iv_ruleSwi3Instruction.current; }
	EOF;

// Rule Swi3Instruction
ruleSwi3Instruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='SWI3'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getSwi3InstructionAccess().getInstructionSWI3Keyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSwi3InstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "SWI3");
			}
		)
	)
;

// Entry rule entryRuleSwi2Instruction
entryRuleSwi2Instruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwi2InstructionRule()); }
	iv_ruleSwi2Instruction=ruleSwi2Instruction
	{ $current=$iv_ruleSwi2Instruction.current; }
	EOF;

// Rule Swi2Instruction
ruleSwi2Instruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='SWI2'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getSwi2InstructionAccess().getInstructionSWI2Keyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSwi2InstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "SWI2");
			}
		)
	)
;

// Entry rule entryRuleSwiInstruction
entryRuleSwiInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwiInstructionRule()); }
	iv_ruleSwiInstruction=ruleSwiInstruction
	{ $current=$iv_ruleSwiInstruction.current; }
	EOF;

// Rule SwiInstruction
ruleSwiInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='SWI'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getSwiInstructionAccess().getInstructionSWIKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSwiInstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "SWI");
			}
		)
	)
;

// Entry rule entryRuleSubdInstruction
entryRuleSubdInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubdInstructionRule()); }
	iv_ruleSubdInstruction=ruleSubdInstruction
	{ $current=$iv_ruleSubdInstruction.current; }
	EOF;

// Rule SubdInstruction
ruleSubdInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='SUBD'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getSubdInstructionAccess().getInstructionSUBDKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubdInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "SUBD");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getSubdInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSubdInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubdInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSubdInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubdInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSubdInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubdInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSubdInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubdInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSubdInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubdInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSubInstruction
entryRuleSubInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubInstructionRule()); }
	iv_ruleSubInstruction=ruleSubInstruction
	{ $current=$iv_ruleSubInstruction.current; }
	EOF;

// Rule SubInstruction
ruleSubInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='SUBA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getSubInstructionAccess().getInstructionSUBAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSubInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='SUBB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getSubInstructionAccess().getInstructionSUBBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSubInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getSubInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSubInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSubInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSubInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSubInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSubInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSt16Instruction
entryRuleSt16Instruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSt16InstructionRule()); }
	iv_ruleSt16Instruction=ruleSt16Instruction
	{ $current=$iv_ruleSt16Instruction.current; }
	EOF;

// Rule St16Instruction
ruleSt16Instruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='STD'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getSt16InstructionAccess().getInstructionSTDKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSt16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='STX'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getSt16InstructionAccess().getInstructionSTXKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSt16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
					    |
					lv_instruction_0_3='STY'
					{
						newLeafNode(lv_instruction_0_3, grammarAccess.getSt16InstructionAccess().getInstructionSTYKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSt16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_3, null);
					}
					    |
					lv_instruction_0_4='STS'
					{
						newLeafNode(lv_instruction_0_4, grammarAccess.getSt16InstructionAccess().getInstructionSTSKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSt16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_4, null);
					}
					    |
					lv_instruction_0_5='STU'
					{
						newLeafNode(lv_instruction_0_5, grammarAccess.getSt16InstructionAccess().getInstructionSTUKeyword_0_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSt16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_5, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getSt16InstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSt16InstructionAccess().getOperandDirectOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSt16InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSt16InstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSt16InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSt16InstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSt16InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSt16InstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSt16InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSt8Instruction
entryRuleSt8Instruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSt8InstructionRule()); }
	iv_ruleSt8Instruction=ruleSt8Instruction
	{ $current=$iv_ruleSt8Instruction.current; }
	EOF;

// Rule St8Instruction
ruleSt8Instruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='STA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getSt8InstructionAccess().getInstructionSTAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSt8InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='STB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getSt8InstructionAccess().getInstructionSTBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSt8InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getSt8InstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSt8InstructionAccess().getOperandDirectOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSt8InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSt8InstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSt8InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSt8InstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSt8InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSt8InstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSt8InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSexInstruction
entryRuleSexInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSexInstructionRule()); }
	iv_ruleSexInstruction=ruleSexInstruction
	{ $current=$iv_ruleSexInstruction.current; }
	EOF;

// Rule SexInstruction
ruleSexInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='SEX'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getSexInstructionAccess().getInstructionSEXKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSexInstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "SEX");
			}
		)
	)
;

// Entry rule entryRuleSbcInstruction
entryRuleSbcInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSbcInstructionRule()); }
	iv_ruleSbcInstruction=ruleSbcInstruction
	{ $current=$iv_ruleSbcInstruction.current; }
	EOF;

// Rule SbcInstruction
ruleSbcInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='SBCA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getSbcInstructionAccess().getInstructionSBCAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSbcInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='SBCB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getSbcInstructionAccess().getInstructionSBCBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSbcInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getSbcInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSbcInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSbcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSbcInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSbcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSbcInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSbcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSbcInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSbcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSbcInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSbcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleRtsInstruction
entryRuleRtsInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRtsInstructionRule()); }
	iv_ruleRtsInstruction=ruleRtsInstruction
	{ $current=$iv_ruleRtsInstruction.current; }
	EOF;

// Rule RtsInstruction
ruleRtsInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='RTS'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getRtsInstructionAccess().getInstructionRTSKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRtsInstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "RTS");
			}
		)
	)
;

// Entry rule entryRuleRtiInstruction
entryRuleRtiInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRtiInstructionRule()); }
	iv_ruleRtiInstruction=ruleRtiInstruction
	{ $current=$iv_ruleRtiInstruction.current; }
	EOF;

// Rule RtiInstruction
ruleRtiInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='RTI'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getRtiInstructionAccess().getInstructionRTIKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRtiInstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "RTI");
			}
		)
	)
;

// Entry rule entryRuleRorInstruction
entryRuleRorInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRorInstructionRule()); }
	iv_ruleRorInstruction=ruleRorInstruction
	{ $current=$iv_ruleRorInstruction.current; }
	EOF;

// Rule RorInstruction
ruleRorInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='RORA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getRorInstructionAccess().getInstructionRORAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRorInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='RORB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getRorInstructionAccess().getInstructionRORBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRorInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='ROR'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getRorInstructionAccess().getInstructionRORKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRorInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "ROR");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getRorInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRorInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRorInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRorInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRorInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRorInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRorInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRorInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRorInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleRolInstruction
entryRuleRolInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRolInstructionRule()); }
	iv_ruleRolInstruction=ruleRolInstruction
	{ $current=$iv_ruleRolInstruction.current; }
	EOF;

// Rule RolInstruction
ruleRolInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='ROLA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getRolInstructionAccess().getInstructionROLAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRolInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='ROLB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getRolInstructionAccess().getInstructionROLBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRolInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='ROL'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getRolInstructionAccess().getInstructionROLKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRolInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "ROL");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getRolInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRolInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRolInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRolInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRolInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRolInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRolInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRolInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRolInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRulePuluInstruction
entryRulePuluInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPuluInstructionRule()); }
	iv_rulePuluInstruction=rulePuluInstruction
	{ $current=$iv_rulePuluInstruction.current; }
	EOF;

// Rule PuluInstruction
rulePuluInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='PULU'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getPuluInstructionAccess().getInstructionPULUKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPuluInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "PULU");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getPuluInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPuluInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_0=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPuluInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPuluInstructionAccess().getRegistersRegisterEnumRuleCall_2_1_0_0());
						}
						lv_registers_3_0=ruleRegister
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPuluInstructionRule());
							}
							add(
								$current,
								"registers",
								lv_registers_3_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.Register");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getPuluInstructionAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPuluInstructionAccess().getRegistersRegisterEnumRuleCall_2_1_1_1_0());
							}
							lv_registers_5_0=ruleRegister
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPuluInstructionRule());
								}
								add(
									$current,
									"registers",
									lv_registers_5_0,
									"org.bpy.electronics.mc6809.assembler.Assembler.Register");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)
	)
;

// Entry rule entryRulePulsInstruction
entryRulePulsInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPulsInstructionRule()); }
	iv_rulePulsInstruction=rulePulsInstruction
	{ $current=$iv_rulePulsInstruction.current; }
	EOF;

// Rule PulsInstruction
rulePulsInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='PULS'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getPulsInstructionAccess().getInstructionPULSKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPulsInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "PULS");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getPulsInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPulsInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_0=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPulsInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPulsInstructionAccess().getRegistersRegisterEnumRuleCall_2_1_0_0());
						}
						lv_registers_3_0=ruleRegister
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPulsInstructionRule());
							}
							add(
								$current,
								"registers",
								lv_registers_3_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.Register");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getPulsInstructionAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPulsInstructionAccess().getRegistersRegisterEnumRuleCall_2_1_1_1_0());
							}
							lv_registers_5_0=ruleRegister
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPulsInstructionRule());
								}
								add(
									$current,
									"registers",
									lv_registers_5_0,
									"org.bpy.electronics.mc6809.assembler.Assembler.Register");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)
	)
;

// Entry rule entryRulePshuInstruction
entryRulePshuInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPshuInstructionRule()); }
	iv_rulePshuInstruction=rulePshuInstruction
	{ $current=$iv_rulePshuInstruction.current; }
	EOF;

// Rule PshuInstruction
rulePshuInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='PSHU'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getPshuInstructionAccess().getInstructionPSHUKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPshuInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "PSHU");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getPshuInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPshuInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_0=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPshuInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPshuInstructionAccess().getRegistersRegisterEnumRuleCall_2_1_0_0());
						}
						lv_registers_3_0=ruleRegister
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPshuInstructionRule());
							}
							add(
								$current,
								"registers",
								lv_registers_3_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.Register");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getPshuInstructionAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPshuInstructionAccess().getRegistersRegisterEnumRuleCall_2_1_1_1_0());
							}
							lv_registers_5_0=ruleRegister
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPshuInstructionRule());
								}
								add(
									$current,
									"registers",
									lv_registers_5_0,
									"org.bpy.electronics.mc6809.assembler.Assembler.Register");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)
	)
;

// Entry rule entryRulePshsInstruction
entryRulePshsInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPshsInstructionRule()); }
	iv_rulePshsInstruction=rulePshsInstruction
	{ $current=$iv_rulePshsInstruction.current; }
	EOF;

// Rule PshsInstruction
rulePshsInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='PSHS'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getPshsInstructionAccess().getInstructionPSHSKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPshsInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "PSHS");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getPshsInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPshsInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_0=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPshsInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPshsInstructionAccess().getRegistersRegisterEnumRuleCall_2_1_0_0());
						}
						lv_registers_3_0=ruleRegister
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPshsInstructionRule());
							}
							add(
								$current,
								"registers",
								lv_registers_3_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.Register");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getPshsInstructionAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPshsInstructionAccess().getRegistersRegisterEnumRuleCall_2_1_1_1_0());
							}
							lv_registers_5_0=ruleRegister
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPshsInstructionRule());
								}
								add(
									$current,
									"registers",
									lv_registers_5_0,
									"org.bpy.electronics.mc6809.assembler.Assembler.Register");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)
	)
;

// Entry rule entryRuleOrccInstruction
entryRuleOrccInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrccInstructionRule()); }
	iv_ruleOrccInstruction=ruleOrccInstruction
	{ $current=$iv_ruleOrccInstruction.current; }
	EOF;

// Rule OrccInstruction
ruleOrccInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='ORCC'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getOrccInstructionAccess().getInstructionORCCKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrccInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "ORCC");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getOrccInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrccInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleImmediatOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrccInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOrInstruction
entryRuleOrInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrInstructionRule()); }
	iv_ruleOrInstruction=ruleOrInstruction
	{ $current=$iv_ruleOrInstruction.current; }
	EOF;

// Rule OrInstruction
ruleOrInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='ORA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getOrInstructionAccess().getInstructionORAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='ORB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getOrInstructionAccess().getInstructionORBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getOrInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOrInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getOrInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getOrInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getOrInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getOrInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNopInstruction
entryRuleNopInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNopInstructionRule()); }
	iv_ruleNopInstruction=ruleNopInstruction
	{ $current=$iv_ruleNopInstruction.current; }
	EOF;

// Rule NopInstruction
ruleNopInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='NOP'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getNopInstructionAccess().getInstructionNOPKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNopInstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "NOP");
			}
		)
	)
;

// Entry rule entryRuleNegInstruction
entryRuleNegInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegInstructionRule()); }
	iv_ruleNegInstruction=ruleNegInstruction
	{ $current=$iv_ruleNegInstruction.current; }
	EOF;

// Rule NegInstruction
ruleNegInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='NEGA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getNegInstructionAccess().getInstructionNEGAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNegInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='NEGB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getNegInstructionAccess().getInstructionNEGBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNegInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='NEG'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getNegInstructionAccess().getInstructionNEGKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNegInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "NEG");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getNegInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getNegInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNegInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getNegInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNegInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleMulInstruction
entryRuleMulInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulInstructionRule()); }
	iv_ruleMulInstruction=ruleMulInstruction
	{ $current=$iv_ruleMulInstruction.current; }
	EOF;

// Rule MulInstruction
ruleMulInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='MUL'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getMulInstructionAccess().getInstructionMULKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMulInstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "MUL");
			}
		)
	)
;

// Entry rule entryRuleLsrInstruction
entryRuleLsrInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLsrInstructionRule()); }
	iv_ruleLsrInstruction=ruleLsrInstruction
	{ $current=$iv_ruleLsrInstruction.current; }
	EOF;

// Rule LsrInstruction
ruleLsrInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='LSRA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getLsrInstructionAccess().getInstructionLSRAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLsrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LSRB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getLsrInstructionAccess().getInstructionLSRBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLsrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='LSR'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getLsrInstructionAccess().getInstructionLSRKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLsrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "LSR");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getLsrInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getLsrInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLsrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getLsrInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLsrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getLsrInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLsrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getLsrInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLsrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleLslInstruction
entryRuleLslInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLslInstructionRule()); }
	iv_ruleLslInstruction=ruleLslInstruction
	{ $current=$iv_ruleLslInstruction.current; }
	EOF;

// Rule LslInstruction
ruleLslInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='LSLA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getLslInstructionAccess().getInstructionLSLAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLslInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LSLB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getLslInstructionAccess().getInstructionLSLBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLslInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='LSL'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getLslInstructionAccess().getInstructionLSLKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLslInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "LSL");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getLslInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getLslInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLslInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getLslInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLslInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getLslInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLslInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getLslInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLslInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleLeaInstruction
entryRuleLeaInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeaInstructionRule()); }
	iv_ruleLeaInstruction=ruleLeaInstruction
	{ $current=$iv_ruleLeaInstruction.current; }
	EOF;

// Rule LeaInstruction
ruleLeaInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='LEAX'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getLeaInstructionAccess().getInstructionLEAXKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLeaInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LEAY'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getLeaInstructionAccess().getInstructionLEAYKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLeaInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
					    |
					lv_instruction_0_3='LEAS'
					{
						newLeafNode(lv_instruction_0_3, grammarAccess.getLeaInstructionAccess().getInstructionLEASKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLeaInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_3, null);
					}
					    |
					lv_instruction_0_4='LEAU'
					{
						newLeafNode(lv_instruction_0_4, grammarAccess.getLeaInstructionAccess().getInstructionLEAUKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLeaInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_4, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getLeaInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeaInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleIndexedOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeaInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLd16Instruction
entryRuleLd16Instruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLd16InstructionRule()); }
	iv_ruleLd16Instruction=ruleLd16Instruction
	{ $current=$iv_ruleLd16Instruction.current; }
	EOF;

// Rule Ld16Instruction
ruleLd16Instruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='LDD'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getLd16InstructionAccess().getInstructionLDDKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLd16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LDX'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getLd16InstructionAccess().getInstructionLDXKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLd16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
					    |
					lv_instruction_0_3='LDY'
					{
						newLeafNode(lv_instruction_0_3, grammarAccess.getLd16InstructionAccess().getInstructionLDYKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLd16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_3, null);
					}
					    |
					lv_instruction_0_4='LDS'
					{
						newLeafNode(lv_instruction_0_4, grammarAccess.getLd16InstructionAccess().getInstructionLDSKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLd16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_4, null);
					}
					    |
					lv_instruction_0_5='LDU'
					{
						newLeafNode(lv_instruction_0_5, grammarAccess.getLd16InstructionAccess().getInstructionLDUKeyword_0_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLd16InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_5, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getLd16InstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLd16InstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd16InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLd16InstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd16InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLd16InstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd16InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLd16InstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd16InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLd16InstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd16InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLd8Instruction
entryRuleLd8Instruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLd8InstructionRule()); }
	iv_ruleLd8Instruction=ruleLd8Instruction
	{ $current=$iv_ruleLd8Instruction.current; }
	EOF;

// Rule Ld8Instruction
ruleLd8Instruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='LDA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getLd8InstructionAccess().getInstructionLDAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLd8InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LDB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getLd8InstructionAccess().getInstructionLDBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLd8InstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getLd8InstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLd8InstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd8InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLd8InstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd8InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLd8InstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd8InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLd8InstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd8InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLd8InstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLd8InstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleJsrInstruction
entryRuleJsrInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsrInstructionRule()); }
	iv_ruleJsrInstruction=ruleJsrInstruction
	{ $current=$iv_ruleJsrInstruction.current; }
	EOF;

// Rule JsrInstruction
ruleJsrInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='JSR'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getJsrInstructionAccess().getInstructionJSRKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJsrInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "JSR");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getJsrInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJsrInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJsrInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getJsrInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJsrInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getJsrInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJsrInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getJsrInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJsrInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleJmpInstruction
entryRuleJmpInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJmpInstructionRule()); }
	iv_ruleJmpInstruction=ruleJmpInstruction
	{ $current=$iv_ruleJmpInstruction.current; }
	EOF;

// Rule JmpInstruction
ruleJmpInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='JMP'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getJmpInstructionAccess().getInstructionJMPKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJmpInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "JMP");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getJmpInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJmpInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJmpInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getJmpInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJmpInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getJmpInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJmpInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getJmpInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJmpInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleIncInstruction
entryRuleIncInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncInstructionRule()); }
	iv_ruleIncInstruction=ruleIncInstruction
	{ $current=$iv_ruleIncInstruction.current; }
	EOF;

// Rule IncInstruction
ruleIncInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='INCA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getIncInstructionAccess().getInstructionINCAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIncInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='INCB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getIncInstructionAccess().getInstructionINCBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIncInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='INC'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getIncInstructionAccess().getInstructionINCKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIncInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "INC");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getIncInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIncInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIncInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getIncInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIncInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getIncInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIncInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getIncInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIncInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleExgInstruction
entryRuleExgInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExgInstructionRule()); }
	iv_ruleExgInstruction=ruleExgInstruction
	{ $current=$iv_ruleExgInstruction.current; }
	EOF;

// Rule ExgInstruction
ruleExgInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='EXG'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getExgInstructionAccess().getInstructionEXGKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExgInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "EXG");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getExgInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExgInstructionAccess().getReg1RegisterEnumRuleCall_2_0());
				}
				lv_reg1_2_0=ruleRegister
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExgInstructionRule());
					}
					set(
						$current,
						"reg1",
						lv_reg1_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Register");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getExgInstructionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExgInstructionAccess().getReg2RegisterEnumRuleCall_4_0());
				}
				lv_reg2_4_0=ruleRegister
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExgInstructionRule());
					}
					set(
						$current,
						"reg2",
						lv_reg2_4_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Register");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEorInstruction
entryRuleEorInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEorInstructionRule()); }
	iv_ruleEorInstruction=ruleEorInstruction
	{ $current=$iv_ruleEorInstruction.current; }
	EOF;

// Rule EorInstruction
ruleEorInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='EORA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getEorInstructionAccess().getInstructionEORAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEorInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='EORB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getEorInstructionAccess().getInstructionEORBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEorInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getEorInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEorInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEorInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getEorInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEorInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getEorInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEorInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getEorInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEorInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getEorInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEorInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDecInstruction
entryRuleDecInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecInstructionRule()); }
	iv_ruleDecInstruction=ruleDecInstruction
	{ $current=$iv_ruleDecInstruction.current; }
	EOF;

// Rule DecInstruction
ruleDecInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='DECA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getDecInstructionAccess().getInstructionDECAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='DECB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getDecInstructionAccess().getInstructionDECBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='DEC'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getDecInstructionAccess().getInstructionDECKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "DEC");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getDecInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getDecInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDecInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getDecInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDecInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getDecInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDecInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getDecInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDecInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleDaaInstruction
entryRuleDaaInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDaaInstructionRule()); }
	iv_ruleDaaInstruction=ruleDaaInstruction
	{ $current=$iv_ruleDaaInstruction.current; }
	EOF;

// Rule DaaInstruction
ruleDaaInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='DAA'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getDaaInstructionAccess().getInstructionDAAKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDaaInstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "DAA");
			}
		)
	)
;

// Entry rule entryRuleCwaiInstruction
entryRuleCwaiInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCwaiInstructionRule()); }
	iv_ruleCwaiInstruction=ruleCwaiInstruction
	{ $current=$iv_ruleCwaiInstruction.current; }
	EOF;

// Rule CwaiInstruction
ruleCwaiInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='CWAI'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getCwaiInstructionAccess().getInstructionCWAIKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCwaiInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "CWAI");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getCwaiInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCwaiInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleImmediatOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCwaiInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComInstruction
entryRuleComInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComInstructionRule()); }
	iv_ruleComInstruction=ruleComInstruction
	{ $current=$iv_ruleComInstruction.current; }
	EOF;

// Rule ComInstruction
ruleComInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='COMA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getComInstructionAccess().getInstructionCOMAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='COMB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getComInstructionAccess().getInstructionCOMBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='COM'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getComInstructionAccess().getInstructionCOMKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "COM");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getComInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getComInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getComInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getComInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getComInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleCmpInstruction
entryRuleCmpInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCmpInstructionRule()); }
	iv_ruleCmpInstruction=ruleCmpInstruction
	{ $current=$iv_ruleCmpInstruction.current; }
	EOF;

// Rule CmpInstruction
ruleCmpInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='CMPA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getCmpInstructionAccess().getInstructionCMPAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCmpInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='CMPB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getCmpInstructionAccess().getInstructionCMPBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCmpInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getCmpInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCmpInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCmpInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getCmpInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCmpInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getCmpInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCmpInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getCmpInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCmpInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getCmpInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCmpInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleClrInstruction
entryRuleClrInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClrInstructionRule()); }
	iv_ruleClrInstruction=ruleClrInstruction
	{ $current=$iv_ruleClrInstruction.current; }
	EOF;

// Rule ClrInstruction
ruleClrInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='CLRA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getClrInstructionAccess().getInstructionCLRAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='CLRB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getClrInstructionAccess().getInstructionCLRBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='CLR'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getClrInstructionAccess().getInstructionCLRKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "CLR");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getClrInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getClrInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getClrInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getClrInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getClrInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleBvsInstruction
entryRuleBvsInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBvsInstructionRule()); }
	iv_ruleBvsInstruction=ruleBvsInstruction
	{ $current=$iv_ruleBvsInstruction.current; }
	EOF;

// Rule BvsInstruction
ruleBvsInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BVS'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBvsInstructionAccess().getInstructionBVSKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBvsInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBVS'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBvsInstructionAccess().getInstructionLBVSKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBvsInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBvsInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBvsInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBvsInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBvcInstruction
entryRuleBvcInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBvcInstructionRule()); }
	iv_ruleBvcInstruction=ruleBvcInstruction
	{ $current=$iv_ruleBvcInstruction.current; }
	EOF;

// Rule BvcInstruction
ruleBvcInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BVC'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBvcInstructionAccess().getInstructionBVCKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBvcInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBVC'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBvcInstructionAccess().getInstructionLBVCKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBvcInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBvcInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBvcInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBvcInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBsrInstruction
entryRuleBsrInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBsrInstructionRule()); }
	iv_ruleBsrInstruction=ruleBsrInstruction
	{ $current=$iv_ruleBsrInstruction.current; }
	EOF;

// Rule BsrInstruction
ruleBsrInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BSR'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBsrInstructionAccess().getInstructionBSRKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBsrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBSR'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBsrInstructionAccess().getInstructionLBSRKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBsrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBsrInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBsrInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBsrInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBrnInstruction
entryRuleBrnInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBrnInstructionRule()); }
	iv_ruleBrnInstruction=ruleBrnInstruction
	{ $current=$iv_ruleBrnInstruction.current; }
	EOF;

// Rule BrnInstruction
ruleBrnInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BRN'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBrnInstructionAccess().getInstructionBRNKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBrnInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBRN'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBrnInstructionAccess().getInstructionLBRNKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBrnInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBrnInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBrnInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBrnInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBraInstruction
entryRuleBraInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBraInstructionRule()); }
	iv_ruleBraInstruction=ruleBraInstruction
	{ $current=$iv_ruleBraInstruction.current; }
	EOF;

// Rule BraInstruction
ruleBraInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BRA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBraInstructionAccess().getInstructionBRAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBraInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBRA'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBraInstructionAccess().getInstructionLBRAKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBraInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBraInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBraInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBraInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBplInstruction
entryRuleBplInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBplInstructionRule()); }
	iv_ruleBplInstruction=ruleBplInstruction
	{ $current=$iv_ruleBplInstruction.current; }
	EOF;

// Rule BplInstruction
ruleBplInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BPL'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBplInstructionAccess().getInstructionBPLKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBplInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBPL'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBplInstructionAccess().getInstructionLBPLKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBplInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBplInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBplInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBplInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBneInstruction
entryRuleBneInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBneInstructionRule()); }
	iv_ruleBneInstruction=ruleBneInstruction
	{ $current=$iv_ruleBneInstruction.current; }
	EOF;

// Rule BneInstruction
ruleBneInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BNE'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBneInstructionAccess().getInstructionBNEKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBneInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBNE'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBneInstructionAccess().getInstructionLBNEKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBneInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBneInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBneInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBneInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBmiInstruction
entryRuleBmiInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBmiInstructionRule()); }
	iv_ruleBmiInstruction=ruleBmiInstruction
	{ $current=$iv_ruleBmiInstruction.current; }
	EOF;

// Rule BmiInstruction
ruleBmiInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BMI'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBmiInstructionAccess().getInstructionBMIKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBmiInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBMI'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBmiInstructionAccess().getInstructionLBMIKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBmiInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBmiInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBmiInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBmiInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBltInstruction
entryRuleBltInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBltInstructionRule()); }
	iv_ruleBltInstruction=ruleBltInstruction
	{ $current=$iv_ruleBltInstruction.current; }
	EOF;

// Rule BltInstruction
ruleBltInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BLT'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBltInstructionAccess().getInstructionBLTKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBltInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBLT'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBltInstructionAccess().getInstructionLBLTKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBltInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBltInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBltInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBltInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlsInstruction
entryRuleBlsInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlsInstructionRule()); }
	iv_ruleBlsInstruction=ruleBlsInstruction
	{ $current=$iv_ruleBlsInstruction.current; }
	EOF;

// Rule BlsInstruction
ruleBlsInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BLS'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBlsInstructionAccess().getInstructionBLSKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlsInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBLS'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBlsInstructionAccess().getInstructionLBLSKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlsInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBlsInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlsInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlsInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBloInstruction
entryRuleBloInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBloInstructionRule()); }
	iv_ruleBloInstruction=ruleBloInstruction
	{ $current=$iv_ruleBloInstruction.current; }
	EOF;

// Rule BloInstruction
ruleBloInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BLO'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBloInstructionAccess().getInstructionBLOKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBloInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBLO'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBloInstructionAccess().getInstructionLBLOKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBloInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBloInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBloInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBloInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBleInstruction
entryRuleBleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBleInstructionRule()); }
	iv_ruleBleInstruction=ruleBleInstruction
	{ $current=$iv_ruleBleInstruction.current; }
	EOF;

// Rule BleInstruction
ruleBleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BLE'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBleInstructionAccess().getInstructionBLEKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBleInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBLE'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBleInstructionAccess().getInstructionLBLEKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBleInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBleInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBleInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBleInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBitInstruction
entryRuleBitInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitInstructionRule()); }
	iv_ruleBitInstruction=ruleBitInstruction
	{ $current=$iv_ruleBitInstruction.current; }
	EOF;

// Rule BitInstruction
ruleBitInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BITA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBitInstructionAccess().getInstructionBITAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBitInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='BITB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBitInstructionAccess().getInstructionBITBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBitInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBitInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBitInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBitInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBitInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBitInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBitInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBhsInstruction
entryRuleBhsInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBhsInstructionRule()); }
	iv_ruleBhsInstruction=ruleBhsInstruction
	{ $current=$iv_ruleBhsInstruction.current; }
	EOF;

// Rule BhsInstruction
ruleBhsInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BHS'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBhsInstructionAccess().getInstructionBHSKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBhsInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBHS'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBhsInstructionAccess().getInstructionLBHSKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBhsInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBhsInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBhsInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBhsInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBhiInstruction
entryRuleBhiInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBhiInstructionRule()); }
	iv_ruleBhiInstruction=ruleBhiInstruction
	{ $current=$iv_ruleBhiInstruction.current; }
	EOF;

// Rule BhiInstruction
ruleBhiInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BHI'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBhiInstructionAccess().getInstructionBHIKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBhiInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBHI'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBhiInstructionAccess().getInstructionLBHIKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBhiInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBhiInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBhiInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBhiInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBgtInstruction
entryRuleBgtInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBgtInstructionRule()); }
	iv_ruleBgtInstruction=ruleBgtInstruction
	{ $current=$iv_ruleBgtInstruction.current; }
	EOF;

// Rule BgtInstruction
ruleBgtInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BGT'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBgtInstructionAccess().getInstructionBGTKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBgtInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBGT'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBgtInstructionAccess().getInstructionLBGTKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBgtInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBgtInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBgtInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBgtInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBgeInstruction
entryRuleBgeInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBgeInstructionRule()); }
	iv_ruleBgeInstruction=ruleBgeInstruction
	{ $current=$iv_ruleBgeInstruction.current; }
	EOF;

// Rule BgeInstruction
ruleBgeInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BGE'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBgeInstructionAccess().getInstructionBGEKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBgeInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBGE'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBgeInstructionAccess().getInstructionLBGEKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBgeInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBgeInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBgeInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBgeInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBeqInstruction
entryRuleBeqInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBeqInstructionRule()); }
	iv_ruleBeqInstruction=ruleBeqInstruction
	{ $current=$iv_ruleBeqInstruction.current; }
	EOF;

// Rule BeqInstruction
ruleBeqInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BEQ'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBeqInstructionAccess().getInstructionBEQKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBeqInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBEQ'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBeqInstructionAccess().getInstructionLBEQKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBeqInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBeqInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBeqInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBeqInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBcsInstruction
entryRuleBcsInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBcsInstructionRule()); }
	iv_ruleBcsInstruction=ruleBcsInstruction
	{ $current=$iv_ruleBcsInstruction.current; }
	EOF;

// Rule BcsInstruction
ruleBcsInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BCS'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBcsInstructionAccess().getInstructionBCSKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBcsInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBCS'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBcsInstructionAccess().getInstructionLBCSKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBcsInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBcsInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBcsInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBcsInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBccInstruction
entryRuleBccInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBccInstructionRule()); }
	iv_ruleBccInstruction=ruleBccInstruction
	{ $current=$iv_ruleBccInstruction.current; }
	EOF;

// Rule BccInstruction
ruleBccInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='BCC'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getBccInstructionAccess().getInstructionBCCKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBccInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='LBCC'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getBccInstructionAccess().getInstructionLBCCKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBccInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getBccInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBccInstructionAccess().getOperandRelativeModeParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleRelativeMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBccInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelativeMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAsrInstruction
entryRuleAsrInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAsrInstructionRule()); }
	iv_ruleAsrInstruction=ruleAsrInstruction
	{ $current=$iv_ruleAsrInstruction.current; }
	EOF;

// Rule AsrInstruction
ruleAsrInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='ASRA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getAsrInstructionAccess().getInstructionASRAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAsrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='ASRB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getAsrInstructionAccess().getInstructionASRBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAsrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='ASR'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getAsrInstructionAccess().getInstructionASRKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAsrInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "ASR");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getAsrInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAsrInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAsrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAsrInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAsrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAsrInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAsrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAsrInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAsrInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleAslInstruction
entryRuleAslInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAslInstructionRule()); }
	iv_ruleAslInstruction=ruleAslInstruction
	{ $current=$iv_ruleAslInstruction.current; }
	EOF;

// Rule AslInstruction
ruleAslInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='ASLA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getAslInstructionAccess().getInstructionASLAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAslInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='ASLB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getAslInstructionAccess().getInstructionASLBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAslInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_instruction_1_0='ASL'
					{
						newLeafNode(lv_instruction_1_0, grammarAccess.getAslInstructionAccess().getInstructionASLKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAslInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_1_0, "ASL");
					}
				)
			)
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getAslInstructionAccess().getWSTerminalRuleCall_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAslInstructionAccess().getOperandDirectOperandParserRuleCall_1_2_0_0());
						}
						lv_operand_3_1=ruleDirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAslInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_1,
								"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAslInstructionAccess().getOperandIndexedOperandParserRuleCall_1_2_0_1());
						}
						lv_operand_3_2=ruleIndexedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAslInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_2,
								"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAslInstructionAccess().getOperandExtendedOperandParserRuleCall_1_2_0_2());
						}
						lv_operand_3_3=ruleExtendedOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAslInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_3,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAslInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_1_2_0_3());
						}
						lv_operand_3_4=ruleExtendedIndirectOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAslInstructionRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_4,
								"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleAndCCInstruction
entryRuleAndCCInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndCCInstructionRule()); }
	iv_ruleAndCCInstruction=ruleAndCCInstruction
	{ $current=$iv_ruleAndCCInstruction.current; }
	EOF;

// Rule AndCCInstruction
ruleAndCCInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='ANDCC'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getAndCCInstructionAccess().getInstructionANDCCKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAndCCInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "ANDCC");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getAndCCInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndCCInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleImmediatOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndCCInstructionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAndInstruction
entryRuleAndInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndInstructionRule()); }
	iv_ruleAndInstruction=ruleAndInstruction
	{ $current=$iv_ruleAndInstruction.current; }
	EOF;

// Rule AndInstruction
ruleAndInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='ANDA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getAndInstructionAccess().getInstructionANDAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAndInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='ANDB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getAndInstructionAccess().getInstructionANDBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAndInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getAndInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAndInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAndInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAndInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAndInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAndInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAdddInstruction
entryRuleAdddInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdddInstructionRule()); }
	iv_ruleAdddInstruction=ruleAdddInstruction
	{ $current=$iv_ruleAdddInstruction.current; }
	EOF;

// Rule AdddInstruction
ruleAdddInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instruction_0_0='ADDD'
				{
					newLeafNode(lv_instruction_0_0, grammarAccess.getAdddInstructionAccess().getInstructionADDDKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAdddInstructionRule());
					}
					setWithLastConsumed($current, "instruction", lv_instruction_0_0, "ADDD");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getAdddInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAdddInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAdddInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAdddInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAdddInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAdddInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAddInstruction
entryRuleAddInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddInstructionRule()); }
	iv_ruleAddInstruction=ruleAddInstruction
	{ $current=$iv_ruleAddInstruction.current; }
	EOF;

// Rule AddInstruction
ruleAddInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='ADDA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getAddInstructionAccess().getInstructionADDAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='ADDB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getAddInstructionAccess().getInstructionADDBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getAddInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAddInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAddInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAddInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAddInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAddInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAdcInstruction
entryRuleAdcInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdcInstructionRule()); }
	iv_ruleAdcInstruction=ruleAdcInstruction
	{ $current=$iv_ruleAdcInstruction.current; }
	EOF;

// Rule AdcInstruction
ruleAdcInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_instruction_0_1='ADCA'
					{
						newLeafNode(lv_instruction_0_1, grammarAccess.getAdcInstructionAccess().getInstructionADCAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAdcInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_1, null);
					}
					    |
					lv_instruction_0_2='ADCB'
					{
						newLeafNode(lv_instruction_0_2, grammarAccess.getAdcInstructionAccess().getInstructionADCBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAdcInstructionRule());
						}
						setWithLastConsumed($current, "instruction", lv_instruction_0_2, null);
					}
				)
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getAdcInstructionAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAdcInstructionAccess().getOperandImmediatOperandParserRuleCall_2_0_0());
					}
					lv_operand_2_1=ruleImmediatOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_1,
							"org.bpy.electronics.mc6809.assembler.Assembler.ImmediatOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAdcInstructionAccess().getOperandDirectOperandParserRuleCall_2_0_1());
					}
					lv_operand_2_2=ruleDirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_2,
							"org.bpy.electronics.mc6809.assembler.Assembler.DirectOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAdcInstructionAccess().getOperandIndexedOperandParserRuleCall_2_0_2());
					}
					lv_operand_2_3=ruleIndexedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_3,
							"org.bpy.electronics.mc6809.assembler.Assembler.IndexedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAdcInstructionAccess().getOperandExtendedOperandParserRuleCall_2_0_3());
					}
					lv_operand_2_4=ruleExtendedOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_4,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedOperand");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAdcInstructionAccess().getOperandExtendedIndirectOperandParserRuleCall_2_0_4());
					}
					lv_operand_2_5=ruleExtendedIndirectOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdcInstructionRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_5,
							"org.bpy.electronics.mc6809.assembler.Assembler.ExtendedIndirectOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAbxInstruction
entryRuleAbxInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbxInstructionRule()); }
	iv_ruleAbxInstruction=ruleAbxInstruction
	{ $current=$iv_ruleAbxInstruction.current; }
	EOF;

// Rule AbxInstruction
ruleAbxInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_instruction_0_0='ABX'
			{
				newLeafNode(lv_instruction_0_0, grammarAccess.getAbxInstructionAccess().getInstructionABXKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAbxInstructionRule());
				}
				setWithLastConsumed($current, "instruction", lv_instruction_0_0, "ABX");
			}
		)
	)
;

// Entry rule entryRuleExtendedIndirectOperand
entryRuleExtendedIndirectOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtendedIndirectOperandRule()); }
	iv_ruleExtendedIndirectOperand=ruleExtendedIndirectOperand
	{ $current=$iv_ruleExtendedIndirectOperand.current; }
	EOF;

// Rule ExtendedIndirectOperand
ruleExtendedIndirectOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getExtendedIndirectOperandAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtendedIndirectOperandAccess().getOperandExpressionParserRuleCall_1_0());
				}
				lv_operand_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtendedIndirectOperandRule());
					}
					set(
						$current,
						"operand",
						lv_operand_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getExtendedIndirectOperandAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleExtendedOperand
entryRuleExtendedOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtendedOperandRule()); }
	iv_ruleExtendedOperand=ruleExtendedOperand
	{ $current=$iv_ruleExtendedOperand.current; }
	EOF;

// Rule ExtendedOperand
ruleExtendedOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='>'
			{
				newLeafNode(otherlv_0, grammarAccess.getExtendedOperandAccess().getGreaterThanSignKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExtendedOperandAccess().getOperandExpressionParserRuleCall_1_0());
				}
				lv_operand_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtendedOperandRule());
					}
					set(
						$current,
						"operand",
						lv_operand_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDirectOperand
entryRuleDirectOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectOperandRule()); }
	iv_ruleDirectOperand=ruleDirectOperand
	{ $current=$iv_ruleDirectOperand.current; }
	EOF;

// Rule DirectOperand
ruleDirectOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getDirectOperandAccess().getLessThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectOperandAccess().getOperandExpressionParserRuleCall_1_0());
				}
				lv_operand_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectOperandRule());
					}
					set(
						$current,
						"operand",
						lv_operand_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleImmediatOperand
entryRuleImmediatOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImmediatOperandRule()); }
	iv_ruleImmediatOperand=ruleImmediatOperand
	{ $current=$iv_ruleImmediatOperand.current; }
	EOF;

// Rule ImmediatOperand
ruleImmediatOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getImmediatOperandAccess().getNumberSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImmediatOperandAccess().getOperandExpressionParserRuleCall_1_0());
				}
				lv_operand_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImmediatOperandRule());
					}
					set(
						$current,
						"operand",
						lv_operand_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIndexedOperand
entryRuleIndexedOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexedOperandRule()); }
	iv_ruleIndexedOperand=ruleIndexedOperand
	{ $current=$iv_ruleIndexedOperand.current; }
	EOF;

// Rule IndexedOperand
ruleIndexedOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedOperandAccess().getModeAutoIncDecModeParserRuleCall_0_0());
				}
				lv_mode_0_0=ruleAutoIncDecMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedOperandRule());
					}
					set(
						$current,
						"mode",
						lv_mode_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.AutoIncDecMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedOperandAccess().getModeConstantIndexedModeParserRuleCall_1_0());
				}
				lv_mode_1_0=ruleConstantIndexedMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedOperandRule());
					}
					set(
						$current,
						"mode",
						lv_mode_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.ConstantIndexedMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedOperandAccess().getModeAccumulatorMovingModeParserRuleCall_2_0());
				}
				lv_mode_2_0=ruleAccumulatorMovingMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedOperandRule());
					}
					set(
						$current,
						"mode",
						lv_mode_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.AccumulatorMovingMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedOperandAccess().getModeRelatifToPCModeParserRuleCall_3_0());
				}
				lv_mode_3_0=ruleRelatifToPCMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedOperandRule());
					}
					set(
						$current,
						"mode",
						lv_mode_3_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelatifToPCMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedOperandAccess().getModeConstantIndexedMovingIndirectModeParserRuleCall_4_0());
				}
				lv_mode_4_0=ruleConstantIndexedMovingIndirectMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedOperandRule());
					}
					set(
						$current,
						"mode",
						lv_mode_4_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.ConstantIndexedMovingIndirectMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedOperandAccess().getModeAutoIncDecIndirectModeParserRuleCall_5_0());
				}
				lv_mode_5_0=ruleAutoIncDecIndirectMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedOperandRule());
					}
					set(
						$current,
						"mode",
						lv_mode_5_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.AutoIncDecIndirectMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedOperandAccess().getModeAccumulatorMovingIndirectModeParserRuleCall_6_0());
				}
				lv_mode_6_0=ruleAccumulatorMovingIndirectMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedOperandRule());
					}
					set(
						$current,
						"mode",
						lv_mode_6_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.AccumulatorMovingIndirectMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedOperandAccess().getModeRelatifToPCIndirectModeParserRuleCall_7_0());
				}
				lv_mode_7_0=ruleRelatifToPCIndirectMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedOperandRule());
					}
					set(
						$current,
						"mode",
						lv_mode_7_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.RelatifToPCIndirectMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstantIndexedMode
entryRuleConstantIndexedMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantIndexedModeRule()); }
	iv_ruleConstantIndexedMode=ruleConstantIndexedMode
	{ $current=$iv_ruleConstantIndexedMode.current; }
	EOF;

// Rule ConstantIndexedMode
ruleConstantIndexedMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantIndexedModeAccess().getDeplacementNumericalValueParserRuleCall_0_0());
				}
				lv_deplacement_0_0=ruleNumericalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantIndexedModeRule());
					}
					set(
						$current,
						"deplacement",
						lv_deplacement_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.NumericalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getConstantIndexedModeAccess().getCommaKeyword_1());
		}
		(
			(
				(
					lv_register_2_1='S'
					{
						newLeafNode(lv_register_2_1, grammarAccess.getConstantIndexedModeAccess().getRegisterSKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantIndexedModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_2_1, null);
					}
					    |
					lv_register_2_2='U'
					{
						newLeafNode(lv_register_2_2, grammarAccess.getConstantIndexedModeAccess().getRegisterUKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantIndexedModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_2_2, null);
					}
					    |
					lv_register_2_3='X'
					{
						newLeafNode(lv_register_2_3, grammarAccess.getConstantIndexedModeAccess().getRegisterXKeyword_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantIndexedModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_2_3, null);
					}
					    |
					lv_register_2_4='Y'
					{
						newLeafNode(lv_register_2_4, grammarAccess.getConstantIndexedModeAccess().getRegisterYKeyword_2_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantIndexedModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_2_4, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleConstantIndexedMovingIndirectMode
entryRuleConstantIndexedMovingIndirectMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantIndexedMovingIndirectModeRule()); }
	iv_ruleConstantIndexedMovingIndirectMode=ruleConstantIndexedMovingIndirectMode
	{ $current=$iv_ruleConstantIndexedMovingIndirectMode.current; }
	EOF;

// Rule ConstantIndexedMovingIndirectMode
ruleConstantIndexedMovingIndirectMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantIndexedMovingIndirectModeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantIndexedMovingIndirectModeAccess().getDeplacementNumericalValueParserRuleCall_1_0());
				}
				lv_deplacement_1_0=ruleNumericalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantIndexedMovingIndirectModeRule());
					}
					set(
						$current,
						"deplacement",
						lv_deplacement_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.NumericalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getConstantIndexedMovingIndirectModeAccess().getCommaKeyword_2());
		}
		(
			(
				(
					lv_register_3_1='S'
					{
						newLeafNode(lv_register_3_1, grammarAccess.getConstantIndexedMovingIndirectModeAccess().getRegisterSKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantIndexedMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_3_1, null);
					}
					    |
					lv_register_3_2='U'
					{
						newLeafNode(lv_register_3_2, grammarAccess.getConstantIndexedMovingIndirectModeAccess().getRegisterUKeyword_3_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantIndexedMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_3_2, null);
					}
					    |
					lv_register_3_3='X'
					{
						newLeafNode(lv_register_3_3, grammarAccess.getConstantIndexedMovingIndirectModeAccess().getRegisterXKeyword_3_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantIndexedMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_3_3, null);
					}
					    |
					lv_register_3_4='Y'
					{
						newLeafNode(lv_register_3_4, grammarAccess.getConstantIndexedMovingIndirectModeAccess().getRegisterYKeyword_3_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantIndexedMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_3_4, null);
					}
				)
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getConstantIndexedMovingIndirectModeAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAccumulatorMovingMode
entryRuleAccumulatorMovingMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAccumulatorMovingModeRule()); }
	iv_ruleAccumulatorMovingMode=ruleAccumulatorMovingMode
	{ $current=$iv_ruleAccumulatorMovingMode.current; }
	EOF;

// Rule AccumulatorMovingMode
ruleAccumulatorMovingMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_deplacement_0_1='A'
					{
						newLeafNode(lv_deplacement_0_1, grammarAccess.getAccumulatorMovingModeAccess().getDeplacementAKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingModeRule());
						}
						setWithLastConsumed($current, "deplacement", lv_deplacement_0_1, null);
					}
					    |
					lv_deplacement_0_2='B'
					{
						newLeafNode(lv_deplacement_0_2, grammarAccess.getAccumulatorMovingModeAccess().getDeplacementBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingModeRule());
						}
						setWithLastConsumed($current, "deplacement", lv_deplacement_0_2, null);
					}
					    |
					lv_deplacement_0_3='D'
					{
						newLeafNode(lv_deplacement_0_3, grammarAccess.getAccumulatorMovingModeAccess().getDeplacementDKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingModeRule());
						}
						setWithLastConsumed($current, "deplacement", lv_deplacement_0_3, null);
					}
				)
			)
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getAccumulatorMovingModeAccess().getCommaKeyword_1());
		}
		(
			(
				(
					lv_register_2_1='S'
					{
						newLeafNode(lv_register_2_1, grammarAccess.getAccumulatorMovingModeAccess().getRegisterSKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_2_1, null);
					}
					    |
					lv_register_2_2='U'
					{
						newLeafNode(lv_register_2_2, grammarAccess.getAccumulatorMovingModeAccess().getRegisterUKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_2_2, null);
					}
					    |
					lv_register_2_3='X'
					{
						newLeafNode(lv_register_2_3, grammarAccess.getAccumulatorMovingModeAccess().getRegisterXKeyword_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_2_3, null);
					}
					    |
					lv_register_2_4='Y'
					{
						newLeafNode(lv_register_2_4, grammarAccess.getAccumulatorMovingModeAccess().getRegisterYKeyword_2_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_2_4, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAccumulatorMovingIndirectMode
entryRuleAccumulatorMovingIndirectMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAccumulatorMovingIndirectModeRule()); }
	iv_ruleAccumulatorMovingIndirectMode=ruleAccumulatorMovingIndirectMode
	{ $current=$iv_ruleAccumulatorMovingIndirectMode.current; }
	EOF;

// Rule AccumulatorMovingIndirectMode
ruleAccumulatorMovingIndirectMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getAccumulatorMovingIndirectModeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					lv_deplacement_1_1='A'
					{
						newLeafNode(lv_deplacement_1_1, grammarAccess.getAccumulatorMovingIndirectModeAccess().getDeplacementAKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "deplacement", lv_deplacement_1_1, null);
					}
					    |
					lv_deplacement_1_2='B'
					{
						newLeafNode(lv_deplacement_1_2, grammarAccess.getAccumulatorMovingIndirectModeAccess().getDeplacementBKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "deplacement", lv_deplacement_1_2, null);
					}
					    |
					lv_deplacement_1_3='D'
					{
						newLeafNode(lv_deplacement_1_3, grammarAccess.getAccumulatorMovingIndirectModeAccess().getDeplacementDKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "deplacement", lv_deplacement_1_3, null);
					}
				)
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getAccumulatorMovingIndirectModeAccess().getCommaKeyword_2());
		}
		(
			(
				(
					lv_register_3_1='S'
					{
						newLeafNode(lv_register_3_1, grammarAccess.getAccumulatorMovingIndirectModeAccess().getRegisterSKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_3_1, null);
					}
					    |
					lv_register_3_2='U'
					{
						newLeafNode(lv_register_3_2, grammarAccess.getAccumulatorMovingIndirectModeAccess().getRegisterUKeyword_3_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_3_2, null);
					}
					    |
					lv_register_3_3='X'
					{
						newLeafNode(lv_register_3_3, grammarAccess.getAccumulatorMovingIndirectModeAccess().getRegisterXKeyword_3_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_3_3, null);
					}
					    |
					lv_register_3_4='Y'
					{
						newLeafNode(lv_register_3_4, grammarAccess.getAccumulatorMovingIndirectModeAccess().getRegisterYKeyword_3_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAccumulatorMovingIndirectModeRule());
						}
						setWithLastConsumed($current, "register", lv_register_3_4, null);
					}
				)
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getAccumulatorMovingIndirectModeAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAutoIncDecMode
entryRuleAutoIncDecMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutoIncDecModeRule()); }
	iv_ruleAutoIncDecMode=ruleAutoIncDecMode
	{ $current=$iv_ruleAutoIncDecMode.current; }
	EOF;

// Rule AutoIncDecMode
ruleAutoIncDecMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAutoIncDecModeAccess().getDeplacementNumericalValueParserRuleCall_0_0());
				}
				lv_deplacement_0_0=ruleNumericalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAutoIncDecModeRule());
					}
					set(
						$current,
						"deplacement",
						lv_deplacement_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.NumericalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getAutoIncDecModeAccess().getCommaKeyword_1());
		}
		(
			(
				(
					(
						(
							lv_decrement_2_0='-'
							{
								newLeafNode(lv_decrement_2_0, grammarAccess.getAutoIncDecModeAccess().getDecrementHyphenMinusKeyword_2_0_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "decrement", lv_decrement_2_0, "-");
							}
						)
					)
					    |
					(
						(
							lv_decrement_3_0='--'
							{
								newLeafNode(lv_decrement_3_0, grammarAccess.getAutoIncDecModeAccess().getDecrementHyphenMinusHyphenMinusKeyword_2_0_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "decrement", lv_decrement_3_0, "--");
							}
						)
					)
				)
				(
					(
						(
							lv_register_4_1='S'
							{
								newLeafNode(lv_register_4_1, grammarAccess.getAutoIncDecModeAccess().getRegisterSKeyword_2_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_4_1, null);
							}
							    |
							lv_register_4_2='U'
							{
								newLeafNode(lv_register_4_2, grammarAccess.getAutoIncDecModeAccess().getRegisterUKeyword_2_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_4_2, null);
							}
							    |
							lv_register_4_3='X'
							{
								newLeafNode(lv_register_4_3, grammarAccess.getAutoIncDecModeAccess().getRegisterXKeyword_2_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_4_3, null);
							}
							    |
							lv_register_4_4='Y'
							{
								newLeafNode(lv_register_4_4, grammarAccess.getAutoIncDecModeAccess().getRegisterYKeyword_2_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_4_4, null);
							}
						)
					)
				)
			)
			    |
			(
				(
					(
						(
							lv_register_5_1='S'
							{
								newLeafNode(lv_register_5_1, grammarAccess.getAutoIncDecModeAccess().getRegisterSKeyword_2_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_5_1, null);
							}
							    |
							lv_register_5_2='U'
							{
								newLeafNode(lv_register_5_2, grammarAccess.getAutoIncDecModeAccess().getRegisterUKeyword_2_1_0_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_5_2, null);
							}
							    |
							lv_register_5_3='X'
							{
								newLeafNode(lv_register_5_3, grammarAccess.getAutoIncDecModeAccess().getRegisterXKeyword_2_1_0_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_5_3, null);
							}
							    |
							lv_register_5_4='Y'
							{
								newLeafNode(lv_register_5_4, grammarAccess.getAutoIncDecModeAccess().getRegisterYKeyword_2_1_0_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_5_4, null);
							}
						)
					)
				)
				(
					(
						(
							lv_increment_6_0='+'
							{
								newLeafNode(lv_increment_6_0, grammarAccess.getAutoIncDecModeAccess().getIncrementPlusSignKeyword_2_1_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "increment", lv_increment_6_0, "+");
							}
						)
					)
					    |
					(
						(
							lv_increment_7_0='++'
							{
								newLeafNode(lv_increment_7_0, grammarAccess.getAutoIncDecModeAccess().getIncrementPlusSignPlusSignKeyword_2_1_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecModeRule());
								}
								setWithLastConsumed($current, "increment", lv_increment_7_0, "++");
							}
						)
					)
				)
			)
		)
	)
;

// Entry rule entryRuleAutoIncDecIndirectMode
entryRuleAutoIncDecIndirectMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutoIncDecIndirectModeRule()); }
	iv_ruleAutoIncDecIndirectMode=ruleAutoIncDecIndirectMode
	{ $current=$iv_ruleAutoIncDecIndirectMode.current; }
	EOF;

// Rule AutoIncDecIndirectMode
ruleAutoIncDecIndirectMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getAutoIncDecIndirectModeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAutoIncDecIndirectModeAccess().getDeplacementNumericalValueParserRuleCall_1_0());
				}
				lv_deplacement_1_0=ruleNumericalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAutoIncDecIndirectModeRule());
					}
					set(
						$current,
						"deplacement",
						lv_deplacement_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.NumericalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getAutoIncDecIndirectModeAccess().getCommaKeyword_2());
		}
		(
			(
				(
					(
						(
							lv_decrement_3_0='-'
							{
								newLeafNode(lv_decrement_3_0, grammarAccess.getAutoIncDecIndirectModeAccess().getDecrementHyphenMinusKeyword_3_0_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "decrement", lv_decrement_3_0, "-");
							}
						)
					)
					    |
					(
						(
							lv_decrement_4_0='--'
							{
								newLeafNode(lv_decrement_4_0, grammarAccess.getAutoIncDecIndirectModeAccess().getDecrementHyphenMinusHyphenMinusKeyword_3_0_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "decrement", lv_decrement_4_0, "--");
							}
						)
					)
				)
				(
					(
						(
							lv_register_5_1='S'
							{
								newLeafNode(lv_register_5_1, grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterSKeyword_3_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_5_1, null);
							}
							    |
							lv_register_5_2='U'
							{
								newLeafNode(lv_register_5_2, grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterUKeyword_3_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_5_2, null);
							}
							    |
							lv_register_5_3='X'
							{
								newLeafNode(lv_register_5_3, grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterXKeyword_3_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_5_3, null);
							}
							    |
							lv_register_5_4='Y'
							{
								newLeafNode(lv_register_5_4, grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterYKeyword_3_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_5_4, null);
							}
						)
					)
				)
			)
			    |
			(
				(
					(
						(
							lv_register_6_1='S'
							{
								newLeafNode(lv_register_6_1, grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterSKeyword_3_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_6_1, null);
							}
							    |
							lv_register_6_2='U'
							{
								newLeafNode(lv_register_6_2, grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterUKeyword_3_1_0_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_6_2, null);
							}
							    |
							lv_register_6_3='X'
							{
								newLeafNode(lv_register_6_3, grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterXKeyword_3_1_0_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_6_3, null);
							}
							    |
							lv_register_6_4='Y'
							{
								newLeafNode(lv_register_6_4, grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterYKeyword_3_1_0_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "register", lv_register_6_4, null);
							}
						)
					)
				)
				(
					(
						(
							lv_increment_7_0='+'
							{
								newLeafNode(lv_increment_7_0, grammarAccess.getAutoIncDecIndirectModeAccess().getIncrementPlusSignKeyword_3_1_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "increment", lv_increment_7_0, "+");
							}
						)
					)
					    |
					(
						(
							lv_increment_8_0='++'
							{
								newLeafNode(lv_increment_8_0, grammarAccess.getAutoIncDecIndirectModeAccess().getIncrementPlusSignPlusSignKeyword_3_1_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAutoIncDecIndirectModeRule());
								}
								setWithLastConsumed($current, "increment", lv_increment_8_0, "++");
							}
						)
					)
				)
			)
		)
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getAutoIncDecIndirectModeAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRelatifToPCMode
entryRuleRelatifToPCMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelatifToPCModeRule()); }
	iv_ruleRelatifToPCMode=ruleRelatifToPCMode
	{ $current=$iv_ruleRelatifToPCMode.current; }
	EOF;

// Rule RelatifToPCMode
ruleRelatifToPCMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelatifToPCModeAccess().getDeplacementNumericalValueParserRuleCall_0_0());
				}
				lv_deplacement_0_0=ruleNumericalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelatifToPCModeRule());
					}
					set(
						$current,
						"deplacement",
						lv_deplacement_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.NumericalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getRelatifToPCModeAccess().getCommaKeyword_1());
		}
		(
			(
				lv_register_2_0='PCR'
				{
					newLeafNode(lv_register_2_0, grammarAccess.getRelatifToPCModeAccess().getRegisterPCRKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelatifToPCModeRule());
					}
					setWithLastConsumed($current, "register", lv_register_2_0, "PCR");
				}
			)
		)
	)
;

// Entry rule entryRuleRelatifToPCIndirectMode
entryRuleRelatifToPCIndirectMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelatifToPCIndirectModeRule()); }
	iv_ruleRelatifToPCIndirectMode=ruleRelatifToPCIndirectMode
	{ $current=$iv_ruleRelatifToPCIndirectMode.current; }
	EOF;

// Rule RelatifToPCIndirectMode
ruleRelatifToPCIndirectMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getRelatifToPCIndirectModeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelatifToPCIndirectModeAccess().getDeplacementNumericalValueParserRuleCall_1_0());
				}
				lv_deplacement_1_0=ruleNumericalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelatifToPCIndirectModeRule());
					}
					set(
						$current,
						"deplacement",
						lv_deplacement_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.NumericalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getRelatifToPCIndirectModeAccess().getCommaKeyword_2());
		}
		(
			(
				lv_register_3_0='PCR'
				{
					newLeafNode(lv_register_3_0, grammarAccess.getRelatifToPCIndirectModeAccess().getRegisterPCRKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelatifToPCIndirectModeRule());
					}
					setWithLastConsumed($current, "register", lv_register_3_0, "PCR");
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getRelatifToPCIndirectModeAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRelativeMode
entryRuleRelativeMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelativeModeRule()); }
	iv_ruleRelativeMode=ruleRelativeMode
	{ $current=$iv_ruleRelativeMode.current; }
	EOF;

// Rule RelativeMode
ruleRelativeMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isPcRelative_0_0='*'
				{
					newLeafNode(lv_isPcRelative_0_0, grammarAccess.getRelativeModeAccess().getIsPcRelativeAsteriskKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelativeModeRule());
					}
					setWithLastConsumed($current, "isPcRelative", lv_isPcRelative_0_0 != null, "*");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRelativeModeAccess().getOffsetExpressionParserRuleCall_1_0());
				}
				lv_offset_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelativeModeRule());
					}
					set(
						$current,
						"offset",
						lv_offset_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDirectiveLine
entryRuleDirectiveLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectiveLineRule()); }
	iv_ruleDirectiveLine=ruleDirectiveLine
	{ $current=$iv_ruleDirectiveLine.current; }
	EOF;

// Rule DirectiveLine
ruleDirectiveLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectiveLineAccess().getNameIdentifierValueParserRuleCall_0_0());
				}
				lv_name_0_0=ruleIdentifierValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.IdentifierValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getDirectiveLineAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveEquDirectiveParserRuleCall_2_0_0());
					}
					lv_directive_2_0=ruleEquDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.EquDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveOrgDirectiveParserRuleCall_2_1_0());
					}
					lv_directive_3_0=ruleOrgDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.OrgDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveBszDirectiveParserRuleCall_2_2_0());
					}
					lv_directive_4_0=ruleBszDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_4_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.BszDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveEndDirectiveParserRuleCall_2_3_0());
					}
					lv_directive_5_0=ruleEndDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_5_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.EndDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveFailDirectiveParserRuleCall_2_4_0());
					}
					lv_directive_6_0=ruleFailDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_6_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.FailDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveFillDirectiveParserRuleCall_2_5_0());
					}
					lv_directive_7_0=ruleFillDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_7_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.FillDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveOptDirectiveParserRuleCall_2_6_0());
					}
					lv_directive_8_0=ruleOptDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_8_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.OptDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectivePagDirectiveParserRuleCall_2_7_0());
					}
					lv_directive_9_0=rulePagDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_9_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.PagDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveNamDirectiveParserRuleCall_2_8_0());
					}
					lv_directive_10_0=ruleNamDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_10_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.NamDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveSetDirectiveParserRuleCall_2_9_0());
					}
					lv_directive_11_0=ruleSetDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_11_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.SetDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveSpcDirectiveParserRuleCall_2_10_0());
					}
					lv_directive_12_0=ruleSpcDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_12_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.SpcDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveRegDirectiveParserRuleCall_2_11_0());
					}
					lv_directive_13_0=ruleRegDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_13_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.RegDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveFcbDirectiveParserRuleCall_2_12_0());
					}
					lv_directive_14_0=ruleFcbDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_14_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.FcbDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveFdbDirectiveParserRuleCall_2_13_0());
					}
					lv_directive_15_0=ruleFdbDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_15_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.FdbDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveFccDirectiveParserRuleCall_2_14_0());
					}
					lv_directive_16_0=ruleFccDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_16_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.FccDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveRmbDirectiveParserRuleCall_2_15_0());
					}
					lv_directive_17_0=ruleRmbDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
						}
						set(
							$current,
							"directive",
							lv_directive_17_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.RmbDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			this_WS_18=RULE_WS
			{
				newLeafNode(this_WS_18, grammarAccess.getDirectiveLineAccess().getWSTerminalRuleCall_3_0());
			}
			(
				(
					lv_comment_19_0=RULE_ANY_EXCEPT_COMMENT_END_OF_LINE
					{
						newLeafNode(lv_comment_19_0, grammarAccess.getDirectiveLineAccess().getCommentANY_EXCEPT_COMMENT_END_OF_LINETerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDirectiveLineRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_19_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ANY_EXCEPT_COMMENT_END_OF_LINE");
					}
				)
			)
		)?
		(
			this_WS_20=RULE_WS
			{
				newLeafNode(this_WS_20, grammarAccess.getDirectiveLineAccess().getWSTerminalRuleCall_4());
			}
		)?
		{
			newCompositeNode(grammarAccess.getDirectiveLineAccess().getEndOfLineParserRuleCall_5());
		}
		ruleEndOfLine
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFccDirective
entryRuleFccDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFccDirectiveRule()); }
	iv_ruleFccDirective=ruleFccDirective
	{ $current=$iv_ruleFccDirective.current; }
	EOF;

// Rule FccDirective
ruleFccDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='FCC'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getFccDirectiveAccess().getDirectiveFCCKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFccDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "FCC");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getFccDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					lv_string_2_0=RULE_STRING
					{
						newLeafNode(lv_string_2_0, grammarAccess.getFccDirectiveAccess().getStringSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFccDirectiveRule());
						}
						setWithLastConsumed(
							$current,
							"string",
							lv_string_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleRegDirective
entryRuleRegDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegDirectiveRule()); }
	iv_ruleRegDirective=ruleRegDirective
	{ $current=$iv_ruleRegDirective.current; }
	EOF;

// Rule RegDirective
ruleRegDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='REG'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getRegDirectiveAccess().getDirectiveREGKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "REG");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getRegDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRegDirectiveAccess().getOptionsRegisterEnumRuleCall_1_1_0());
					}
					lv_options_2_0=ruleRegister
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegDirectiveRule());
						}
						add(
							$current,
							"options",
							lv_options_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Register");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getRegDirectiveAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRegDirectiveAccess().getOptionsRegisterEnumRuleCall_1_2_1_0());
						}
						lv_options_4_0=ruleRegister
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRegDirectiveRule());
							}
							add(
								$current,
								"options",
								lv_options_4_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.Register");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleSpcDirective
entryRuleSpcDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpcDirectiveRule()); }
	iv_ruleSpcDirective=ruleSpcDirective
	{ $current=$iv_ruleSpcDirective.current; }
	EOF;

// Rule SpcDirective
ruleSpcDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='SPC'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getSpcDirectiveAccess().getDirectiveSPCKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpcDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "SPC");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getSpcDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSpcDirectiveAccess().getSpaceCountExpressionParserRuleCall_1_1_0());
					}
					lv_spaceCount_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpcDirectiveRule());
						}
						set(
							$current,
							"spaceCount",
							lv_spaceCount_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSpcDirectiveAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSpcDirectiveAccess().getKeepCountExpressionParserRuleCall_1_2_1_0());
						}
						lv_keepCount_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSpcDirectiveRule());
							}
							set(
								$current,
								"keepCount",
								lv_keepCount_4_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)?
	)
;

// Entry rule entryRuleNamDirective
entryRuleNamDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamDirectiveRule()); }
	iv_ruleNamDirective=ruleNamDirective
	{ $current=$iv_ruleNamDirective.current; }
	EOF;

// Rule NamDirective
ruleNamDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_directive_0_0='NAM'
					{
						newLeafNode(lv_directive_0_0, grammarAccess.getNamDirectiveAccess().getDirectiveNAMKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNamDirectiveRule());
						}
						setWithLastConsumed($current, "directive", lv_directive_0_0, "NAM");
					}
				)
			)
			    |
			(
				(
					lv_directive_1_0='TTL'
					{
						newLeafNode(lv_directive_1_0, grammarAccess.getNamDirectiveAccess().getDirectiveTTLKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNamDirectiveRule());
						}
						setWithLastConsumed($current, "directive", lv_directive_1_0, "TTL");
					}
				)
			)
		)
		this_WS_2=RULE_WS
		{
			newLeafNode(this_WS_2, grammarAccess.getNamDirectiveAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNamDirectiveAccess().getOperandIdentifierValueParserRuleCall_2_0());
				}
				lv_operand_3_0=ruleIdentifierValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamDirectiveRule());
					}
					set(
						$current,
						"operand",
						lv_operand_3_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.IdentifierValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePagDirective
entryRulePagDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPagDirectiveRule()); }
	iv_rulePagDirective=rulePagDirective
	{ $current=$iv_rulePagDirective.current; }
	EOF;

// Rule PagDirective
rulePagDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='PAG'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getPagDirectiveAccess().getDirectivePAGKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPagDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "PAG");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getPagDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPagDirectiveAccess().getOperandExpressionParserRuleCall_1_1_0());
					}
					lv_operand_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPagDirectiveRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOptDirective
entryRuleOptDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptDirectiveRule()); }
	iv_ruleOptDirective=ruleOptDirective
	{ $current=$iv_ruleOptDirective.current; }
	EOF;

// Rule OptDirective
ruleOptDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='OPT'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getOptDirectiveAccess().getDirectiveOPTKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOptDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "OPT");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getOptDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOptDirectiveAccess().getOptionsAssemblyOptionEnumRuleCall_1_1_0());
					}
					lv_options_2_0=ruleAssemblyOption
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOptDirectiveRule());
						}
						add(
							$current,
							"options",
							lv_options_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.AssemblyOption");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getOptDirectiveAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOptDirectiveAccess().getOptionsAssemblyOptionEnumRuleCall_1_2_1_0());
						}
						lv_options_4_0=ruleAssemblyOption
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOptDirectiveRule());
							}
							add(
								$current,
								"options",
								lv_options_4_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.AssemblyOption");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleFailDirective
entryRuleFailDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFailDirectiveRule()); }
	iv_ruleFailDirective=ruleFailDirective
	{ $current=$iv_ruleFailDirective.current; }
	EOF;

// Rule FailDirective
ruleFailDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_directive_0_0='FAIL'
			{
				newLeafNode(lv_directive_0_0, grammarAccess.getFailDirectiveAccess().getDirectiveFAILKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFailDirectiveRule());
				}
				setWithLastConsumed($current, "directive", lv_directive_0_0, "FAIL");
			}
		)
	)
;

// Entry rule entryRuleSetDirective
entryRuleSetDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetDirectiveRule()); }
	iv_ruleSetDirective=ruleSetDirective
	{ $current=$iv_ruleSetDirective.current; }
	EOF;

// Rule SetDirective
ruleSetDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='SET'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getSetDirectiveAccess().getDirectiveSETKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "SET");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getSetDirectiveAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					(
						lv_isRelativeToPC_2_0='*'
						{
							newLeafNode(lv_isRelativeToPC_2_0, grammarAccess.getSetDirectiveAccess().getIsRelativeToPCAsteriskKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSetDirectiveRule());
							}
							setWithLastConsumed($current, "isRelativeToPC", lv_isRelativeToPC_2_0 != null, "*");
						}
					)
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getSetDirectiveAccess().getOperandExpressionParserRuleCall_2_0_1_0());
						}
						lv_operand_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSetDirectiveRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					lv_isRelativeToPC_4_0='*'
					{
						newLeafNode(lv_isRelativeToPC_4_0, grammarAccess.getSetDirectiveAccess().getIsRelativeToPCAsteriskKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetDirectiveRule());
						}
						setWithLastConsumed($current, "isRelativeToPC", lv_isRelativeToPC_4_0 != null, "*");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFillDirective
entryRuleFillDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFillDirectiveRule()); }
	iv_ruleFillDirective=ruleFillDirective
	{ $current=$iv_ruleFillDirective.current; }
	EOF;

// Rule FillDirective
ruleFillDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='FILL'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getFillDirectiveAccess().getDirectiveFILLKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFillDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "FILL");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getFillDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFillDirectiveAccess().getValueExpressionParserRuleCall_1_1_0());
					}
					lv_value_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFillDirectiveRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getFillDirectiveAccess().getCommaKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFillDirectiveAccess().getNumberExpressionParserRuleCall_1_3_0());
					}
					lv_number_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFillDirectiveRule());
						}
						set(
							$current,
							"number",
							lv_number_4_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBszDirective
entryRuleBszDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBszDirectiveRule()); }
	iv_ruleBszDirective=ruleBszDirective
	{ $current=$iv_ruleBszDirective.current; }
	EOF;

// Rule BszDirective
ruleBszDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_directive_0_1='BSZ'
					{
						newLeafNode(lv_directive_0_1, grammarAccess.getBszDirectiveAccess().getDirectiveBSZKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBszDirectiveRule());
						}
						setWithLastConsumed($current, "directive", lv_directive_0_1, null);
					}
					    |
					lv_directive_0_2='ZMB'
					{
						newLeafNode(lv_directive_0_2, grammarAccess.getBszDirectiveAccess().getDirectiveZMBKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBszDirectiveRule());
						}
						setWithLastConsumed($current, "directive", lv_directive_0_2, null);
					}
				)
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getBszDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBszDirectiveAccess().getOperandExpressionParserRuleCall_1_1_0());
					}
					lv_operand_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBszDirectiveRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFdbDirective
entryRuleFdbDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFdbDirectiveRule()); }
	iv_ruleFdbDirective=ruleFdbDirective
	{ $current=$iv_ruleFdbDirective.current; }
	EOF;

// Rule FdbDirective
ruleFdbDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='FDB'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getFdbDirectiveAccess().getDirectiveFDBKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFdbDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "FDB");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getFdbDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFdbDirectiveAccess().getOperandListOfExpressionParserRuleCall_1_1_0());
					}
					lv_operand_2_0=ruleListOfExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFdbDirectiveRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ListOfExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFcbDirective
entryRuleFcbDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFcbDirectiveRule()); }
	iv_ruleFcbDirective=ruleFcbDirective
	{ $current=$iv_ruleFcbDirective.current; }
	EOF;

// Rule FcbDirective
ruleFcbDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='FCB'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getFcbDirectiveAccess().getDirectiveFCBKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFcbDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "FCB");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getFcbDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFcbDirectiveAccess().getOperandListOfExpressionParserRuleCall_1_1_0());
					}
					lv_operand_2_0=ruleListOfExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFcbDirectiveRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.ListOfExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleRmbDirective
entryRuleRmbDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRmbDirectiveRule()); }
	iv_ruleRmbDirective=ruleRmbDirective
	{ $current=$iv_ruleRmbDirective.current; }
	EOF;

// Rule RmbDirective
ruleRmbDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='RMB'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getRmbDirectiveAccess().getDirectiveRMBKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRmbDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "RMB");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getRmbDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					(
						lv_isRelativeToPC_2_0='*'
						{
							newLeafNode(lv_isRelativeToPC_2_0, grammarAccess.getRmbDirectiveAccess().getIsRelativeToPCAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRmbDirectiveRule());
							}
							setWithLastConsumed($current, "isRelativeToPC", lv_isRelativeToPC_2_0 != null, "*");
						}
					)
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getRmbDirectiveAccess().getOperandExpressionParserRuleCall_1_1_1_0());
						}
						lv_operand_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRmbDirectiveRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleEndDirective
entryRuleEndDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndDirectiveRule()); }
	iv_ruleEndDirective=ruleEndDirective
	{ $current=$iv_ruleEndDirective.current; }
	EOF;

// Rule EndDirective
ruleEndDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='END'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getEndDirectiveAccess().getDirectiveENDKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "END");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getEndDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEndDirectiveAccess().getOperandIdentifierValueParserRuleCall_1_1_0());
					}
					lv_operand_2_0=ruleIdentifierValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEndDirectiveRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.IdentifierValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOrgDirective
entryRuleOrgDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrgDirectiveRule()); }
	iv_ruleOrgDirective=ruleOrgDirective
	{ $current=$iv_ruleOrgDirective.current; }
	EOF;

// Rule OrgDirective
ruleOrgDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='ORG'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getOrgDirectiveAccess().getDirectiveORGKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrgDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "ORG");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getOrgDirectiveAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					(
						(
							lv_isRelativeToPC_2_0='*'
							{
								newLeafNode(lv_isRelativeToPC_2_0, grammarAccess.getOrgDirectiveAccess().getIsRelativeToPCAsteriskKeyword_1_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getOrgDirectiveRule());
								}
								setWithLastConsumed($current, "isRelativeToPC", lv_isRelativeToPC_2_0 != null, "*");
							}
						)
					)?
					(
						(
							{
								newCompositeNode(grammarAccess.getOrgDirectiveAccess().getOperandExpressionParserRuleCall_1_1_0_1_0());
							}
							lv_operand_3_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getOrgDirectiveRule());
								}
								set(
									$current,
									"operand",
									lv_operand_3_0,
									"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						lv_isRelativeToPC_4_0='*'
						{
							newLeafNode(lv_isRelativeToPC_4_0, grammarAccess.getOrgDirectiveAccess().getIsRelativeToPCAsteriskKeyword_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getOrgDirectiveRule());
							}
							setWithLastConsumed($current, "isRelativeToPC", lv_isRelativeToPC_4_0 != null, "*");
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleEquDirective
entryRuleEquDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquDirectiveRule()); }
	iv_ruleEquDirective=ruleEquDirective
	{ $current=$iv_ruleEquDirective.current; }
	EOF;

// Rule EquDirective
ruleEquDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_directive_0_0='EQU'
				{
					newLeafNode(lv_directive_0_0, grammarAccess.getEquDirectiveAccess().getDirectiveEQUKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEquDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_0_0, "EQU");
				}
			)
		)
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				(
					(
						lv_isRelativeToPC_2_0='*'
						{
							newLeafNode(lv_isRelativeToPC_2_0, grammarAccess.getEquDirectiveAccess().getIsRelativeToPCAsteriskKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEquDirectiveRule());
							}
							setWithLastConsumed($current, "isRelativeToPC", lv_isRelativeToPC_2_0 != null, "*");
						}
					)
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getEquDirectiveAccess().getOperandExpressionParserRuleCall_2_0_1_0());
						}
						lv_operand_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEquDirectiveRule());
							}
							set(
								$current,
								"operand",
								lv_operand_3_0,
								"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					lv_isRelativeToPC_4_0='*'
					{
						newLeafNode(lv_isRelativeToPC_4_0, grammarAccess.getEquDirectiveAccess().getIsRelativeToPCAsteriskKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEquDirectiveRule());
						}
						setWithLastConsumed($current, "isRelativeToPC", lv_isRelativeToPC_4_0 != null, "*");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleListOfExpression
entryRuleListOfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOfExpressionRule()); }
	iv_ruleListOfExpression=ruleListOfExpression
	{ $current=$iv_ruleListOfExpression.current; }
	EOF;

// Rule ListOfExpression
ruleListOfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getListOfExpressionAccess().getExpressionsExpressionParserRuleCall_0_0());
				}
				lv_expressions_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListOfExpressionRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getListOfExpressionAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListOfExpressionAccess().getExpressionsExpressionParserRuleCall_1_1_0());
					}
					lv_expressions_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListOfExpressionRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_2_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getOperandMultiplicationParserRuleCall_0());
			}
			lv_operand_0_0=ruleMultiplication
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionRule());
				}
				set(
					$current,
					"operand",
					lv_operand_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.Multiplication");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0());
		}
		this_Division_0=ruleDivision
		{
			$current = $this_Division_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operation_2_0='*'
					{
						newLeafNode(lv_operation_2_0, grammarAccess.getMultiplicationAccess().getOperationAsteriskKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultiplicationRule());
						}
						setWithLastConsumed($current, "operation", lv_operation_2_0, "*");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleDivision
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Division");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivisionRule()); }
	iv_ruleDivision=ruleDivision
	{ $current=$iv_ruleDivision.current; }
	EOF;

// Rule Division
ruleDivision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDivisionAccess().getModuloParserRuleCall_0());
		}
		this_Modulo_0=ruleModulo
		{
			$current = $this_Modulo_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_opretation_2_0='/'
					{
						newLeafNode(lv_opretation_2_0, grammarAccess.getDivisionAccess().getOpretationSolidusKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDivisionRule());
						}
						setWithLastConsumed($current, "opretation", lv_opretation_2_0, "/");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDivisionAccess().getRightModuloParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleModulo
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDivisionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Modulo");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleModulo
entryRuleModulo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuloRule()); }
	iv_ruleModulo=ruleModulo
	{ $current=$iv_ruleModulo.current; }
	EOF;

// Rule Modulo
ruleModulo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModuloAccess().getAdditionParserRuleCall_0());
		}
		this_Addition_0=ruleAddition
		{
			$current = $this_Addition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getModuloAccess().getModuloLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_opretation_2_0='%'
					{
						newLeafNode(lv_opretation_2_0, grammarAccess.getModuloAccess().getOpretationPercentSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModuloRule());
						}
						setWithLastConsumed($current, "opretation", lv_opretation_2_0, "\%");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModuloAccess().getRightAdditionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuloRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Addition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getSubstractionParserRuleCall_0());
		}
		this_Substraction_0=ruleSubstraction
		{
			$current = $this_Substraction_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='+'
			{
				newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightSubstractionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleSubstraction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Substraction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSubstraction
entryRuleSubstraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubstractionRule()); }
	iv_ruleSubstraction=ruleSubstraction
	{ $current=$iv_ruleSubstraction.current; }
	EOF;

// Rule Substraction
ruleSubstraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSubstractionAccess().getLeftShiftParserRuleCall_0());
		}
		this_LeftShift_0=ruleLeftShift
		{
			$current = $this_LeftShift_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSubstractionAccess().getSubstractionLeftAction_1_0(),
						$current);
				}
			)
			(
				('-')=>
				otherlv_2='-'
				{
					newLeafNode(otherlv_2, grammarAccess.getSubstractionAccess().getHyphenMinusKeyword_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSubstractionAccess().getRightLeftShiftParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleLeftShift
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubstractionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.LeftShift");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLeftShift
entryRuleLeftShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftShiftRule()); }
	iv_ruleLeftShift=ruleLeftShift
	{ $current=$iv_ruleLeftShift.current; }
	EOF;

// Rule LeftShift
ruleLeftShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLeftShiftAccess().getRightShiftParserRuleCall_0());
		}
		this_RightShift_0=ruleRightShift
		{
			$current = $this_RightShift_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLeftShiftAccess().getLeftShiftLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='<<'
			{
				newLeafNode(otherlv_2, grammarAccess.getLeftShiftAccess().getLessThanSignLessThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLeftShiftAccess().getRightRightShiftParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRightShift
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeftShiftRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.RightShift");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRightShift
entryRuleRightShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightShiftRule()); }
	iv_ruleRightShift=ruleRightShift
	{ $current=$iv_ruleRightShift.current; }
	EOF;

// Rule RightShift
ruleRightShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRightShiftAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRightShiftAccess().getRightShiftLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='>>'
			{
				newLeafNode(otherlv_2, grammarAccess.getRightShiftAccess().getGreaterThanSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRightShiftAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRightShiftRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightOrParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getXorParserRuleCall_0());
		}
		this_Xor_0=ruleXor
		{
			$current = $this_Xor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightXorParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Xor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXor
entryRuleXor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorRule()); }
	iv_ruleXor=ruleXor
	{ $current=$iv_ruleXor.current; }
	EOF;

// Rule Xor
ruleXor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXorAccess().getXorLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='^'
			{
				newLeafNode(otherlv_2, grammarAccess.getXorAccess().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXorAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueDecimalValueParserRuleCall_0_0());
				}
				lv_value_0_0=ruleDecimalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.DecimalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueHexaDecimalValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleHexaDecimalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.HexaDecimalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueOctalValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleOctalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.OctalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueBinaryValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleBinaryValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.BinaryValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueCharacterValueParserRuleCall_4_0());
				}
				lv_value_4_0=ruleCharacterValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.CharacterValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueIdentifierValueParserRuleCall_5_0());
				}
				lv_value_5_0=ruleIdentifierValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_5_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.IdentifierValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_6_0(),
						$current);
				}
			)
			otherlv_7='!'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getValuePrimaryParserRuleCall_6_2_0());
					}
					lv_value_8_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"value",
							lv_value_8_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_7_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getMultiplicationParserRuleCall_7_1());
			}
			this_Multiplication_10=ruleMultiplication
			{
				$current = $this_Multiplication_10.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_7_2());
			}
		)
	)
;

// Entry rule entryRuleNumericalValue
entryRuleNumericalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericalValueRule()); }
	iv_ruleNumericalValue=ruleNumericalValue
	{ $current=$iv_ruleNumericalValue.current; }
	EOF;

// Rule NumericalValue
ruleNumericalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericalValueAccess().getValueDecimalValueParserRuleCall_0_0());
				}
				lv_value_0_0=ruleDecimalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericalValueRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.DecimalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericalValueAccess().getValueHexaDecimalValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleHexaDecimalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericalValueRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.HexaDecimalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericalValueAccess().getValueOctalValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleOctalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericalValueRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.OctalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericalValueAccess().getValueBinaryValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleBinaryValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericalValueRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.BinaryValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericalValueAccess().getValueCharacterValueParserRuleCall_4_0());
				}
				lv_value_4_0=ruleCharacterValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericalValueRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.CharacterValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericalValueAccess().getValueIdentifierValueParserRuleCall_5_0());
				}
				lv_value_5_0=ruleIdentifierValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericalValueRule());
					}
					set(
						$current,
						"value",
						lv_value_5_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.IdentifierValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIdentifierValue
entryRuleIdentifierValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierValueRule()); }
	iv_ruleIdentifierValue=ruleIdentifierValue
	{ $current=$iv_ruleIdentifierValue.current; }
	EOF;

// Rule IdentifierValue
ruleIdentifierValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_ID
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIdentifierValueAccess().getValueIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIdentifierValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.ID");
			}
		)
	)
;

// Entry rule entryRuleDecimalValue
entryRuleDecimalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecimalValueRule()); }
	iv_ruleDecimalValue=ruleDecimalValue
	{ $current=$iv_ruleDecimalValue.current; }
	EOF;

// Rule DecimalValue
ruleDecimalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_sign_0_1='-'
					{
						newLeafNode(lv_sign_0_1, grammarAccess.getDecimalValueAccess().getSignHyphenMinusKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecimalValueRule());
						}
						setWithLastConsumed($current, "sign", lv_sign_0_1, null);
					}
					    |
					lv_sign_0_2='+'
					{
						newLeafNode(lv_sign_0_2, grammarAccess.getDecimalValueAccess().getSignPlusSignKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecimalValueRule());
						}
						setWithLastConsumed($current, "sign", lv_sign_0_2, null);
					}
				)
			)
		)?
		(
			(
				lv_value_1_0=RULE_NUMBERS
				{
					newLeafNode(lv_value_1_0, grammarAccess.getDecimalValueAccess().getValueNUMBERSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDecimalValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.NUMBERS");
				}
			)
		)
	)
;

// Entry rule entryRuleHexaDecimalValue
entryRuleHexaDecimalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHexaDecimalValueRule()); }
	iv_ruleHexaDecimalValue=ruleHexaDecimalValue
	{ $current=$iv_ruleHexaDecimalValue.current; }
	EOF;

// Rule HexaDecimalValue
ruleHexaDecimalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_HEXA
			{
				newLeafNode(lv_value_0_0, grammarAccess.getHexaDecimalValueAccess().getValueHEXATerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getHexaDecimalValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.HEXA");
			}
		)
	)
;

// Entry rule entryRuleOctalValue
entryRuleOctalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOctalValueRule()); }
	iv_ruleOctalValue=ruleOctalValue
	{ $current=$iv_ruleOctalValue.current; }
	EOF;

// Rule OctalValue
ruleOctalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getOctalValueAccess().getCommercialAtKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_NUMBERS
				{
					newLeafNode(lv_value_1_0, grammarAccess.getOctalValueAccess().getValueNUMBERSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOctalValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.NUMBERS");
				}
			)
		)
	)
;

// Entry rule entryRuleBinaryValue
entryRuleBinaryValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryValueRule()); }
	iv_ruleBinaryValue=ruleBinaryValue
	{ $current=$iv_ruleBinaryValue.current; }
	EOF;

// Rule BinaryValue
ruleBinaryValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='%'
		{
			newLeafNode(otherlv_0, grammarAccess.getBinaryValueAccess().getPercentSignKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_NUMBERS
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBinaryValueAccess().getValueNUMBERSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinaryValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.NUMBERS");
				}
			)
		)
	)
;

// Entry rule entryRuleCharacterValue
entryRuleCharacterValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacterValueRule()); }
	iv_ruleCharacterValue=ruleCharacterValue
	{ $current=$iv_ruleCharacterValue.current; }
	EOF;

// Rule CharacterValue
ruleCharacterValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_CHARACTER
			{
				newLeafNode(lv_value_0_0, grammarAccess.getCharacterValueAccess().getValueCHARACTERTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCharacterValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.CHARACTER");
			}
		)
	)
;

// Entry rule entryRuleEndOfLine
entryRuleEndOfLine returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEndOfLineRule()); }
	iv_ruleEndOfLine=ruleEndOfLine
	{ $current=$iv_ruleEndOfLine.current.getText(); }
	EOF;

// Rule EndOfLine
ruleEndOfLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_CR_0=RULE_CR
		{
			$current.merge(this_CR_0);
		}
		{
			newLeafNode(this_CR_0, grammarAccess.getEndOfLineAccess().getCRTerminalRuleCall_0());
		}
		    |
		this_END_OF_FILE_1=RULE_END_OF_FILE
		{
			$current.merge(this_END_OF_FILE_1);
		}
		{
			newLeafNode(this_END_OF_FILE_1, grammarAccess.getEndOfLineAccess().getEND_OF_FILETerminalRuleCall_1());
		}
	)
;

// Rule AssemblyOption
ruleAssemblyOption returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='PAG'
			{
				$current = grammarAccess.getAssemblyOptionAccess().getPAGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAssemblyOptionAccess().getPAGEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='NOP'
			{
				$current = grammarAccess.getAssemblyOptionAccess().getNOPEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAssemblyOptionAccess().getNOPEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='CON'
			{
				$current = grammarAccess.getAssemblyOptionAccess().getCONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAssemblyOptionAccess().getCONEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='NOC'
			{
				$current = grammarAccess.getAssemblyOptionAccess().getNOCEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAssemblyOptionAccess().getNOCEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='MAC'
			{
				$current = grammarAccess.getAssemblyOptionAccess().getMACEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAssemblyOptionAccess().getMACEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='NOM'
			{
				$current = grammarAccess.getAssemblyOptionAccess().getNOMEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getAssemblyOptionAccess().getNOMEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='EXP'
			{
				$current = grammarAccess.getAssemblyOptionAccess().getEXPEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getAssemblyOptionAccess().getEXPEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='NOE'
			{
				$current = grammarAccess.getAssemblyOptionAccess().getNOEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getAssemblyOptionAccess().getNOEEnumLiteralDeclaration_7());
			}
		)
	)
;

// Rule Register
ruleRegister returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='A'
			{
				$current = grammarAccess.getRegisterAccess().getAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRegisterAccess().getAEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='B'
			{
				$current = grammarAccess.getRegisterAccess().getBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRegisterAccess().getBEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='D'
			{
				$current = grammarAccess.getRegisterAccess().getDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRegisterAccess().getDEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='X'
			{
				$current = grammarAccess.getRegisterAccess().getXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRegisterAccess().getXEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Y'
			{
				$current = grammarAccess.getRegisterAccess().getYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRegisterAccess().getYEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='U'
			{
				$current = grammarAccess.getRegisterAccess().getUEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRegisterAccess().getUEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='S'
			{
				$current = grammarAccess.getRegisterAccess().getSEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getRegisterAccess().getSEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='DP'
			{
				$current = grammarAccess.getRegisterAccess().getDPEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getRegisterAccess().getDPEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='CC'
			{
				$current = grammarAccess.getRegisterAccess().getCCEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getRegisterAccess().getCCEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='PC'
			{
				$current = grammarAccess.getRegisterAccess().getPCEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getRegisterAccess().getPCEnumLiteralDeclaration_9());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_HEXA : '$' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_NUMBERS : ('0'..'9')+;

RULE_CHARACTER : '\'' ' '..'\u007F';

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_ANY_EXCEPT_COMMENT_END_OF_LINE : ';' ~(('\n'|'\r'))*;

RULE_WS : (' '|'\t')+;

RULE_CR : '\r'? '\n';

RULE_END_OF_FILE : EOF;
