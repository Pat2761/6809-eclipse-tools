/*
 * generated by Xtext 2.29.0
 */
grammar InternalAssembler;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.bpy.electronics.mc6809.assembler.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.bpy.electronics.mc6809.assembler.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.bpy.electronics.mc6809.assembler.services.AssemblerGrammarAccess;

}

@parser::members {

 	private AssemblerGrammarAccess grammarAccess;

    public InternalAssemblerParser(TokenStream input, AssemblerGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected AssemblerGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getSourceLinesSourceLineParserRuleCall_0());
			}
			lv_sourceLines_0_0=ruleSourceLine
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"sourceLines",
					lv_sourceLines_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.SourceLine");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSourceLine
entryRuleSourceLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceLineRule()); }
	iv_ruleSourceLine=ruleSourceLine
	{ $current=$iv_ruleSourceLine.current; }
	EOF;

// Rule SourceLine
ruleSourceLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceLineAccess().getLineContentBlankLineParserRuleCall_0_0());
				}
				lv_lineContent_0_0=ruleBlankLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceLineRule());
					}
					set(
						$current,
						"lineContent",
						lv_lineContent_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.BlankLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceLineAccess().getLineContentCommentLineParserRuleCall_1_0());
				}
				lv_lineContent_1_0=ruleCommentLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceLineRule());
					}
					set(
						$current,
						"lineContent",
						lv_lineContent_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.CommentLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceLineAccess().getLineContentDirectiveLineParserRuleCall_2_0());
				}
				lv_lineContent_2_0=ruleDirectiveLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceLineRule());
					}
					set(
						$current,
						"lineContent",
						lv_lineContent_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.DirectiveLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlankLine
entryRuleBlankLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlankLineRule()); }
	iv_ruleBlankLine=ruleBlankLine
	{ $current=$iv_ruleBlankLine.current; }
	EOF;

// Rule BlankLine
ruleBlankLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlankLineAccess().getBlankLineAction_0(),
					$current);
			}
		)
		(
			(
				lv_blankLine_1_0=RULE_WS
				{
					newLeafNode(lv_blankLine_1_0, grammarAccess.getBlankLineAccess().getBlankLineWSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBlankLineRule());
					}
					setWithLastConsumed(
						$current,
						"blankLine",
						lv_blankLine_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.WS");
				}
			)
		)?
		{
			newCompositeNode(grammarAccess.getBlankLineAccess().getEndOfLineParserRuleCall_2());
		}
		ruleEndOfLine
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommentLine
entryRuleCommentLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentLineRule()); }
	iv_ruleCommentLine=ruleCommentLine
	{ $current=$iv_ruleCommentLine.current; }
	EOF;

// Rule CommentLine
ruleCommentLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_comment_0_0=RULE_ANY_EXCEPT_COMMENT_END_OF_LINE
				{
					newLeafNode(lv_comment_0_0, grammarAccess.getCommentLineAccess().getCommentANY_EXCEPT_COMMENT_END_OF_LINETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommentLineRule());
					}
					setWithLastConsumed(
						$current,
						"comment",
						lv_comment_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.ANY_EXCEPT_COMMENT_END_OF_LINE");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getCommentLineAccess().getEndOfLineParserRuleCall_1());
		}
		ruleEndOfLine
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDirectiveLine
entryRuleDirectiveLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectiveLineRule()); }
	iv_ruleDirectiveLine=ruleDirectiveLine
	{ $current=$iv_ruleDirectiveLine.current; }
	EOF;

// Rule DirectiveLine
ruleDirectiveLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDirectiveLineAccess().getDirectiveEquDirectiveParserRuleCall_0());
			}
			lv_directive_0_0=ruleEquDirective
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDirectiveLineRule());
				}
				set(
					$current,
					"directive",
					lv_directive_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.EquDirective");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleEquDirective
entryRuleEquDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquDirectiveRule()); }
	iv_ruleEquDirective=ruleEquDirective
	{ $current=$iv_ruleEquDirective.current; }
	EOF;

// Rule EquDirective
ruleEquDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEquDirectiveAccess().getNameIdentifierValueParserRuleCall_0_0());
				}
				lv_name_0_0=ruleIdentifierValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquDirectiveRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.IdentifierValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		this_WS_1=RULE_WS
		{
			newLeafNode(this_WS_1, grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_1());
		}
		(
			(
				lv_directive_2_0='EQU'
				{
					newLeafNode(lv_directive_2_0, grammarAccess.getEquDirectiveAccess().getDirectiveEQUKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEquDirectiveRule());
					}
					setWithLastConsumed($current, "directive", lv_directive_2_0, "EQU");
				}
			)
		)
		this_WS_3=RULE_WS
		{
			newLeafNode(this_WS_3, grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEquDirectiveAccess().getOperandOperandParserRuleCall_4_0());
				}
				lv_operand_4_0=ruleOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquDirectiveRule());
					}
					set(
						$current,
						"operand",
						lv_operand_4_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Operand");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			this_WS_5=RULE_WS
			{
				newLeafNode(this_WS_5, grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_5());
			}
		)?
		(
			(
				lv_comment_6_0=RULE_ANY_EXCEPT_COMMENT_END_OF_LINE
				{
					newLeafNode(lv_comment_6_0, grammarAccess.getEquDirectiveAccess().getCommentANY_EXCEPT_COMMENT_END_OF_LINETerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEquDirectiveRule());
					}
					setWithLastConsumed(
						$current,
						"comment",
						lv_comment_6_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.ANY_EXCEPT_COMMENT_END_OF_LINE");
				}
			)
		)?
		{
			newCompositeNode(grammarAccess.getEquDirectiveAccess().getEndOfLineParserRuleCall_7());
		}
		ruleEndOfLine
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleOperand=ruleOperand
	{ $current=$iv_ruleOperand.current; }
	EOF;

// Rule Operand
ruleOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getOperandMultiplicationParserRuleCall_0_0());
				}
				lv_operand_0_0=ruleMultiplication
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"operand",
						lv_operand_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.Multiplication");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getOperandStringValueParserRuleCall_1_0());
				}
				lv_operand_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"operand",
						lv_operand_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0());
		}
		this_Division_0=ruleDivision
		{
			$current = $this_Division_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operation_2_0='*'
					{
						newLeafNode(lv_operation_2_0, grammarAccess.getMultiplicationAccess().getOperationAsteriskKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultiplicationRule());
						}
						setWithLastConsumed($current, "operation", lv_operation_2_0, "*");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleDivision
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Division");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivisionRule()); }
	iv_ruleDivision=ruleDivision
	{ $current=$iv_ruleDivision.current; }
	EOF;

// Rule Division
ruleDivision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDivisionAccess().getModuloParserRuleCall_0());
		}
		this_Modulo_0=ruleModulo
		{
			$current = $this_Modulo_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_opretation_2_0='/'
					{
						newLeafNode(lv_opretation_2_0, grammarAccess.getDivisionAccess().getOpretationSolidusKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDivisionRule());
						}
						setWithLastConsumed($current, "opretation", lv_opretation_2_0, "/");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDivisionAccess().getRightModuloParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleModulo
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDivisionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Modulo");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleModulo
entryRuleModulo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuloRule()); }
	iv_ruleModulo=ruleModulo
	{ $current=$iv_ruleModulo.current; }
	EOF;

// Rule Modulo
ruleModulo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModuloAccess().getAdditionParserRuleCall_0());
		}
		this_Addition_0=ruleAddition
		{
			$current = $this_Addition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getModuloAccess().getModuloLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_opretation_2_0='%'
					{
						newLeafNode(lv_opretation_2_0, grammarAccess.getModuloAccess().getOpretationPercentSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModuloRule());
						}
						setWithLastConsumed($current, "opretation", lv_opretation_2_0, "\%");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModuloAccess().getRightAdditionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuloRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Addition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getSubstractionParserRuleCall_0());
		}
		this_Substraction_0=ruleSubstraction
		{
			$current = $this_Substraction_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='+'
			{
				newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightSubstractionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleSubstraction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Substraction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSubstraction
entryRuleSubstraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubstractionRule()); }
	iv_ruleSubstraction=ruleSubstraction
	{ $current=$iv_ruleSubstraction.current; }
	EOF;

// Rule Substraction
ruleSubstraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSubstractionAccess().getLeftShiftParserRuleCall_0());
		}
		this_LeftShift_0=ruleLeftShift
		{
			$current = $this_LeftShift_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSubstractionAccess().getSubstractionLeftAction_1_0(),
						$current);
				}
			)
			(
				('-')=>
				otherlv_2='-'
				{
					newLeafNode(otherlv_2, grammarAccess.getSubstractionAccess().getHyphenMinusKeyword_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSubstractionAccess().getRightLeftShiftParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleLeftShift
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubstractionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.LeftShift");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLeftShift
entryRuleLeftShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftShiftRule()); }
	iv_ruleLeftShift=ruleLeftShift
	{ $current=$iv_ruleLeftShift.current; }
	EOF;

// Rule LeftShift
ruleLeftShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLeftShiftAccess().getRigthShiftParserRuleCall_0());
		}
		this_RigthShift_0=ruleRigthShift
		{
			$current = $this_RigthShift_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLeftShiftAccess().getLeftShiftLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='<<'
			{
				newLeafNode(otherlv_2, grammarAccess.getLeftShiftAccess().getLessThanSignLessThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLeftShiftAccess().getRightRigthShiftParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRigthShift
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeftShiftRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.RigthShift");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRigthShift
entryRuleRigthShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRigthShiftRule()); }
	iv_ruleRigthShift=ruleRigthShift
	{ $current=$iv_ruleRigthShift.current; }
	EOF;

// Rule RigthShift
ruleRigthShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRigthShiftAccess().getNegateParserRuleCall_0());
		}
		this_Negate_0=ruleNegate
		{
			$current = $this_Negate_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRigthShiftAccess().getRigthShiftLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='>>'
			{
				newLeafNode(otherlv_2, grammarAccess.getRigthShiftAccess().getGreaterThanSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRigthShiftAccess().getNegatePrimaryParserRuleCall_1_2_0());
					}
					lv_Negate_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRigthShiftRule());
						}
						set(
							$current,
							"Negate",
							lv_Negate_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNegate
entryRuleNegate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegateRule()); }
	iv_ruleNegate=ruleNegate
	{ $current=$iv_ruleNegate.current; }
	EOF;

// Rule Negate
ruleNegate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNegateAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getNegateAccess().getNegateLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='~'
			{
				newLeafNode(otherlv_2, grammarAccess.getNegateAccess().getTildeKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNegateAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNegateRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightOrParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getXorParserRuleCall_0());
		}
		this_Xor_0=ruleXor
		{
			$current = $this_Xor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightXorParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Xor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXor
entryRuleXor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorRule()); }
	iv_ruleXor=ruleXor
	{ $current=$iv_ruleXor.current; }
	EOF;

// Rule Xor
ruleXor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXorAccess().getXorLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='^'
			{
				newLeafNode(otherlv_2, grammarAccess.getXorAccess().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXorAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.bpy.electronics.mc6809.assembler.Assembler.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueDecimalValueParserRuleCall_0_0());
				}
				lv_value_0_0=ruleDecimalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.DecimalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueHexaDecimalValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleHexaDecimalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.HexaDecimalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueOctalValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleOctalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.OctalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueBinaryValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleBinaryValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.BinaryValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueCharacterValueParserRuleCall_4_0());
				}
				lv_value_4_0=ruleCharacterValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.CharacterValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueIdentifierValueParserRuleCall_5_0());
				}
				lv_value_5_0=ruleIdentifierValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_5_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.IdentifierValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getMultiplicationParserRuleCall_6_1());
			}
			this_Multiplication_7=ruleMultiplication
			{
				$current = $this_Multiplication_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_6_2());
			}
		)
	)
;

// Entry rule entryRuleIdentifierValue
entryRuleIdentifierValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierValueRule()); }
	iv_ruleIdentifierValue=ruleIdentifierValue
	{ $current=$iv_ruleIdentifierValue.current; }
	EOF;

// Rule IdentifierValue
ruleIdentifierValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_ID
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIdentifierValueAccess().getValueIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIdentifierValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.ID");
			}
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.STRING");
			}
		)
	)
;

// Entry rule entryRuleDecimalValue
entryRuleDecimalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecimalValueRule()); }
	iv_ruleDecimalValue=ruleDecimalValue
	{ $current=$iv_ruleDecimalValue.current; }
	EOF;

// Rule DecimalValue
ruleDecimalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isNegative_0_0='-'
				{
					newLeafNode(lv_isNegative_0_0, grammarAccess.getDecimalValueAccess().getIsNegativeHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDecimalValueRule());
					}
					setWithLastConsumed($current, "isNegative", lv_isNegative_0_0 != null, "-");
				}
			)
		)?
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getDecimalValueAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDecimalValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.bpy.electronics.mc6809.assembler.Assembler.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleHexaDecimalValue
entryRuleHexaDecimalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHexaDecimalValueRule()); }
	iv_ruleHexaDecimalValue=ruleHexaDecimalValue
	{ $current=$iv_ruleHexaDecimalValue.current; }
	EOF;

// Rule HexaDecimalValue
ruleHexaDecimalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_HEXA
			{
				newLeafNode(lv_value_0_0, grammarAccess.getHexaDecimalValueAccess().getValueHEXATerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getHexaDecimalValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.HEXA");
			}
		)
	)
;

// Entry rule entryRuleOctalValue
entryRuleOctalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOctalValueRule()); }
	iv_ruleOctalValue=ruleOctalValue
	{ $current=$iv_ruleOctalValue.current; }
	EOF;

// Rule OctalValue
ruleOctalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_OCTAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getOctalValueAccess().getValueOCTALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getOctalValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.OCTAL");
			}
		)
	)
;

// Entry rule entryRuleBinaryValue
entryRuleBinaryValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryValueRule()); }
	iv_ruleBinaryValue=ruleBinaryValue
	{ $current=$iv_ruleBinaryValue.current; }
	EOF;

// Rule BinaryValue
ruleBinaryValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BINARY
			{
				newLeafNode(lv_value_0_0, grammarAccess.getBinaryValueAccess().getValueBINARYTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBinaryValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.BINARY");
			}
		)
	)
;

// Entry rule entryRuleCharacterValue
entryRuleCharacterValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacterValueRule()); }
	iv_ruleCharacterValue=ruleCharacterValue
	{ $current=$iv_ruleCharacterValue.current; }
	EOF;

// Rule CharacterValue
ruleCharacterValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_CHARACTER
			{
				newLeafNode(lv_value_0_0, grammarAccess.getCharacterValueAccess().getValueCHARACTERTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCharacterValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.bpy.electronics.mc6809.assembler.Assembler.CHARACTER");
			}
		)
	)
;

// Entry rule entryRuleEndOfLine
entryRuleEndOfLine returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEndOfLineRule()); }
	iv_ruleEndOfLine=ruleEndOfLine
	{ $current=$iv_ruleEndOfLine.current.getText(); }
	EOF;

// Rule EndOfLine
ruleEndOfLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_CR_0=RULE_CR
		{
			$current.merge(this_CR_0);
		}
		{
			newLeafNode(this_CR_0, grammarAccess.getEndOfLineAccess().getCRTerminalRuleCall_0());
		}
		    |
		this_END_OF_FILE_1=RULE_END_OF_FILE
		{
			$current.merge(this_END_OF_FILE_1);
		}
		{
			newLeafNode(this_END_OF_FILE_1, grammarAccess.getEndOfLineAccess().getEND_OF_FILETerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_HEXA : '$' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_INT : ('0'..'9')+;

RULE_OCTAL : '@' ('0'..'7')+;

RULE_BINARY : '0' 'b' ('0'..'1')+;

RULE_CHARACTER : '\'' ' '..'\u007F';

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))*;

RULE_ANY_EXCEPT_COMMENT_END_OF_LINE : ';' ~(('\n'|'\r'))*;

RULE_WS : (' '|'\t')+;

RULE_CR : '\r'? '\n';

RULE_END_OF_FILE : EOF;
