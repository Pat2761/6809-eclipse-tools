/*
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AssemblerGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bpy.electronics.mc6809.assembler.Assembler.Model");
		private final Assignment cSourceLinesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSourceLinesSourceLineParserRuleCall_0 = (RuleCall)cSourceLinesAssignment.eContents().get(0);
		
		//Model:
		//    sourceLines += SourceLine*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sourceLines += SourceLine*
		public Assignment getSourceLinesAssignment() { return cSourceLinesAssignment; }
		
		//SourceLine
		public RuleCall getSourceLinesSourceLineParserRuleCall_0() { return cSourceLinesSourceLineParserRuleCall_0; }
	}
	public class SourceLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bpy.electronics.mc6809.assembler.Assembler.SourceLine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEmptyLineAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyLineEmptyLineParserRuleCall_0_0 = (RuleCall)cEmptyLineAssignment_0.eContents().get(0);
		private final Assignment cCommentLineAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCommentLineCommentLineParserRuleCall_1_0 = (RuleCall)cCommentLineAssignment_1.eContents().get(0);
		
		//SourceLine:
		//    emptyLine = EmptyLine |
		//    commentLine = CommentLine
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//emptyLine = EmptyLine |
		//commentLine = CommentLine
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//emptyLine = EmptyLine
		public Assignment getEmptyLineAssignment_0() { return cEmptyLineAssignment_0; }
		
		//EmptyLine
		public RuleCall getEmptyLineEmptyLineParserRuleCall_0_0() { return cEmptyLineEmptyLineParserRuleCall_0_0; }
		
		//commentLine = CommentLine
		public Assignment getCommentLineAssignment_1() { return cCommentLineAssignment_1; }
		
		//CommentLine
		public RuleCall getCommentLineCommentLineParserRuleCall_1_0() { return cCommentLineCommentLineParserRuleCall_1_0; }
	}
	public class CommentLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bpy.electronics.mc6809.assembler.Assembler.CommentLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		
		//CommentLine :
		//    WS? comment = SL_COMMENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//WS? comment = SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }
		
		//comment = SL_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0() { return cCommentSL_COMMENTTerminalRuleCall_1_0; }
	}
	public class EmptyLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bpy.electronics.mc6809.assembler.Assembler.EmptyLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCRTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EmptyLine:
		//    WS? CR
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//WS? CR
		public Group getGroup() { return cGroup; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }
		
		//CR
		public RuleCall getCRTerminalRuleCall_1() { return cCRTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final SourceLineElements pSourceLine;
	private final CommentLineElements pCommentLine;
	private final EmptyLineElements pEmptyLine;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tCR;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public AssemblerGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pSourceLine = new SourceLineElements();
		this.pCommentLine = new CommentLineElements();
		this.pEmptyLine = new EmptyLineElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.bpy.electronics.mc6809.assembler.Assembler.SL_COMMENT");
		this.tCR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.bpy.electronics.mc6809.assembler.Assembler.CR");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.bpy.electronics.mc6809.assembler.Assembler.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.bpy.electronics.mc6809.assembler.Assembler".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    sourceLines += SourceLine*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SourceLine:
	//    emptyLine = EmptyLine |
	//    commentLine = CommentLine
	//;
	public SourceLineElements getSourceLineAccess() {
		return pSourceLine;
	}
	
	public ParserRule getSourceLineRule() {
		return getSourceLineAccess().getRule();
	}
	
	//CommentLine :
	//    WS? comment = SL_COMMENT
	//;
	public CommentLineElements getCommentLineAccess() {
		return pCommentLine;
	}
	
	public ParserRule getCommentLineRule() {
		return getCommentLineAccess().getRule();
	}
	
	//EmptyLine:
	//    WS? CR
	//;
	public EmptyLineElements getEmptyLineAccess() {
		return pEmptyLine;
	}
	
	public ParserRule getEmptyLineRule() {
		return getEmptyLineAccess().getRule();
	}
	
	//terminal SL_COMMENT	: ';' .* CR;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal CR         : ('\r'? '\n');
	public TerminalRule getCRRule() {
		return tCR;
	}
	
	//terminal WS			: (' '|'\t')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
