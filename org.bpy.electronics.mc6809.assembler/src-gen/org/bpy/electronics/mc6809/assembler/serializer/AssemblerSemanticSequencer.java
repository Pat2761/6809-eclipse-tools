/*
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.bpy.electronics.mc6809.assembler.assembler.AssemblerPackage;
import org.bpy.electronics.mc6809.assembler.assembler.CommentLine;
import org.bpy.electronics.mc6809.assembler.assembler.Model;
import org.bpy.electronics.mc6809.assembler.assembler.SourceLine;
import org.bpy.electronics.mc6809.assembler.services.AssemblerGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AssemblerSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AssemblerGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AssemblerPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AssemblerPackage.COMMENT_LINE:
				sequence_CommentLine(context, (CommentLine) semanticObject); 
				return; 
			case AssemblerPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AssemblerPackage.SOURCE_LINE:
				sequence_SourceLine(context, (SourceLine) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommentLine returns CommentLine
	 *
	 * Constraint:
	 *     comment=SL_COMMENT
	 * </pre>
	 */
	protected void sequence_CommentLine(ISerializationContext context, CommentLine semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AssemblerPackage.Literals.COMMENT_LINE__COMMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssemblerPackage.Literals.COMMENT_LINE__COMMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentLineAccess().getCommentSL_COMMENTTerminalRuleCall_1_0(), semanticObject.getComment());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     sourceLines+=SourceLine+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SourceLine returns SourceLine
	 *
	 * Constraint:
	 *     (emptyLine=EmptyLine | commentLine=CommentLine)
	 * </pre>
	 */
	protected void sequence_SourceLine(ISerializationContext context, SourceLine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
