grammar org.bpy.electronics.mc6809.assembler.Assembler // with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate assembler "http://www.bpy.org/electronics/mc6809/assembler/Assembler"

Model:
	sourceLines += SourceLine*
;
	
SourceLine:
	(
		  (lineContent = BlankLine)
		| (lineContent = CommentLine) 
		| (lineContent = DirectiveLine)
	) 
;

BlankLine:
	{BlankLine} (blankLine = WS)? EndOfLine  
;

CommentLine:
	comment = ANY_EXCEPT_COMMENT_END_OF_LINE EndOfLine 
;

DirectiveLine:
	directive = EquDirective
;

EquDirective:
	(name = Identifier)? WS (directive = 'EQU') WS (operand = Operand)? WS? (comment=ANY_EXCEPT_COMMENT_END_OF_LINE)? EndOfLine	
;

/*
 * Equate directive:
 * EQU is the equate or define directive used to define names
 * 
 * example:
 * LAST         EQU 		5000
 * LAST			EQU 		FINAL
 * ST1			EQU 		START+1	
 * 
 */
//EquDirective:
//	{EquDirective} 'EQU'
//;

Operand:
		(operand = Multiplication)
	| 	(operand = StringValue)
;

Multiplication returns Expression:
  	Division ({Multiplication.left=current} operation='*' right=Division)*
;

Division returns Expression:
  	Modulo ({Division.left=current} opretation='/' right=Modulo)*
;

Modulo returns Expression:
	Addition ({Modulo.left=current} opretation='%' right=Addition)*
;

Addition returns Expression:
  Substraction ({Addition.left=current} '+' right=Substraction)*
;

Substraction returns Expression:
  LeftShift ({Substraction.left=current} '-' right=LeftShift)*
;
  
LeftShift returns Expression:
	RigthShift ({LeftShift.left=current} '<<' right=RigthShift)*
;

RigthShift returns Expression:
	Negate ({RigthShift.left=current} '>>' Negate=Primary)*
;

Negate returns Expression:
	And ({Negate.left=current} '~' right=And)*
;

And returns Expression:
	Or ({And.left=current} '&&' right=Or)*
;

Or returns Expression:
	Xor ({Or.left=current} '||' right=Xor)*
;

Xor returns Expression:
	Primary ({Or.left=current} '^' right=Primary)*
;

Primary returns Expression:
   	 	value=DecimalValue
  	|	value=HexaDecimalValue
  	|	value=OctalValue
  	|   value=BinaryValue
  	|   value=CharacterValue
   	|	value=Identifier
  	|  '(' Multiplication ')'
 ;

Identifier:
	value = ID
;

StringValue:
	value = STRING
;

DecimalValue:
	value = INT
;

HexaDecimalValue:
	value = HEXA
;

OctalValue:
	value = OCTAL
;

BinaryValue:
	value = BINARY
;

CharacterValue:
	value = CHARACTER
;

terminal ID									: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal HEXA 								: '$' ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal BINARY 							: '!' ('0'..'1')+;
terminal OCTAL 								: '@' ('0'..'7')+;
terminal CHARACTER							: '\'' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') ) '\'';
terminal INT returns ecore::EInt			: ('0'..'9')+;

EndOfLine: CR | END_OF_FILE;

terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
		;		
		
terminal ANY_EXCEPT_COMMENT_END_OF_LINE  	: ';' !('\n' | '\r')*;
terminal WS         						: (' '|'\t')+;
terminal CR          						: '\r'? '\n';
terminal END_OF_FILE 						: EOF;		