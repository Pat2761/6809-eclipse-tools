/*
 * MC6809 Toolkit
 * Copyright (C) 2023  Patrick BRIAND
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
/*
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.ui.outline;

import java.util.LinkedList;

import org.bpy.electronics.mc6809.assembler.assembler.DirectiveLine;
import org.bpy.electronics.mc6809.assembler.assembler.InstructionLine;
import org.bpy.electronics.mc6809.assembler.assembler.LabelLine;
import org.bpy.electronics.mc6809.assembler.assembler.MacroDefinition;
import org.bpy.electronics.mc6809.assembler.assembler.Model;
import org.bpy.electronics.mc6809.assembler.assembler.OtherKindOfInstructions;
import org.bpy.electronics.mc6809.assembler.assembler.SourceLine;
import org.bpy.electronics.mc6809.assembler.assembler.SpecialFunctions;
import org.bpy.electronics.mc6809.assembler.util.CommandUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;

/**
 * Customization of the default outline structure.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
public class AssemblerOutlineTreeProvider extends DefaultOutlineTreeProvider {

	/** reference on the macro icon to display */
	public Image macroImage = null; 
	/** reference on the instruction icon to display */
	public Image instructionImage = null; 
	/** reference on the directive icon to display */
	public Image directiveImage = null; 
	/** reference on the other kind of instruction icon to display */
	public Image otherImage = null; 
	
	/** Stack on instruction line to display */
	private LinkedList<EObject> stack = null;
	/** Root node in the outline view */
	private DocumentRootNode rootNode;
	/** current node in the outline view */
	private IOutlineNode currentNode = null;
	
	@Override
	protected void _createChildren(DocumentRootNode parentNode, EObject modelElement) {

		this.rootNode = parentNode;
		this.currentNode = null;
		
		stack = new LinkedList<>();
		if (modelElement instanceof Model) {

			stack.addAll(((Model) modelElement).getSourceLines());
			while (!stack.isEmpty()) {

				EObject sourceLine = stack.pop();
				EObject line = ((SourceLine) sourceLine).getLineContent();

				manageSourceLine(line);
			}	
		}
	}

	/**
	 * Manage a source line in the assembly file
	 * 
	 * @param line reference on the line
	 */
	private void manageSourceLine(EObject line) {
		if (line instanceof InstructionLine) {
			manageInstructionLine((InstructionLine) line);

		} else if (line instanceof LabelLine) {
			manageLabelLine((LabelLine) line);

		} else if (line instanceof DirectiveLine) {
			manageDirectiveLine((DirectiveLine) line);

		} else if (line instanceof SpecialFunctions) {
			manageSpecialFunctions((SpecialFunctions)line);

		} else if (line instanceof OtherKindOfInstructions) {
			manageOtherKingOfInstruction((OtherKindOfInstructions)line);
		}
	}
	
	/**
	 * manage other kind of instruction, like call of macro 
	 * 
	 * @param line reference on the other kind line
	 */
	private void manageOtherKingOfInstruction(OtherKindOfInstructions line) {
		String label = line.getOtherInstruction().getValue();
		if (currentNode != null) {
			createEObjectNode(currentNode, line, getImage(line), label, true);
		} else {
			currentNode = createEObjectNode(rootNode, line, getImage(line), "", true);
			createEObjectNode(currentNode, line, getImage(line), label, true);
		}
		
	}

	/**
	 * manage a special function line 
	 * 
	 * @param line reference on the special function line
	 */
	private void manageSpecialFunctions(SpecialFunctions line) {
		if (line.getSpecialFuntion() instanceof MacroDefinition) {
			MacroDefinition macroDefintion = (MacroDefinition)line.getSpecialFuntion();
			String macroName  = getLabel((SpecialFunctions) line);
			currentNode = (IOutlineNode) createEObjectNode(rootNode, line, getMacroImage(), macroName, true);
			
			for (InstructionLine macroLine : macroDefintion.getInstructions()) {
				manageSourceLine(macroLine);
			}
			currentNode= null;
		}
	}

	/**
	 * manage a label line (with out any instruction or directive)
	 * The icons is the first next element in the source 
	 * 
	 * @param line reference on the label line
	 */
	private void manageLabelLine(LabelLine line) {
		String label = getLabel((LabelLine) line);
		if (label != null) {
			for (int i=0; i<stack.size(); i++) {
				EObject sourceLine = stack.get(i);
				EObject nextLine = ((SourceLine) sourceLine).getLineContent();
				Image image = getImage(nextLine);
				if (image != null) {
					currentNode = (IOutlineNode) createEObjectNode(rootNode, line, getImage(nextLine), label, true);
					break;
				} 
			}
		} 
	}

	/**
	 * Manage an directive line in the outline view

	 * @param line reference on the directive line
	 */
	private void manageDirectiveLine(DirectiveLine line) {

		String label = getLabel((DirectiveLine) line);
		if (label != null) {
			currentNode = (IOutlineNode) createEObjectNode(rootNode, line, getImage(line), label, true);
		}	
		
		if (currentNode != null) {
			createEObjectNode(currentNode, line, getImage(line), CommandUtil.getDirectiveName(line.getDirective()), true);
		} else {
			currentNode = createEObjectNode(rootNode, line, getImage(line), "", true);
			createEObjectNode(currentNode, line, getImage(line), CommandUtil.getDirectiveName(line.getDirective()), true);
		}
	}

	/**
	 * Manage an instruction line in the outline view
	 * @param line reference on the instruction line
	 */
	private void manageInstructionLine(InstructionLine line) {

		String label = getLabel((InstructionLine) line);
		if (label != null) {
			currentNode = (IOutlineNode) createEObjectNode(rootNode, line, getImage(line), label, true);
		}	
		
		if (currentNode != null) {
			createEObjectNode(currentNode, line, getImage(line), CommandUtil.getInstructionName(line.getInstruction()), true);
		} else {
			currentNode = createEObjectNode(rootNode, line, getImage(line), "", true);
			createEObjectNode(currentNode, line, getImage(line), CommandUtil.getInstructionName(line.getInstruction()), true);
		}
	}

	/**
	 * get or create an icon linked to a assembly line
	 * @return reference on the icon
	 */
	private Image getImage(Object line) {
		if (line instanceof InstructionLine) {
				return getInstructionImage();
		} else if (line instanceof DirectiveLine) {
			return getDirectiveImage();
		} else if (line instanceof MacroDefinition) {
			return getMacroImage();
		} else if (line instanceof OtherKindOfInstructions) {
			return getOtherImage();
		} else {
			return null;
		}
	}

	/**
	 * get or create an icon linked to an another instruction line (like macros)
	 * @return reference on the icon
	 */
	private Image getOtherImage() {
		if (otherImage == null) {
			ImageDescriptor mDescriptor = AbstractUIPlugin.imageDescriptorFromPlugin("org.bpy.electronics.mc6809.assembler.ui", "icons/O-blue.16.png");
			otherImage = mDescriptor.createImage();
		}
		return otherImage;
	}

	/**
	 * get or create an icon linked to a macro definition line
	 * @return reference on the icon
	 */
	private Image getMacroImage() {
		if (macroImage == null) {
			ImageDescriptor mDescriptor = AbstractUIPlugin.imageDescriptorFromPlugin("org.bpy.electronics.mc6809.assembler.ui", "icons/M-gold.16.png");
			macroImage = mDescriptor.createImage();
		}
		return macroImage;
	}

	/**
	 * get or create an icon linked to a directive line
	 * @return reference on the icon
	 */
	private Image getDirectiveImage() {
		if (directiveImage == null) {
			ImageDescriptor mDescriptor = AbstractUIPlugin.imageDescriptorFromPlugin("org.bpy.electronics.mc6809.assembler.ui", "icons/D-pink.16.png");
			directiveImage = mDescriptor.createImage();
		}
		return directiveImage;
	}

	/**
	 * get or create an icon linked to an instruction line
	 * @return reference on the icon
	 */
	private Image getInstructionImage() {
		if (instructionImage == null) {
			ImageDescriptor mDescriptor = AbstractUIPlugin.imageDescriptorFromPlugin("org.bpy.electronics.mc6809.assembler.ui", "icons/I-green.16.png");
			instructionImage = mDescriptor.createImage();
		}
		return instructionImage;
	}

	/** 
	 * Return name to display in the outline view
	 * @param line reference on the special function line
	 * @return label value, <b>null</b> if not defined
	 */
	private String getLabel(SpecialFunctions line) {
		if (line.getSpecialFuntion() instanceof MacroDefinition) {
			MacroDefinition macroDefinition = (MacroDefinition)line.getSpecialFuntion();
			return macroDefinition.getName().getValue();
		}
		return "";
	}

	/** 
	 * Return name to display in the outline view
	 * @param line reference on the directive line
	 * @return label value, <b>null</b> if not defined
	 */
	private String getLabel(DirectiveLine line) {
		if (line.getLabel() != null && line.getLabel().getName() != null) {
			return line.getLabel().getName().getValue();
		} else {
			return null;
		}
	}

	/** 
	 * Return name to display in the outline view
	 * @param line reference on the label line
	 * @return label value, <b>null</b> if not defined
	 */
	private String getLabel(LabelLine line) {
		if (line.getLabel() != null && line.getLabel().getName() != null) {
			return line.getLabel().getName().getValue();
		} else {
			return null;
		}
	}

	/** 
	 * Return name to display in the outline view
	 * @param line reference on the instruction line
	 * @return label value, <b>null</b> if not defined
	 */
	private String getLabel(InstructionLine line) {
		if (line.getLabel() != null && line.getLabel().getName() != null) {
			return line.getLabel().getName().getValue();
		} else {
			return null;
		}
	}
}
