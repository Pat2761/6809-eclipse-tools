/*
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.bpy.electronics.mc6809.assembler.ide.contentassist.antlr.internal.InternalAssemblerParser;
import org.bpy.electronics.mc6809.assembler.services.AssemblerGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AssemblerParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AssemblerGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AssemblerGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSourceLineAccess().getAlternatives(), "rule__SourceLine__Alternatives");
			builder.put(grammarAccess.getAssemblyLineAccess().getAlternatives_4(), "rule__AssemblyLine__Alternatives_4");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getExpressionValueAccess().getAlternatives(), "rule__ExpressionValue__Alternatives");
			builder.put(grammarAccess.getAssemblyLineAccess().getGroup(), "rule__AssemblyLine__Group__0");
			builder.put(grammarAccess.getEquDirectiveAccess().getGroup(), "rule__EquDirective__Group__0");
			builder.put(grammarAccess.getCommentLineAccess().getGroup(), "rule__CommentLine__Group__0");
			builder.put(grammarAccess.getEmptyLineAccess().getGroup(), "rule__EmptyLine__Group__0");
			builder.put(grammarAccess.getSpecifiedValueAccess().getGroup(), "rule__SpecifiedValue__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getDivisionAccess().getGroup(), "rule__Division__Group__0");
			builder.put(grammarAccess.getDivisionAccess().getGroup_1(), "rule__Division__Group_1__0");
			builder.put(grammarAccess.getSoustractionAccess().getGroup(), "rule__Soustraction__Group__0");
			builder.put(grammarAccess.getSoustractionAccess().getGroup_1(), "rule__Soustraction__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getBinaryeValueAccess().getGroup(), "rule__BinaryeValue__Group__0");
			builder.put(grammarAccess.getOctalValueAccess().getGroup(), "rule__OctalValue__Group__0");
			builder.put(grammarAccess.getDecimelValueAccess().getGroup(), "rule__DecimelValue__Group__0");
			builder.put(grammarAccess.getHexadecimalValueAccess().getGroup(), "rule__HexadecimalValue__Group__0");
			builder.put(grammarAccess.getModelAccess().getSourceLinesAssignment(), "rule__Model__SourceLinesAssignment");
			builder.put(grammarAccess.getSourceLineAccess().getAssemblyLineAssignment_0(), "rule__SourceLine__AssemblyLineAssignment_0");
			builder.put(grammarAccess.getSourceLineAccess().getEmptyLineAssignment_1(), "rule__SourceLine__EmptyLineAssignment_1");
			builder.put(grammarAccess.getSourceLineAccess().getCommentLineAssignment_2(), "rule__SourceLine__CommentLineAssignment_2");
			builder.put(grammarAccess.getAssemblyLineAccess().getLabelFieldAssignment_0(), "rule__AssemblyLine__LabelFieldAssignment_0");
			builder.put(grammarAccess.getAssemblyLineAccess().getCommandAssignment_2(), "rule__AssemblyLine__CommandAssignment_2");
			builder.put(grammarAccess.getDirectiveAccess().getDirectiveAssignment(), "rule__Directive__DirectiveAssignment");
			builder.put(grammarAccess.getEquDirectiveAccess().getConstantAssignment_2(), "rule__EquDirective__ConstantAssignment_2");
			builder.put(grammarAccess.getLabelFieldAccess().getLabelAssignment(), "rule__LabelField__LabelAssignment");
			builder.put(grammarAccess.getCommentLineAccess().getCommentAssignment_1(), "rule__CommentLine__CommentAssignment_1");
			builder.put(grammarAccess.getSpecifiedValueAccess().getValueAssignment_1(), "rule__SpecifiedValue__ValueAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getAdditionAssignment(), "rule__Expression__AdditionAssignment");
			builder.put(grammarAccess.getAdditionAccess().getValuesAssignment_0(), "rule__Addition__ValuesAssignment_0");
			builder.put(grammarAccess.getAdditionAccess().getValuesAssignment_1_1(), "rule__Addition__ValuesAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getValuesAssignment_0(), "rule__Multiplication__ValuesAssignment_0");
			builder.put(grammarAccess.getMultiplicationAccess().getValuesAssignment_1_1(), "rule__Multiplication__ValuesAssignment_1_1");
			builder.put(grammarAccess.getDivisionAccess().getValuesAssignment_0(), "rule__Division__ValuesAssignment_0");
			builder.put(grammarAccess.getDivisionAccess().getValuesAssignment_1_1(), "rule__Division__ValuesAssignment_1_1");
			builder.put(grammarAccess.getSoustractionAccess().getValuesAssignment_0(), "rule__Soustraction__ValuesAssignment_0");
			builder.put(grammarAccess.getSoustractionAccess().getValuesAssignment_1_1(), "rule__Soustraction__ValuesAssignment_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionValueAssignment_0(), "rule__Primary__ExpressionValueAssignment_0");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionValueAssignment_1_1(), "rule__Primary__ExpressionValueAssignment_1_1");
			builder.put(grammarAccess.getExpressionValueAccess().getExpressionValueAssignment_0(), "rule__ExpressionValue__ExpressionValueAssignment_0");
			builder.put(grammarAccess.getExpressionValueAccess().getExpressionValueAssignment_1(), "rule__ExpressionValue__ExpressionValueAssignment_1");
			builder.put(grammarAccess.getExpressionValueAccess().getExpressionValueAssignment_2(), "rule__ExpressionValue__ExpressionValueAssignment_2");
			builder.put(grammarAccess.getExpressionValueAccess().getExpressionValueAssignment_3(), "rule__ExpressionValue__ExpressionValueAssignment_3");
			builder.put(grammarAccess.getExpressionValueAccess().getExpressionValueAssignment_4(), "rule__ExpressionValue__ExpressionValueAssignment_4");
			builder.put(grammarAccess.getExpressionValueAccess().getExpressionValueAssignment_5(), "rule__ExpressionValue__ExpressionValueAssignment_5");
			builder.put(grammarAccess.getExpressionValueAccess().getExpressionValueAssignment_6(), "rule__ExpressionValue__ExpressionValueAssignment_6");
			builder.put(grammarAccess.getActualPositionAccess().getActualPositionAssignment(), "rule__ActualPosition__ActualPositionAssignment");
			builder.put(grammarAccess.getBinaryeValueAccess().getIsNegativeAssignment_0(), "rule__BinaryeValue__IsNegativeAssignment_0");
			builder.put(grammarAccess.getBinaryeValueAccess().getBinaryValueAssignment_1(), "rule__BinaryeValue__BinaryValueAssignment_1");
			builder.put(grammarAccess.getOctalValueAccess().getIsNegativeAssignment_0(), "rule__OctalValue__IsNegativeAssignment_0");
			builder.put(grammarAccess.getOctalValueAccess().getOctalValueAssignment_1(), "rule__OctalValue__OctalValueAssignment_1");
			builder.put(grammarAccess.getDecimelValueAccess().getIsNegativeAssignment_0(), "rule__DecimelValue__IsNegativeAssignment_0");
			builder.put(grammarAccess.getDecimelValueAccess().getDecimalValueAssignment_1(), "rule__DecimelValue__DecimalValueAssignment_1");
			builder.put(grammarAccess.getHexadecimalValueAccess().getIsNegativeAssignment_0(), "rule__HexadecimalValue__IsNegativeAssignment_0");
			builder.put(grammarAccess.getHexadecimalValueAccess().getHexadeciamlValueAssignment_1(), "rule__HexadecimalValue__HexadeciamlValueAssignment_1");
			builder.put(grammarAccess.getAsciiValueAccess().getAsciiValueAssignment(), "rule__AsciiValue__AsciiValueAssignment");
			builder.put(grammarAccess.getLabelValueAccess().getLabelAssignment(), "rule__LabelValue__LabelAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AssemblerGrammarAccess grammarAccess;

	@Override
	protected InternalAssemblerParser createParser() {
		InternalAssemblerParser result = new InternalAssemblerParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public AssemblerGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AssemblerGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
