/*
 * generated by Xtext 2.28.0
 */
package org.bpy.electronics.mc6809.assembler.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.bpy.electronics.mc6809.assembler.ide.contentassist.antlr.internal.InternalAssemblerParser;
import org.bpy.electronics.mc6809.assembler.services.AssemblerGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AssemblerParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AssemblerGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AssemblerGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSourceLineAccess().getAlternatives(), "rule__SourceLine__Alternatives");
			builder.put(grammarAccess.getInstructionLineAccess().getAlternatives_2(), "rule__InstructionLine__Alternatives_2");
			builder.put(grammarAccess.getAsrInstructionAccess().getAlternatives(), "rule__AsrInstruction__Alternatives");
			builder.put(grammarAccess.getAsrInstructionAccess().getInstructionAlternatives_0_0(), "rule__AsrInstruction__InstructionAlternatives_0_0");
			builder.put(grammarAccess.getAsrInstructionAccess().getOperandAlternatives_1_2_0(), "rule__AsrInstruction__OperandAlternatives_1_2_0");
			builder.put(grammarAccess.getAslInstructionAccess().getAlternatives(), "rule__AslInstruction__Alternatives");
			builder.put(grammarAccess.getAslInstructionAccess().getInstructionAlternatives_0_0(), "rule__AslInstruction__InstructionAlternatives_0_0");
			builder.put(grammarAccess.getAslInstructionAccess().getOperandAlternatives_1_2_0(), "rule__AslInstruction__OperandAlternatives_1_2_0");
			builder.put(grammarAccess.getAndInstructionAccess().getInstructionAlternatives_0_0(), "rule__AndInstruction__InstructionAlternatives_0_0");
			builder.put(grammarAccess.getAndInstructionAccess().getOperandAlternatives_2_0(), "rule__AndInstruction__OperandAlternatives_2_0");
			builder.put(grammarAccess.getAdddInstructionAccess().getOperandAlternatives_2_0(), "rule__AdddInstruction__OperandAlternatives_2_0");
			builder.put(grammarAccess.getAddInstructionAccess().getInstructionAlternatives_0_0(), "rule__AddInstruction__InstructionAlternatives_0_0");
			builder.put(grammarAccess.getAddInstructionAccess().getOperandAlternatives_2_0(), "rule__AddInstruction__OperandAlternatives_2_0");
			builder.put(grammarAccess.getAdcInstructionAccess().getInstructionAlternatives_0_0(), "rule__AdcInstruction__InstructionAlternatives_0_0");
			builder.put(grammarAccess.getAdcInstructionAccess().getOperandAlternatives_2_0(), "rule__AdcInstruction__OperandAlternatives_2_0");
			builder.put(grammarAccess.getIndexedOperandAccess().getAlternatives(), "rule__IndexedOperand__Alternatives");
			builder.put(grammarAccess.getConstantIndexedModeAccess().getRegisterAlternatives_2_0(), "rule__ConstantIndexedMode__RegisterAlternatives_2_0");
			builder.put(grammarAccess.getConstantIndexedMovingIndirectModeAccess().getRegisterAlternatives_3_0(), "rule__ConstantIndexedMovingIndirectMode__RegisterAlternatives_3_0");
			builder.put(grammarAccess.getAccumulatorMovingModeAccess().getDeplacementAlternatives_0_0(), "rule__AccumulatorMovingMode__DeplacementAlternatives_0_0");
			builder.put(grammarAccess.getAccumulatorMovingModeAccess().getRegisterAlternatives_2_0(), "rule__AccumulatorMovingMode__RegisterAlternatives_2_0");
			builder.put(grammarAccess.getAccumulatorMovingIndirectModeAccess().getDeplacementAlternatives_1_0(), "rule__AccumulatorMovingIndirectMode__DeplacementAlternatives_1_0");
			builder.put(grammarAccess.getAccumulatorMovingIndirectModeAccess().getRegisterAlternatives_3_0(), "rule__AccumulatorMovingIndirectMode__RegisterAlternatives_3_0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getAlternatives_2(), "rule__AutoIncDecMode__Alternatives_2");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getAlternatives_2_0_0(), "rule__AutoIncDecMode__Alternatives_2_0_0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getRegisterAlternatives_2_0_1_0(), "rule__AutoIncDecMode__RegisterAlternatives_2_0_1_0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getRegisterAlternatives_2_1_0_0(), "rule__AutoIncDecMode__RegisterAlternatives_2_1_0_0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getAlternatives_2_1_1(), "rule__AutoIncDecMode__Alternatives_2_1_1");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getAlternatives_3(), "rule__AutoIncDecIndirectMode__Alternatives_3");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getAlternatives_3_0_0(), "rule__AutoIncDecIndirectMode__Alternatives_3_0_0");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterAlternatives_3_0_1_0(), "rule__AutoIncDecIndirectMode__RegisterAlternatives_3_0_1_0");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterAlternatives_3_1_0_0(), "rule__AutoIncDecIndirectMode__RegisterAlternatives_3_1_0_0");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getAlternatives_3_1_1(), "rule__AutoIncDecIndirectMode__Alternatives_3_1_1");
			builder.put(grammarAccess.getDirectiveLineAccess().getAlternatives_2(), "rule__DirectiveLine__Alternatives_2");
			builder.put(grammarAccess.getNamDirectiveAccess().getAlternatives_0(), "rule__NamDirective__Alternatives_0");
			builder.put(grammarAccess.getSetDirectiveAccess().getAlternatives_2(), "rule__SetDirective__Alternatives_2");
			builder.put(grammarAccess.getBszDirectiveAccess().getDirectiveAlternatives_0_0(), "rule__BszDirective__DirectiveAlternatives_0_0");
			builder.put(grammarAccess.getEndDirectiveAccess().getAlternatives_1_1(), "rule__EndDirective__Alternatives_1_1");
			builder.put(grammarAccess.getOrgDirectiveAccess().getAlternatives_1_1(), "rule__OrgDirective__Alternatives_1_1");
			builder.put(grammarAccess.getEquDirectiveAccess().getAlternatives_2(), "rule__EquDirective__Alternatives_2");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getNumericalValueAccess().getAlternatives(), "rule__NumericalValue__Alternatives");
			builder.put(grammarAccess.getDecimalValueAccess().getSignAlternatives_0_0(), "rule__DecimalValue__SignAlternatives_0_0");
			builder.put(grammarAccess.getEndOfLineAccess().getAlternatives(), "rule__EndOfLine__Alternatives");
			builder.put(grammarAccess.getAssemblyOptionAccess().getAlternatives(), "rule__AssemblyOption__Alternatives");
			builder.put(grammarAccess.getRegisterAccess().getAlternatives(), "rule__Register__Alternatives");
			builder.put(grammarAccess.getBlankLineAccess().getGroup(), "rule__BlankLine__Group__0");
			builder.put(grammarAccess.getCommentLineAccess().getGroup(), "rule__CommentLine__Group__0");
			builder.put(grammarAccess.getInstructionLineAccess().getGroup(), "rule__InstructionLine__Group__0");
			builder.put(grammarAccess.getInstructionLineAccess().getGroup_3(), "rule__InstructionLine__Group_3__0");
			builder.put(grammarAccess.getAsrInstructionAccess().getGroup_1(), "rule__AsrInstruction__Group_1__0");
			builder.put(grammarAccess.getAslInstructionAccess().getGroup_1(), "rule__AslInstruction__Group_1__0");
			builder.put(grammarAccess.getAndCCInstructionAccess().getGroup(), "rule__AndCCInstruction__Group__0");
			builder.put(grammarAccess.getAndInstructionAccess().getGroup(), "rule__AndInstruction__Group__0");
			builder.put(grammarAccess.getAdddInstructionAccess().getGroup(), "rule__AdddInstruction__Group__0");
			builder.put(grammarAccess.getAddInstructionAccess().getGroup(), "rule__AddInstruction__Group__0");
			builder.put(grammarAccess.getAdcInstructionAccess().getGroup(), "rule__AdcInstruction__Group__0");
			builder.put(grammarAccess.getExtendedIndirectOperandAccess().getGroup(), "rule__ExtendedIndirectOperand__Group__0");
			builder.put(grammarAccess.getExtendedOperandAccess().getGroup(), "rule__ExtendedOperand__Group__0");
			builder.put(grammarAccess.getDirectOperandAccess().getGroup(), "rule__DirectOperand__Group__0");
			builder.put(grammarAccess.getImmediatOperandAccess().getGroup(), "rule__ImmediatOperand__Group__0");
			builder.put(grammarAccess.getConstantIndexedModeAccess().getGroup(), "rule__ConstantIndexedMode__Group__0");
			builder.put(grammarAccess.getConstantIndexedMovingIndirectModeAccess().getGroup(), "rule__ConstantIndexedMovingIndirectMode__Group__0");
			builder.put(grammarAccess.getAccumulatorMovingModeAccess().getGroup(), "rule__AccumulatorMovingMode__Group__0");
			builder.put(grammarAccess.getAccumulatorMovingIndirectModeAccess().getGroup(), "rule__AccumulatorMovingIndirectMode__Group__0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getGroup(), "rule__AutoIncDecMode__Group__0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getGroup_2_0(), "rule__AutoIncDecMode__Group_2_0__0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getGroup_2_1(), "rule__AutoIncDecMode__Group_2_1__0");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getGroup(), "rule__AutoIncDecIndirectMode__Group__0");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getGroup_3_0(), "rule__AutoIncDecIndirectMode__Group_3_0__0");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getGroup_3_1(), "rule__AutoIncDecIndirectMode__Group_3_1__0");
			builder.put(grammarAccess.getRelatifToPCModeAccess().getGroup(), "rule__RelatifToPCMode__Group__0");
			builder.put(grammarAccess.getRelatifToPCIndirectModeAccess().getGroup(), "rule__RelatifToPCIndirectMode__Group__0");
			builder.put(grammarAccess.getDirectiveLineAccess().getGroup(), "rule__DirectiveLine__Group__0");
			builder.put(grammarAccess.getDirectiveLineAccess().getGroup_3(), "rule__DirectiveLine__Group_3__0");
			builder.put(grammarAccess.getFccDirectiveAccess().getGroup(), "rule__FccDirective__Group__0");
			builder.put(grammarAccess.getFccDirectiveAccess().getGroup_1(), "rule__FccDirective__Group_1__0");
			builder.put(grammarAccess.getRegDirectiveAccess().getGroup(), "rule__RegDirective__Group__0");
			builder.put(grammarAccess.getRegDirectiveAccess().getGroup_1(), "rule__RegDirective__Group_1__0");
			builder.put(grammarAccess.getRegDirectiveAccess().getGroup_1_2(), "rule__RegDirective__Group_1_2__0");
			builder.put(grammarAccess.getSpcDirectiveAccess().getGroup(), "rule__SpcDirective__Group__0");
			builder.put(grammarAccess.getSpcDirectiveAccess().getGroup_1(), "rule__SpcDirective__Group_1__0");
			builder.put(grammarAccess.getSpcDirectiveAccess().getGroup_1_2(), "rule__SpcDirective__Group_1_2__0");
			builder.put(grammarAccess.getNamDirectiveAccess().getGroup(), "rule__NamDirective__Group__0");
			builder.put(grammarAccess.getPagDirectiveAccess().getGroup(), "rule__PagDirective__Group__0");
			builder.put(grammarAccess.getPagDirectiveAccess().getGroup_1(), "rule__PagDirective__Group_1__0");
			builder.put(grammarAccess.getOptDirectiveAccess().getGroup(), "rule__OptDirective__Group__0");
			builder.put(grammarAccess.getOptDirectiveAccess().getGroup_1(), "rule__OptDirective__Group_1__0");
			builder.put(grammarAccess.getOptDirectiveAccess().getGroup_1_2(), "rule__OptDirective__Group_1_2__0");
			builder.put(grammarAccess.getSetDirectiveAccess().getGroup(), "rule__SetDirective__Group__0");
			builder.put(grammarAccess.getSetDirectiveAccess().getGroup_2_0(), "rule__SetDirective__Group_2_0__0");
			builder.put(grammarAccess.getFillDirectiveAccess().getGroup(), "rule__FillDirective__Group__0");
			builder.put(grammarAccess.getFillDirectiveAccess().getGroup_1(), "rule__FillDirective__Group_1__0");
			builder.put(grammarAccess.getBszDirectiveAccess().getGroup(), "rule__BszDirective__Group__0");
			builder.put(grammarAccess.getBszDirectiveAccess().getGroup_1(), "rule__BszDirective__Group_1__0");
			builder.put(grammarAccess.getFdbDirectiveAccess().getGroup(), "rule__FdbDirective__Group__0");
			builder.put(grammarAccess.getFdbDirectiveAccess().getGroup_1(), "rule__FdbDirective__Group_1__0");
			builder.put(grammarAccess.getFcbDirectiveAccess().getGroup(), "rule__FcbDirective__Group__0");
			builder.put(grammarAccess.getFcbDirectiveAccess().getGroup_1(), "rule__FcbDirective__Group_1__0");
			builder.put(grammarAccess.getRmbDirectiveAccess().getGroup(), "rule__RmbDirective__Group__0");
			builder.put(grammarAccess.getRmbDirectiveAccess().getGroup_1(), "rule__RmbDirective__Group_1__0");
			builder.put(grammarAccess.getRmbDirectiveAccess().getGroup_1_1(), "rule__RmbDirective__Group_1_1__0");
			builder.put(grammarAccess.getEndDirectiveAccess().getGroup(), "rule__EndDirective__Group__0");
			builder.put(grammarAccess.getEndDirectiveAccess().getGroup_1(), "rule__EndDirective__Group_1__0");
			builder.put(grammarAccess.getEndDirectiveAccess().getGroup_1_1_0(), "rule__EndDirective__Group_1_1_0__0");
			builder.put(grammarAccess.getOrgDirectiveAccess().getGroup(), "rule__OrgDirective__Group__0");
			builder.put(grammarAccess.getOrgDirectiveAccess().getGroup_1(), "rule__OrgDirective__Group_1__0");
			builder.put(grammarAccess.getOrgDirectiveAccess().getGroup_1_1_0(), "rule__OrgDirective__Group_1_1_0__0");
			builder.put(grammarAccess.getEquDirectiveAccess().getGroup(), "rule__EquDirective__Group__0");
			builder.put(grammarAccess.getEquDirectiveAccess().getGroup_2_0(), "rule__EquDirective__Group_2_0__0");
			builder.put(grammarAccess.getListOfExpressionAccess().getGroup(), "rule__ListOfExpression__Group__0");
			builder.put(grammarAccess.getListOfExpressionAccess().getGroup_1(), "rule__ListOfExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getDivisionAccess().getGroup(), "rule__Division__Group__0");
			builder.put(grammarAccess.getDivisionAccess().getGroup_1(), "rule__Division__Group_1__0");
			builder.put(grammarAccess.getModuloAccess().getGroup(), "rule__Modulo__Group__0");
			builder.put(grammarAccess.getModuloAccess().getGroup_1(), "rule__Modulo__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getSubstractionAccess().getGroup(), "rule__Substraction__Group__0");
			builder.put(grammarAccess.getSubstractionAccess().getGroup_1(), "rule__Substraction__Group_1__0");
			builder.put(grammarAccess.getLeftShiftAccess().getGroup(), "rule__LeftShift__Group__0");
			builder.put(grammarAccess.getLeftShiftAccess().getGroup_1(), "rule__LeftShift__Group_1__0");
			builder.put(grammarAccess.getRightShiftAccess().getGroup(), "rule__RightShift__Group__0");
			builder.put(grammarAccess.getRightShiftAccess().getGroup_1(), "rule__RightShift__Group_1__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getXorAccess().getGroup(), "rule__Xor__Group__0");
			builder.put(grammarAccess.getXorAccess().getGroup_1(), "rule__Xor__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_6(), "rule__Primary__Group_6__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_7(), "rule__Primary__Group_7__0");
			builder.put(grammarAccess.getDecimalValueAccess().getGroup(), "rule__DecimalValue__Group__0");
			builder.put(grammarAccess.getModelAccess().getSourceLinesAssignment(), "rule__Model__SourceLinesAssignment");
			builder.put(grammarAccess.getSourceLineAccess().getLineContentAssignment_0(), "rule__SourceLine__LineContentAssignment_0");
			builder.put(grammarAccess.getSourceLineAccess().getLineContentAssignment_1(), "rule__SourceLine__LineContentAssignment_1");
			builder.put(grammarAccess.getSourceLineAccess().getLineContentAssignment_2(), "rule__SourceLine__LineContentAssignment_2");
			builder.put(grammarAccess.getSourceLineAccess().getLineContentAssignment_3(), "rule__SourceLine__LineContentAssignment_3");
			builder.put(grammarAccess.getBlankLineAccess().getBlankLineAssignment_1(), "rule__BlankLine__BlankLineAssignment_1");
			builder.put(grammarAccess.getCommentLineAccess().getCommentAssignment_0(), "rule__CommentLine__CommentAssignment_0");
			builder.put(grammarAccess.getInstructionLineAccess().getNameAssignment_0(), "rule__InstructionLine__NameAssignment_0");
			builder.put(grammarAccess.getInstructionLineAccess().getInstructionAssignment_2_0(), "rule__InstructionLine__InstructionAssignment_2_0");
			builder.put(grammarAccess.getInstructionLineAccess().getInstructionAssignment_2_1(), "rule__InstructionLine__InstructionAssignment_2_1");
			builder.put(grammarAccess.getInstructionLineAccess().getInstructionAssignment_2_2(), "rule__InstructionLine__InstructionAssignment_2_2");
			builder.put(grammarAccess.getInstructionLineAccess().getInstructionAssignment_2_3(), "rule__InstructionLine__InstructionAssignment_2_3");
			builder.put(grammarAccess.getInstructionLineAccess().getInstructionAssignment_2_4(), "rule__InstructionLine__InstructionAssignment_2_4");
			builder.put(grammarAccess.getInstructionLineAccess().getInstructionAssignment_2_5(), "rule__InstructionLine__InstructionAssignment_2_5");
			builder.put(grammarAccess.getInstructionLineAccess().getInstructionAssignment_2_6(), "rule__InstructionLine__InstructionAssignment_2_6");
			builder.put(grammarAccess.getInstructionLineAccess().getInstructionAssignment_2_7(), "rule__InstructionLine__InstructionAssignment_2_7");
			builder.put(grammarAccess.getInstructionLineAccess().getCommentAssignment_3_1(), "rule__InstructionLine__CommentAssignment_3_1");
			builder.put(grammarAccess.getAsrInstructionAccess().getInstructionAssignment_0(), "rule__AsrInstruction__InstructionAssignment_0");
			builder.put(grammarAccess.getAsrInstructionAccess().getInstructionAssignment_1_0(), "rule__AsrInstruction__InstructionAssignment_1_0");
			builder.put(grammarAccess.getAsrInstructionAccess().getOperandAssignment_1_2(), "rule__AsrInstruction__OperandAssignment_1_2");
			builder.put(grammarAccess.getAslInstructionAccess().getInstructionAssignment_0(), "rule__AslInstruction__InstructionAssignment_0");
			builder.put(grammarAccess.getAslInstructionAccess().getInstructionAssignment_1_0(), "rule__AslInstruction__InstructionAssignment_1_0");
			builder.put(grammarAccess.getAslInstructionAccess().getOperandAssignment_1_2(), "rule__AslInstruction__OperandAssignment_1_2");
			builder.put(grammarAccess.getAndCCInstructionAccess().getInstructionAssignment_0(), "rule__AndCCInstruction__InstructionAssignment_0");
			builder.put(grammarAccess.getAndCCInstructionAccess().getOperandAssignment_2(), "rule__AndCCInstruction__OperandAssignment_2");
			builder.put(grammarAccess.getAndInstructionAccess().getInstructionAssignment_0(), "rule__AndInstruction__InstructionAssignment_0");
			builder.put(grammarAccess.getAndInstructionAccess().getOperandAssignment_2(), "rule__AndInstruction__OperandAssignment_2");
			builder.put(grammarAccess.getAdddInstructionAccess().getInstructionAssignment_0(), "rule__AdddInstruction__InstructionAssignment_0");
			builder.put(grammarAccess.getAdddInstructionAccess().getOperandAssignment_2(), "rule__AdddInstruction__OperandAssignment_2");
			builder.put(grammarAccess.getAddInstructionAccess().getInstructionAssignment_0(), "rule__AddInstruction__InstructionAssignment_0");
			builder.put(grammarAccess.getAddInstructionAccess().getOperandAssignment_2(), "rule__AddInstruction__OperandAssignment_2");
			builder.put(grammarAccess.getAdcInstructionAccess().getInstructionAssignment_0(), "rule__AdcInstruction__InstructionAssignment_0");
			builder.put(grammarAccess.getAdcInstructionAccess().getOperandAssignment_2(), "rule__AdcInstruction__OperandAssignment_2");
			builder.put(grammarAccess.getAbxInstructionAccess().getInstructionAssignment(), "rule__AbxInstruction__InstructionAssignment");
			builder.put(grammarAccess.getExtendedIndirectOperandAccess().getOperandAssignment_1(), "rule__ExtendedIndirectOperand__OperandAssignment_1");
			builder.put(grammarAccess.getExtendedOperandAccess().getOperandAssignment_1(), "rule__ExtendedOperand__OperandAssignment_1");
			builder.put(grammarAccess.getDirectOperandAccess().getOperandAssignment_1(), "rule__DirectOperand__OperandAssignment_1");
			builder.put(grammarAccess.getImmediatOperandAccess().getOperandAssignment_1(), "rule__ImmediatOperand__OperandAssignment_1");
			builder.put(grammarAccess.getIndexedOperandAccess().getModeAssignment_0(), "rule__IndexedOperand__ModeAssignment_0");
			builder.put(grammarAccess.getIndexedOperandAccess().getModeAssignment_1(), "rule__IndexedOperand__ModeAssignment_1");
			builder.put(grammarAccess.getIndexedOperandAccess().getModeAssignment_2(), "rule__IndexedOperand__ModeAssignment_2");
			builder.put(grammarAccess.getIndexedOperandAccess().getModeAssignment_3(), "rule__IndexedOperand__ModeAssignment_3");
			builder.put(grammarAccess.getIndexedOperandAccess().getModeAssignment_4(), "rule__IndexedOperand__ModeAssignment_4");
			builder.put(grammarAccess.getIndexedOperandAccess().getModeAssignment_5(), "rule__IndexedOperand__ModeAssignment_5");
			builder.put(grammarAccess.getIndexedOperandAccess().getModeAssignment_6(), "rule__IndexedOperand__ModeAssignment_6");
			builder.put(grammarAccess.getIndexedOperandAccess().getModeAssignment_7(), "rule__IndexedOperand__ModeAssignment_7");
			builder.put(grammarAccess.getConstantIndexedModeAccess().getDeplacementAssignment_0(), "rule__ConstantIndexedMode__DeplacementAssignment_0");
			builder.put(grammarAccess.getConstantIndexedModeAccess().getRegisterAssignment_2(), "rule__ConstantIndexedMode__RegisterAssignment_2");
			builder.put(grammarAccess.getConstantIndexedMovingIndirectModeAccess().getDeplacementAssignment_1(), "rule__ConstantIndexedMovingIndirectMode__DeplacementAssignment_1");
			builder.put(grammarAccess.getConstantIndexedMovingIndirectModeAccess().getRegisterAssignment_3(), "rule__ConstantIndexedMovingIndirectMode__RegisterAssignment_3");
			builder.put(grammarAccess.getAccumulatorMovingModeAccess().getDeplacementAssignment_0(), "rule__AccumulatorMovingMode__DeplacementAssignment_0");
			builder.put(grammarAccess.getAccumulatorMovingModeAccess().getRegisterAssignment_2(), "rule__AccumulatorMovingMode__RegisterAssignment_2");
			builder.put(grammarAccess.getAccumulatorMovingIndirectModeAccess().getDeplacementAssignment_1(), "rule__AccumulatorMovingIndirectMode__DeplacementAssignment_1");
			builder.put(grammarAccess.getAccumulatorMovingIndirectModeAccess().getRegisterAssignment_3(), "rule__AccumulatorMovingIndirectMode__RegisterAssignment_3");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getDeplacementAssignment_0(), "rule__AutoIncDecMode__DeplacementAssignment_0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getDecrementAssignment_2_0_0_0(), "rule__AutoIncDecMode__DecrementAssignment_2_0_0_0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getDecrementAssignment_2_0_0_1(), "rule__AutoIncDecMode__DecrementAssignment_2_0_0_1");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getRegisterAssignment_2_0_1(), "rule__AutoIncDecMode__RegisterAssignment_2_0_1");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getRegisterAssignment_2_1_0(), "rule__AutoIncDecMode__RegisterAssignment_2_1_0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getIncrementAssignment_2_1_1_0(), "rule__AutoIncDecMode__IncrementAssignment_2_1_1_0");
			builder.put(grammarAccess.getAutoIncDecModeAccess().getIncrementAssignment_2_1_1_1(), "rule__AutoIncDecMode__IncrementAssignment_2_1_1_1");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getDeplacementAssignment_1(), "rule__AutoIncDecIndirectMode__DeplacementAssignment_1");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getDecrementAssignment_3_0_0_0(), "rule__AutoIncDecIndirectMode__DecrementAssignment_3_0_0_0");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getDecrementAssignment_3_0_0_1(), "rule__AutoIncDecIndirectMode__DecrementAssignment_3_0_0_1");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterAssignment_3_0_1(), "rule__AutoIncDecIndirectMode__RegisterAssignment_3_0_1");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getRegisterAssignment_3_1_0(), "rule__AutoIncDecIndirectMode__RegisterAssignment_3_1_0");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getIncrementAssignment_3_1_1_0(), "rule__AutoIncDecIndirectMode__IncrementAssignment_3_1_1_0");
			builder.put(grammarAccess.getAutoIncDecIndirectModeAccess().getIncrementAssignment_3_1_1_1(), "rule__AutoIncDecIndirectMode__IncrementAssignment_3_1_1_1");
			builder.put(grammarAccess.getRelatifToPCModeAccess().getDeplacementAssignment_0(), "rule__RelatifToPCMode__DeplacementAssignment_0");
			builder.put(grammarAccess.getRelatifToPCModeAccess().getRegisterAssignment_2(), "rule__RelatifToPCMode__RegisterAssignment_2");
			builder.put(grammarAccess.getRelatifToPCIndirectModeAccess().getDeplacementAssignment_1(), "rule__RelatifToPCIndirectMode__DeplacementAssignment_1");
			builder.put(grammarAccess.getRelatifToPCIndirectModeAccess().getRegisterAssignment_3(), "rule__RelatifToPCIndirectMode__RegisterAssignment_3");
			builder.put(grammarAccess.getDirectiveLineAccess().getNameAssignment_0(), "rule__DirectiveLine__NameAssignment_0");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_0(), "rule__DirectiveLine__DirectiveAssignment_2_0");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_1(), "rule__DirectiveLine__DirectiveAssignment_2_1");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_2(), "rule__DirectiveLine__DirectiveAssignment_2_2");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_3(), "rule__DirectiveLine__DirectiveAssignment_2_3");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_4(), "rule__DirectiveLine__DirectiveAssignment_2_4");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_5(), "rule__DirectiveLine__DirectiveAssignment_2_5");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_6(), "rule__DirectiveLine__DirectiveAssignment_2_6");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_7(), "rule__DirectiveLine__DirectiveAssignment_2_7");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_8(), "rule__DirectiveLine__DirectiveAssignment_2_8");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_9(), "rule__DirectiveLine__DirectiveAssignment_2_9");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_10(), "rule__DirectiveLine__DirectiveAssignment_2_10");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_11(), "rule__DirectiveLine__DirectiveAssignment_2_11");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_12(), "rule__DirectiveLine__DirectiveAssignment_2_12");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_13(), "rule__DirectiveLine__DirectiveAssignment_2_13");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_14(), "rule__DirectiveLine__DirectiveAssignment_2_14");
			builder.put(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment_2_15(), "rule__DirectiveLine__DirectiveAssignment_2_15");
			builder.put(grammarAccess.getDirectiveLineAccess().getCommentAssignment_3_1(), "rule__DirectiveLine__CommentAssignment_3_1");
			builder.put(grammarAccess.getFccDirectiveAccess().getDirectiveAssignment_0(), "rule__FccDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getFccDirectiveAccess().getStringAssignment_1_1(), "rule__FccDirective__StringAssignment_1_1");
			builder.put(grammarAccess.getRegDirectiveAccess().getDirectiveAssignment_0(), "rule__RegDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getRegDirectiveAccess().getOptionsAssignment_1_1(), "rule__RegDirective__OptionsAssignment_1_1");
			builder.put(grammarAccess.getRegDirectiveAccess().getOptionsAssignment_1_2_1(), "rule__RegDirective__OptionsAssignment_1_2_1");
			builder.put(grammarAccess.getSpcDirectiveAccess().getDirectiveAssignment_0(), "rule__SpcDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getSpcDirectiveAccess().getSpaceCountAssignment_1_1(), "rule__SpcDirective__SpaceCountAssignment_1_1");
			builder.put(grammarAccess.getSpcDirectiveAccess().getKeepCountAssignment_1_2_1(), "rule__SpcDirective__KeepCountAssignment_1_2_1");
			builder.put(grammarAccess.getNamDirectiveAccess().getDirectiveAssignment_0_0(), "rule__NamDirective__DirectiveAssignment_0_0");
			builder.put(grammarAccess.getNamDirectiveAccess().getDirectiveAssignment_0_1(), "rule__NamDirective__DirectiveAssignment_0_1");
			builder.put(grammarAccess.getNamDirectiveAccess().getOperandAssignment_2(), "rule__NamDirective__OperandAssignment_2");
			builder.put(grammarAccess.getPagDirectiveAccess().getDirectiveAssignment_0(), "rule__PagDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getPagDirectiveAccess().getOperandAssignment_1_1(), "rule__PagDirective__OperandAssignment_1_1");
			builder.put(grammarAccess.getOptDirectiveAccess().getDirectiveAssignment_0(), "rule__OptDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getOptDirectiveAccess().getOptionsAssignment_1_1(), "rule__OptDirective__OptionsAssignment_1_1");
			builder.put(grammarAccess.getOptDirectiveAccess().getOptionsAssignment_1_2_1(), "rule__OptDirective__OptionsAssignment_1_2_1");
			builder.put(grammarAccess.getFailDirectiveAccess().getDirectiveAssignment(), "rule__FailDirective__DirectiveAssignment");
			builder.put(grammarAccess.getSetDirectiveAccess().getDirectiveAssignment_0(), "rule__SetDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getSetDirectiveAccess().getIsRelativeToPCAssignment_2_0_0(), "rule__SetDirective__IsRelativeToPCAssignment_2_0_0");
			builder.put(grammarAccess.getSetDirectiveAccess().getOperandAssignment_2_0_1(), "rule__SetDirective__OperandAssignment_2_0_1");
			builder.put(grammarAccess.getSetDirectiveAccess().getIsRelativeToPCAssignment_2_1(), "rule__SetDirective__IsRelativeToPCAssignment_2_1");
			builder.put(grammarAccess.getFillDirectiveAccess().getDirectiveAssignment_0(), "rule__FillDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getFillDirectiveAccess().getValueAssignment_1_1(), "rule__FillDirective__ValueAssignment_1_1");
			builder.put(grammarAccess.getFillDirectiveAccess().getNumberAssignment_1_3(), "rule__FillDirective__NumberAssignment_1_3");
			builder.put(grammarAccess.getBszDirectiveAccess().getDirectiveAssignment_0(), "rule__BszDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getBszDirectiveAccess().getOperandAssignment_1_1(), "rule__BszDirective__OperandAssignment_1_1");
			builder.put(grammarAccess.getFdbDirectiveAccess().getDirectiveAssignment_0(), "rule__FdbDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getFdbDirectiveAccess().getOperandAssignment_1_1(), "rule__FdbDirective__OperandAssignment_1_1");
			builder.put(grammarAccess.getFcbDirectiveAccess().getDirectiveAssignment_0(), "rule__FcbDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getFcbDirectiveAccess().getOperandAssignment_1_1(), "rule__FcbDirective__OperandAssignment_1_1");
			builder.put(grammarAccess.getRmbDirectiveAccess().getDirectiveAssignment_0(), "rule__RmbDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getRmbDirectiveAccess().getIsRelativeToPCAssignment_1_1_0(), "rule__RmbDirective__IsRelativeToPCAssignment_1_1_0");
			builder.put(grammarAccess.getRmbDirectiveAccess().getOperandAssignment_1_1_1(), "rule__RmbDirective__OperandAssignment_1_1_1");
			builder.put(grammarAccess.getEndDirectiveAccess().getDirectiveAssignment_0(), "rule__EndDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getEndDirectiveAccess().getIsRelativeToPCAssignment_1_1_0_0(), "rule__EndDirective__IsRelativeToPCAssignment_1_1_0_0");
			builder.put(grammarAccess.getEndDirectiveAccess().getOperandAssignment_1_1_0_1(), "rule__EndDirective__OperandAssignment_1_1_0_1");
			builder.put(grammarAccess.getEndDirectiveAccess().getIsRelativeToPCAssignment_1_1_1(), "rule__EndDirective__IsRelativeToPCAssignment_1_1_1");
			builder.put(grammarAccess.getOrgDirectiveAccess().getDirectiveAssignment_0(), "rule__OrgDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getOrgDirectiveAccess().getIsRelativeToPCAssignment_1_1_0_0(), "rule__OrgDirective__IsRelativeToPCAssignment_1_1_0_0");
			builder.put(grammarAccess.getOrgDirectiveAccess().getOperandAssignment_1_1_0_1(), "rule__OrgDirective__OperandAssignment_1_1_0_1");
			builder.put(grammarAccess.getOrgDirectiveAccess().getIsRelativeToPCAssignment_1_1_1(), "rule__OrgDirective__IsRelativeToPCAssignment_1_1_1");
			builder.put(grammarAccess.getEquDirectiveAccess().getDirectiveAssignment_0(), "rule__EquDirective__DirectiveAssignment_0");
			builder.put(grammarAccess.getEquDirectiveAccess().getIsRelativeToPCAssignment_2_0_0(), "rule__EquDirective__IsRelativeToPCAssignment_2_0_0");
			builder.put(grammarAccess.getEquDirectiveAccess().getOperandAssignment_2_0_1(), "rule__EquDirective__OperandAssignment_2_0_1");
			builder.put(grammarAccess.getEquDirectiveAccess().getIsRelativeToPCAssignment_2_1(), "rule__EquDirective__IsRelativeToPCAssignment_2_1");
			builder.put(grammarAccess.getListOfExpressionAccess().getExpressionsAssignment_0(), "rule__ListOfExpression__ExpressionsAssignment_0");
			builder.put(grammarAccess.getListOfExpressionAccess().getExpressionsAssignment_1_1(), "rule__ListOfExpression__ExpressionsAssignment_1_1");
			builder.put(grammarAccess.getExpressionAccess().getOperandAssignment(), "rule__Expression__OperandAssignment");
			builder.put(grammarAccess.getMultiplicationAccess().getOperationAssignment_1_1(), "rule__Multiplication__OperationAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getDivisionAccess().getOpretationAssignment_1_1(), "rule__Division__OpretationAssignment_1_1");
			builder.put(grammarAccess.getDivisionAccess().getRightAssignment_1_2(), "rule__Division__RightAssignment_1_2");
			builder.put(grammarAccess.getModuloAccess().getOpretationAssignment_1_1(), "rule__Modulo__OpretationAssignment_1_1");
			builder.put(grammarAccess.getModuloAccess().getRightAssignment_1_2(), "rule__Modulo__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
			builder.put(grammarAccess.getSubstractionAccess().getRightAssignment_1_2(), "rule__Substraction__RightAssignment_1_2");
			builder.put(grammarAccess.getLeftShiftAccess().getRightAssignment_1_2(), "rule__LeftShift__RightAssignment_1_2");
			builder.put(grammarAccess.getRightShiftAccess().getRightAssignment_1_2(), "rule__RightShift__RightAssignment_1_2");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
			builder.put(grammarAccess.getXorAccess().getRightAssignment_1_2(), "rule__Xor__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_0(), "rule__Primary__ValueAssignment_0");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_1(), "rule__Primary__ValueAssignment_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_2(), "rule__Primary__ValueAssignment_2");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_3(), "rule__Primary__ValueAssignment_3");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_4(), "rule__Primary__ValueAssignment_4");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_5(), "rule__Primary__ValueAssignment_5");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_6_2(), "rule__Primary__ValueAssignment_6_2");
			builder.put(grammarAccess.getNumericalValueAccess().getValueAssignment_0(), "rule__NumericalValue__ValueAssignment_0");
			builder.put(grammarAccess.getNumericalValueAccess().getValueAssignment_1(), "rule__NumericalValue__ValueAssignment_1");
			builder.put(grammarAccess.getNumericalValueAccess().getValueAssignment_2(), "rule__NumericalValue__ValueAssignment_2");
			builder.put(grammarAccess.getNumericalValueAccess().getValueAssignment_3(), "rule__NumericalValue__ValueAssignment_3");
			builder.put(grammarAccess.getNumericalValueAccess().getValueAssignment_4(), "rule__NumericalValue__ValueAssignment_4");
			builder.put(grammarAccess.getNumericalValueAccess().getValueAssignment_5(), "rule__NumericalValue__ValueAssignment_5");
			builder.put(grammarAccess.getIdentifierValueAccess().getValueAssignment(), "rule__IdentifierValue__ValueAssignment");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
			builder.put(grammarAccess.getDecimalValueAccess().getSignAssignment_0(), "rule__DecimalValue__SignAssignment_0");
			builder.put(grammarAccess.getDecimalValueAccess().getValueAssignment_1(), "rule__DecimalValue__ValueAssignment_1");
			builder.put(grammarAccess.getHexaDecimalValueAccess().getValueAssignment(), "rule__HexaDecimalValue__ValueAssignment");
			builder.put(grammarAccess.getOctalValueAccess().getValueAssignment(), "rule__OctalValue__ValueAssignment");
			builder.put(grammarAccess.getBinaryValueAccess().getValueAssignment(), "rule__BinaryValue__ValueAssignment");
			builder.put(grammarAccess.getCharacterValueAccess().getValueAssignment(), "rule__CharacterValue__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AssemblerGrammarAccess grammarAccess;

	@Override
	protected InternalAssemblerParser createParser() {
		InternalAssemblerParser result = new InternalAssemblerParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public AssemblerGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AssemblerGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
