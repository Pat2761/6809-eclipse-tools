/*
 * generated by Xtext 2.28.0
 */
grammar InternalAssembler;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.bpy.electronics.mc6809.assembler.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.bpy.electronics.mc6809.assembler.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.bpy.electronics.mc6809.assembler.services.AssemblerGrammarAccess;

}
@parser::members {
	private AssemblerGrammarAccess grammarAccess;

	public void setGrammarAccess(AssemblerGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getSourceLinesAssignment()); }
		(rule__Model__SourceLinesAssignment)*
		{ after(grammarAccess.getModelAccess().getSourceLinesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSourceLine
entryRuleSourceLine
:
{ before(grammarAccess.getSourceLineRule()); }
	 ruleSourceLine
{ after(grammarAccess.getSourceLineRule()); } 
	 EOF 
;

// Rule SourceLine
ruleSourceLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSourceLineAccess().getAlternatives()); }
		(rule__SourceLine__Alternatives)
		{ after(grammarAccess.getSourceLineAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommentLine
entryRuleCommentLine
:
{ before(grammarAccess.getCommentLineRule()); }
	 ruleCommentLine
{ after(grammarAccess.getCommentLineRule()); } 
	 EOF 
;

// Rule CommentLine
ruleCommentLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommentLineAccess().getGroup()); }
		(rule__CommentLine__Group__0)
		{ after(grammarAccess.getCommentLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEmptyLine
entryRuleEmptyLine
:
{ before(grammarAccess.getEmptyLineRule()); }
	 ruleEmptyLine
{ after(grammarAccess.getEmptyLineRule()); } 
	 EOF 
;

// Rule EmptyLine
ruleEmptyLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmptyLineAccess().getGroup()); }
		(rule__EmptyLine__Group__0)
		{ after(grammarAccess.getEmptyLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceLine__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceLineAccess().getEmptyLineAssignment_0()); }
		(rule__SourceLine__EmptyLineAssignment_0)
		{ after(grammarAccess.getSourceLineAccess().getEmptyLineAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getSourceLineAccess().getCommentLineAssignment_1()); }
		(rule__SourceLine__CommentLineAssignment_1)
		{ after(grammarAccess.getSourceLineAccess().getCommentLineAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommentLine__Group__0__Impl
	rule__CommentLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentLineAccess().getWSTerminalRuleCall_0()); }
	(RULE_WS)?
	{ after(grammarAccess.getCommentLineAccess().getWSTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommentLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentLineAccess().getCommentAssignment_1()); }
	(rule__CommentLine__CommentAssignment_1)
	{ after(grammarAccess.getCommentLineAccess().getCommentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmptyLine__Group__0__Impl
	rule__EmptyLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmptyLineAccess().getWSTerminalRuleCall_0()); }
	(RULE_WS)?
	{ after(grammarAccess.getEmptyLineAccess().getWSTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmptyLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmptyLineAccess().getCRTerminalRuleCall_1()); }
	RULE_CR
	{ after(grammarAccess.getEmptyLineAccess().getCRTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__SourceLinesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSourceLinesSourceLineParserRuleCall_0()); }
		ruleSourceLine
		{ after(grammarAccess.getModelAccess().getSourceLinesSourceLineParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceLine__EmptyLineAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceLineAccess().getEmptyLineEmptyLineParserRuleCall_0_0()); }
		ruleEmptyLine
		{ after(grammarAccess.getSourceLineAccess().getEmptyLineEmptyLineParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceLine__CommentLineAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceLineAccess().getCommentLineCommentLineParserRuleCall_1_0()); }
		ruleCommentLine
		{ after(grammarAccess.getSourceLineAccess().getCommentLineCommentLineParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentLine__CommentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommentLineAccess().getCommentSL_COMMENTTerminalRuleCall_1_0()); }
		RULE_SL_COMMENT
		{ after(grammarAccess.getCommentLineAccess().getCommentSL_COMMENTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SL_COMMENT : ';' .* RULE_CR;

RULE_CR : '\r'? '\n';

RULE_WS : (' '|'\t')+;
