/*
 * generated by Xtext 2.29.0
 */
grammar InternalAssembler;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.bpy.electronics.mc6809.assembler.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.bpy.electronics.mc6809.assembler.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.bpy.electronics.mc6809.assembler.services.AssemblerGrammarAccess;

}
@parser::members {
	private AssemblerGrammarAccess grammarAccess;

	public void setGrammarAccess(AssemblerGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getSourceLinesAssignment()); }
		(rule__Model__SourceLinesAssignment)*
		{ after(grammarAccess.getModelAccess().getSourceLinesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSourceLine
entryRuleSourceLine
:
{ before(grammarAccess.getSourceLineRule()); }
	 ruleSourceLine
{ after(grammarAccess.getSourceLineRule()); } 
	 EOF 
;

// Rule SourceLine
ruleSourceLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSourceLineAccess().getAlternatives()); }
		(rule__SourceLine__Alternatives)
		{ after(grammarAccess.getSourceLineAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlankLine
entryRuleBlankLine
:
{ before(grammarAccess.getBlankLineRule()); }
	 ruleBlankLine
{ after(grammarAccess.getBlankLineRule()); } 
	 EOF 
;

// Rule BlankLine
ruleBlankLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlankLineAccess().getGroup()); }
		(rule__BlankLine__Group__0)
		{ after(grammarAccess.getBlankLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommentLine
entryRuleCommentLine
:
{ before(grammarAccess.getCommentLineRule()); }
	 ruleCommentLine
{ after(grammarAccess.getCommentLineRule()); } 
	 EOF 
;

// Rule CommentLine
ruleCommentLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommentLineAccess().getGroup()); }
		(rule__CommentLine__Group__0)
		{ after(grammarAccess.getCommentLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirectiveLine
entryRuleDirectiveLine
:
{ before(grammarAccess.getDirectiveLineRule()); }
	 ruleDirectiveLine
{ after(grammarAccess.getDirectiveLineRule()); } 
	 EOF 
;

// Rule DirectiveLine
ruleDirectiveLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment()); }
		(rule__DirectiveLine__DirectiveAssignment)
		{ after(grammarAccess.getDirectiveLineAccess().getDirectiveAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquDirective
entryRuleEquDirective
:
{ before(grammarAccess.getEquDirectiveRule()); }
	 ruleEquDirective
{ after(grammarAccess.getEquDirectiveRule()); } 
	 EOF 
;

// Rule EquDirective
ruleEquDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEquDirectiveAccess().getGroup()); }
		(rule__EquDirective__Group__0)
		{ after(grammarAccess.getEquDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperand
entryRuleOperand
:
{ before(grammarAccess.getOperandRule()); }
	 ruleOperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule Operand
ruleOperand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperandAccess().getAlternatives()); }
		(rule__Operand__Alternatives)
		{ after(grammarAccess.getOperandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivision
entryRuleDivision
:
{ before(grammarAccess.getDivisionRule()); }
	 ruleDivision
{ after(grammarAccess.getDivisionRule()); } 
	 EOF 
;

// Rule Division
ruleDivision 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivisionAccess().getGroup()); }
		(rule__Division__Group__0)
		{ after(grammarAccess.getDivisionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModulo
entryRuleModulo
:
{ before(grammarAccess.getModuloRule()); }
	 ruleModulo
{ after(grammarAccess.getModuloRule()); } 
	 EOF 
;

// Rule Modulo
ruleModulo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuloAccess().getGroup()); }
		(rule__Modulo__Group__0)
		{ after(grammarAccess.getModuloAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubstraction
entryRuleSubstraction
:
{ before(grammarAccess.getSubstractionRule()); }
	 ruleSubstraction
{ after(grammarAccess.getSubstractionRule()); } 
	 EOF 
;

// Rule Substraction
ruleSubstraction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubstractionAccess().getGroup()); }
		(rule__Substraction__Group__0)
		{ after(grammarAccess.getSubstractionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeftShift
entryRuleLeftShift
:
{ before(grammarAccess.getLeftShiftRule()); }
	 ruleLeftShift
{ after(grammarAccess.getLeftShiftRule()); } 
	 EOF 
;

// Rule LeftShift
ruleLeftShift 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftShiftAccess().getGroup()); }
		(rule__LeftShift__Group__0)
		{ after(grammarAccess.getLeftShiftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRigthShift
entryRuleRigthShift
:
{ before(grammarAccess.getRigthShiftRule()); }
	 ruleRigthShift
{ after(grammarAccess.getRigthShiftRule()); } 
	 EOF 
;

// Rule RigthShift
ruleRigthShift 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRigthShiftAccess().getGroup()); }
		(rule__RigthShift__Group__0)
		{ after(grammarAccess.getRigthShiftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegate
entryRuleNegate
:
{ before(grammarAccess.getNegateRule()); }
	 ruleNegate
{ after(grammarAccess.getNegateRule()); } 
	 EOF 
;

// Rule Negate
ruleNegate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegateAccess().getGroup()); }
		(rule__Negate__Group__0)
		{ after(grammarAccess.getNegateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXor
entryRuleXor
:
{ before(grammarAccess.getXorRule()); }
	 ruleXor
{ after(grammarAccess.getXorRule()); } 
	 EOF 
;

// Rule Xor
ruleXor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorAccess().getGroup()); }
		(rule__Xor__Group__0)
		{ after(grammarAccess.getXorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentifierValue
entryRuleIdentifierValue
:
{ before(grammarAccess.getIdentifierValueRule()); }
	 ruleIdentifierValue
{ after(grammarAccess.getIdentifierValueRule()); } 
	 EOF 
;

// Rule IdentifierValue
ruleIdentifierValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierValueAccess().getValueAssignment()); }
		(rule__IdentifierValue__ValueAssignment)
		{ after(grammarAccess.getIdentifierValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
		(rule__StringValue__ValueAssignment)
		{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecimalValue
entryRuleDecimalValue
:
{ before(grammarAccess.getDecimalValueRule()); }
	 ruleDecimalValue
{ after(grammarAccess.getDecimalValueRule()); } 
	 EOF 
;

// Rule DecimalValue
ruleDecimalValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecimalValueAccess().getValueAssignment()); }
		(rule__DecimalValue__ValueAssignment)
		{ after(grammarAccess.getDecimalValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHexaDecimalValue
entryRuleHexaDecimalValue
:
{ before(grammarAccess.getHexaDecimalValueRule()); }
	 ruleHexaDecimalValue
{ after(grammarAccess.getHexaDecimalValueRule()); } 
	 EOF 
;

// Rule HexaDecimalValue
ruleHexaDecimalValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHexaDecimalValueAccess().getValueAssignment()); }
		(rule__HexaDecimalValue__ValueAssignment)
		{ after(grammarAccess.getHexaDecimalValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOctalValue
entryRuleOctalValue
:
{ before(grammarAccess.getOctalValueRule()); }
	 ruleOctalValue
{ after(grammarAccess.getOctalValueRule()); } 
	 EOF 
;

// Rule OctalValue
ruleOctalValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOctalValueAccess().getValueAssignment()); }
		(rule__OctalValue__ValueAssignment)
		{ after(grammarAccess.getOctalValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryValue
entryRuleBinaryValue
:
{ before(grammarAccess.getBinaryValueRule()); }
	 ruleBinaryValue
{ after(grammarAccess.getBinaryValueRule()); } 
	 EOF 
;

// Rule BinaryValue
ruleBinaryValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryValueAccess().getValueAssignment()); }
		(rule__BinaryValue__ValueAssignment)
		{ after(grammarAccess.getBinaryValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCharacterValue
entryRuleCharacterValue
:
{ before(grammarAccess.getCharacterValueRule()); }
	 ruleCharacterValue
{ after(grammarAccess.getCharacterValueRule()); } 
	 EOF 
;

// Rule CharacterValue
ruleCharacterValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCharacterValueAccess().getValueAssignment()); }
		(rule__CharacterValue__ValueAssignment)
		{ after(grammarAccess.getCharacterValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEndOfLine
entryRuleEndOfLine
:
{ before(grammarAccess.getEndOfLineRule()); }
	 ruleEndOfLine
{ after(grammarAccess.getEndOfLineRule()); } 
	 EOF 
;

// Rule EndOfLine
ruleEndOfLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndOfLineAccess().getAlternatives()); }
		(rule__EndOfLine__Alternatives)
		{ after(grammarAccess.getEndOfLineAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceLine__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceLineAccess().getLineContentAssignment_0()); }
		(rule__SourceLine__LineContentAssignment_0)
		{ after(grammarAccess.getSourceLineAccess().getLineContentAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getSourceLineAccess().getLineContentAssignment_1()); }
		(rule__SourceLine__LineContentAssignment_1)
		{ after(grammarAccess.getSourceLineAccess().getLineContentAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getSourceLineAccess().getLineContentAssignment_2()); }
		(rule__SourceLine__LineContentAssignment_2)
		{ after(grammarAccess.getSourceLineAccess().getLineContentAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandAccess().getOperandAssignment_0()); }
		(rule__Operand__OperandAssignment_0)
		{ after(grammarAccess.getOperandAccess().getOperandAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperandAccess().getOperandAssignment_1()); }
		(rule__Operand__OperandAssignment_1)
		{ after(grammarAccess.getOperandAccess().getOperandAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueAssignment_0()); }
		(rule__Primary__ValueAssignment_0)
		{ after(grammarAccess.getPrimaryAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getValueAssignment_1()); }
		(rule__Primary__ValueAssignment_1)
		{ after(grammarAccess.getPrimaryAccess().getValueAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getValueAssignment_2()); }
		(rule__Primary__ValueAssignment_2)
		{ after(grammarAccess.getPrimaryAccess().getValueAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getValueAssignment_3()); }
		(rule__Primary__ValueAssignment_3)
		{ after(grammarAccess.getPrimaryAccess().getValueAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getValueAssignment_4()); }
		(rule__Primary__ValueAssignment_4)
		{ after(grammarAccess.getPrimaryAccess().getValueAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getValueAssignment_5()); }
		(rule__Primary__ValueAssignment_5)
		{ after(grammarAccess.getPrimaryAccess().getValueAssignment_5()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_6()); }
		(rule__Primary__Group_6__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndOfLine__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEndOfLineAccess().getCRTerminalRuleCall_0()); }
		RULE_CR
		{ after(grammarAccess.getEndOfLineAccess().getCRTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEndOfLineAccess().getEND_OF_FILETerminalRuleCall_1()); }
		RULE_END_OF_FILE
		{ after(grammarAccess.getEndOfLineAccess().getEND_OF_FILETerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlankLine__Group__0__Impl
	rule__BlankLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlankLineAccess().getBlankLineAction_0()); }
	()
	{ after(grammarAccess.getBlankLineAccess().getBlankLineAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlankLine__Group__1__Impl
	rule__BlankLine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlankLineAccess().getBlankLineAssignment_1()); }
	(rule__BlankLine__BlankLineAssignment_1)?
	{ after(grammarAccess.getBlankLineAccess().getBlankLineAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankLine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlankLine__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankLine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlankLineAccess().getEndOfLineParserRuleCall_2()); }
	ruleEndOfLine
	{ after(grammarAccess.getBlankLineAccess().getEndOfLineParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommentLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommentLine__Group__0__Impl
	rule__CommentLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentLineAccess().getCommentAssignment_0()); }
	(rule__CommentLine__CommentAssignment_0)
	{ after(grammarAccess.getCommentLineAccess().getCommentAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommentLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentLineAccess().getEndOfLineParserRuleCall_1()); }
	ruleEndOfLine
	{ after(grammarAccess.getCommentLineAccess().getEndOfLineParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquDirective__Group__0__Impl
	rule__EquDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquDirectiveAccess().getNameAssignment_0()); }
	(rule__EquDirective__NameAssignment_0)?
	{ after(grammarAccess.getEquDirectiveAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquDirective__Group__1__Impl
	rule__EquDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_1()); }
	RULE_WS
	{ after(grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquDirective__Group__2__Impl
	rule__EquDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquDirectiveAccess().getDirectiveAssignment_2()); }
	(rule__EquDirective__DirectiveAssignment_2)
	{ after(grammarAccess.getEquDirectiveAccess().getDirectiveAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquDirective__Group__3__Impl
	rule__EquDirective__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_3()); }
	RULE_WS
	{ after(grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquDirective__Group__4__Impl
	rule__EquDirective__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquDirectiveAccess().getOperandAssignment_4()); }
	(rule__EquDirective__OperandAssignment_4)?
	{ after(grammarAccess.getEquDirectiveAccess().getOperandAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquDirective__Group__5__Impl
	rule__EquDirective__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_5()); }
	(RULE_WS)?
	{ after(grammarAccess.getEquDirectiveAccess().getWSTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquDirective__Group__6__Impl
	rule__EquDirective__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquDirectiveAccess().getCommentAssignment_6()); }
	(rule__EquDirective__CommentAssignment_6)?
	{ after(grammarAccess.getEquDirectiveAccess().getCommentAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquDirective__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquDirectiveAccess().getEndOfLineParserRuleCall_7()); }
	ruleEndOfLine
	{ after(grammarAccess.getEquDirectiveAccess().getEndOfLineParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); }
	ruleDivision
	{ after(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperationAssignment_1_1()); }
	(rule__Multiplication__OperationAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__0__Impl
	rule__Division__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getModuloParserRuleCall_0()); }
	ruleModulo
	{ after(grammarAccess.getDivisionAccess().getModuloParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getGroup_1()); }
	(rule__Division__Group_1__0)*
	{ after(grammarAccess.getDivisionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group_1__0__Impl
	rule__Division__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group_1__1__Impl
	rule__Division__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getOpretationAssignment_1_1()); }
	(rule__Division__OpretationAssignment_1_1)
	{ after(grammarAccess.getDivisionAccess().getOpretationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getRightAssignment_1_2()); }
	(rule__Division__RightAssignment_1_2)
	{ after(grammarAccess.getDivisionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Modulo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modulo__Group__0__Impl
	rule__Modulo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuloAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
	{ after(grammarAccess.getModuloAccess().getAdditionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modulo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuloAccess().getGroup_1()); }
	(rule__Modulo__Group_1__0)*
	{ after(grammarAccess.getModuloAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Modulo__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modulo__Group_1__0__Impl
	rule__Modulo__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuloAccess().getModuloLeftAction_1_0()); }
	()
	{ after(grammarAccess.getModuloAccess().getModuloLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modulo__Group_1__1__Impl
	rule__Modulo__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuloAccess().getOpretationAssignment_1_1()); }
	(rule__Modulo__OpretationAssignment_1_1)
	{ after(grammarAccess.getModuloAccess().getOpretationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modulo__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuloAccess().getRightAssignment_1_2()); }
	(rule__Modulo__RightAssignment_1_2)
	{ after(grammarAccess.getModuloAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getSubstractionParserRuleCall_0()); }
	ruleSubstraction
	{ after(grammarAccess.getAdditionAccess().getSubstractionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
	'+'
	{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Substraction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substraction__Group__0__Impl
	rule__Substraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Substraction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstractionAccess().getLeftShiftParserRuleCall_0()); }
	ruleLeftShift
	{ after(grammarAccess.getSubstractionAccess().getLeftShiftParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substraction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substraction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Substraction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstractionAccess().getGroup_1()); }
	(rule__Substraction__Group_1__0)*
	{ after(grammarAccess.getSubstractionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Substraction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substraction__Group_1__0__Impl
	rule__Substraction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Substraction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstractionAccess().getSubstractionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getSubstractionAccess().getSubstractionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substraction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substraction__Group_1__1__Impl
	rule__Substraction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Substraction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstractionAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getSubstractionAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substraction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Substraction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Substraction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstractionAccess().getRightAssignment_1_2()); }
	(rule__Substraction__RightAssignment_1_2)
	{ after(grammarAccess.getSubstractionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeftShift__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group__0__Impl
	rule__LeftShift__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getRigthShiftParserRuleCall_0()); }
	ruleRigthShift
	{ after(grammarAccess.getLeftShiftAccess().getRigthShiftParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getGroup_1()); }
	(rule__LeftShift__Group_1__0)*
	{ after(grammarAccess.getLeftShiftAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeftShift__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group_1__0__Impl
	rule__LeftShift__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getLeftShiftLeftAction_1_0()); }
	()
	{ after(grammarAccess.getLeftShiftAccess().getLeftShiftLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group_1__1__Impl
	rule__LeftShift__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getLessThanSignLessThanSignKeyword_1_1()); }
	'<<'
	{ after(grammarAccess.getLeftShiftAccess().getLessThanSignLessThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftShift__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftShiftAccess().getRightAssignment_1_2()); }
	(rule__LeftShift__RightAssignment_1_2)
	{ after(grammarAccess.getLeftShiftAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RigthShift__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RigthShift__Group__0__Impl
	rule__RigthShift__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RigthShift__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRigthShiftAccess().getNegateParserRuleCall_0()); }
	ruleNegate
	{ after(grammarAccess.getRigthShiftAccess().getNegateParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RigthShift__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RigthShift__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RigthShift__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRigthShiftAccess().getGroup_1()); }
	(rule__RigthShift__Group_1__0)*
	{ after(grammarAccess.getRigthShiftAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RigthShift__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RigthShift__Group_1__0__Impl
	rule__RigthShift__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RigthShift__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRigthShiftAccess().getRigthShiftLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRigthShiftAccess().getRigthShiftLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RigthShift__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RigthShift__Group_1__1__Impl
	rule__RigthShift__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RigthShift__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRigthShiftAccess().getGreaterThanSignGreaterThanSignKeyword_1_1()); }
	'>>'
	{ after(grammarAccess.getRigthShiftAccess().getGreaterThanSignGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RigthShift__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RigthShift__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RigthShift__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRigthShiftAccess().getNegateAssignment_1_2()); }
	(rule__RigthShift__NegateAssignment_1_2)
	{ after(grammarAccess.getRigthShiftAccess().getNegateAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Negate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negate__Group__0__Impl
	rule__Negate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegateAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getNegateAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegateAccess().getGroup_1()); }
	(rule__Negate__Group_1__0)*
	{ after(grammarAccess.getNegateAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Negate__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negate__Group_1__0__Impl
	rule__Negate__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegateAccess().getNegateLeftAction_1_0()); }
	()
	{ after(grammarAccess.getNegateAccess().getNegateLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negate__Group_1__1__Impl
	rule__Negate__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegateAccess().getTildeKeyword_1_1()); }
	'~'
	{ after(grammarAccess.getNegateAccess().getTildeKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negate__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegateAccess().getRightAssignment_1_2()); }
	(rule__Negate__RightAssignment_1_2)
	{ after(grammarAccess.getNegateAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getOrParserRuleCall_0()); }
	ruleOr
	{ after(grammarAccess.getAndAccess().getOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getXorParserRuleCall_0()); }
	ruleXor
	{ after(grammarAccess.getOrAccess().getXorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group__0__Impl
	rule__Xor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getXorAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getGroup_1()); }
	(rule__Xor__Group_1__0)*
	{ after(grammarAccess.getXorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__0__Impl
	rule__Xor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXorAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__1__Impl
	rule__Xor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getCircumflexAccentKeyword_1_1()); }
	'^'
	{ after(grammarAccess.getXorAccess().getCircumflexAccentKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getRightAssignment_1_2()); }
	(rule__Xor__RightAssignment_1_2)
	{ after(grammarAccess.getXorAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_6__0__Impl
	rule__Primary__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_6_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_6__1__Impl
	rule__Primary__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getMultiplicationParserRuleCall_6_1()); }
	ruleMultiplication
	{ after(grammarAccess.getPrimaryAccess().getMultiplicationParserRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_6_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__SourceLinesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSourceLinesSourceLineParserRuleCall_0()); }
		ruleSourceLine
		{ after(grammarAccess.getModelAccess().getSourceLinesSourceLineParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceLine__LineContentAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceLineAccess().getLineContentBlankLineParserRuleCall_0_0()); }
		ruleBlankLine
		{ after(grammarAccess.getSourceLineAccess().getLineContentBlankLineParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceLine__LineContentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceLineAccess().getLineContentCommentLineParserRuleCall_1_0()); }
		ruleCommentLine
		{ after(grammarAccess.getSourceLineAccess().getLineContentCommentLineParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceLine__LineContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceLineAccess().getLineContentDirectiveLineParserRuleCall_2_0()); }
		ruleDirectiveLine
		{ after(grammarAccess.getSourceLineAccess().getLineContentDirectiveLineParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankLine__BlankLineAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlankLineAccess().getBlankLineWSTerminalRuleCall_1_0()); }
		RULE_WS
		{ after(grammarAccess.getBlankLineAccess().getBlankLineWSTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentLine__CommentAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommentLineAccess().getCommentANY_EXCEPT_COMMENT_END_OF_LINETerminalRuleCall_0_0()); }
		RULE_ANY_EXCEPT_COMMENT_END_OF_LINE
		{ after(grammarAccess.getCommentLineAccess().getCommentANY_EXCEPT_COMMENT_END_OF_LINETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectiveLine__DirectiveAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveLineAccess().getDirectiveEquDirectiveParserRuleCall_0()); }
		ruleEquDirective
		{ after(grammarAccess.getDirectiveLineAccess().getDirectiveEquDirectiveParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquDirectiveAccess().getNameIdentifierValueParserRuleCall_0_0()); }
		ruleIdentifierValue
		{ after(grammarAccess.getEquDirectiveAccess().getNameIdentifierValueParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__DirectiveAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquDirectiveAccess().getDirectiveEQUKeyword_2_0()); }
		(
			{ before(grammarAccess.getEquDirectiveAccess().getDirectiveEQUKeyword_2_0()); }
			'EQU'
			{ after(grammarAccess.getEquDirectiveAccess().getDirectiveEQUKeyword_2_0()); }
		)
		{ after(grammarAccess.getEquDirectiveAccess().getDirectiveEQUKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__OperandAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquDirectiveAccess().getOperandOperandParserRuleCall_4_0()); }
		ruleOperand
		{ after(grammarAccess.getEquDirectiveAccess().getOperandOperandParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquDirective__CommentAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquDirectiveAccess().getCommentANY_EXCEPT_COMMENT_END_OF_LINETerminalRuleCall_6_0()); }
		RULE_ANY_EXCEPT_COMMENT_END_OF_LINE
		{ after(grammarAccess.getEquDirectiveAccess().getCommentANY_EXCEPT_COMMENT_END_OF_LINETerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__OperandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandAccess().getOperandMultiplicationParserRuleCall_0_0()); }
		ruleMultiplication
		{ after(grammarAccess.getOperandAccess().getOperandMultiplicationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__OperandAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandAccess().getOperandStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getOperandAccess().getOperandStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperationAsteriskKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getMultiplicationAccess().getOperationAsteriskKeyword_1_1_0()); }
			'*'
			{ after(grammarAccess.getMultiplicationAccess().getOperationAsteriskKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getMultiplicationAccess().getOperationAsteriskKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0()); }
		ruleDivision
		{ after(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__OpretationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivisionAccess().getOpretationSolidusKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getDivisionAccess().getOpretationSolidusKeyword_1_1_0()); }
			'/'
			{ after(grammarAccess.getDivisionAccess().getOpretationSolidusKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getDivisionAccess().getOpretationSolidusKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivisionAccess().getRightModuloParserRuleCall_1_2_0()); }
		ruleModulo
		{ after(grammarAccess.getDivisionAccess().getRightModuloParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__OpretationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuloAccess().getOpretationPercentSignKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getModuloAccess().getOpretationPercentSignKeyword_1_1_0()); }
			'%'
			{ after(grammarAccess.getModuloAccess().getOpretationPercentSignKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getModuloAccess().getOpretationPercentSignKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuloAccess().getRightAdditionParserRuleCall_1_2_0()); }
		ruleAddition
		{ after(grammarAccess.getModuloAccess().getRightAdditionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightSubstractionParserRuleCall_1_2_0()); }
		ruleSubstraction
		{ after(grammarAccess.getAdditionAccess().getRightSubstractionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Substraction__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubstractionAccess().getRightLeftShiftParserRuleCall_1_2_0()); }
		ruleLeftShift
		{ after(grammarAccess.getSubstractionAccess().getRightLeftShiftParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftShift__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftShiftAccess().getRightRigthShiftParserRuleCall_1_2_0()); }
		ruleRigthShift
		{ after(grammarAccess.getLeftShiftAccess().getRightRigthShiftParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RigthShift__NegateAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRigthShiftAccess().getNegatePrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getRigthShiftAccess().getNegatePrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegateAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getNegateAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightOrParserRuleCall_1_2_0()); }
		ruleOr
		{ after(grammarAccess.getAndAccess().getRightOrParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightXorParserRuleCall_1_2_0()); }
		ruleXor
		{ after(grammarAccess.getOrAccess().getRightXorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getXorAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueDecimalValueParserRuleCall_0_0()); }
		ruleDecimalValue
		{ after(grammarAccess.getPrimaryAccess().getValueDecimalValueParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueHexaDecimalValueParserRuleCall_1_0()); }
		ruleHexaDecimalValue
		{ after(grammarAccess.getPrimaryAccess().getValueHexaDecimalValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueOctalValueParserRuleCall_2_0()); }
		ruleOctalValue
		{ after(grammarAccess.getPrimaryAccess().getValueOctalValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueBinaryValueParserRuleCall_3_0()); }
		ruleBinaryValue
		{ after(grammarAccess.getPrimaryAccess().getValueBinaryValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueCharacterValueParserRuleCall_4_0()); }
		ruleCharacterValue
		{ after(grammarAccess.getPrimaryAccess().getValueCharacterValueParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueIdentifierValueParserRuleCall_5_0()); }
		ruleIdentifierValue
		{ after(grammarAccess.getPrimaryAccess().getValueIdentifierValueParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierValueAccess().getValueIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentifierValueAccess().getValueIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecimalValueAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getDecimalValueAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HexaDecimalValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHexaDecimalValueAccess().getValueHEXATerminalRuleCall_0()); }
		RULE_HEXA
		{ after(grammarAccess.getHexaDecimalValueAccess().getValueHEXATerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OctalValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOctalValueAccess().getValueOCTALTerminalRuleCall_0()); }
		RULE_OCTAL
		{ after(grammarAccess.getOctalValueAccess().getValueOCTALTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryValueAccess().getValueBINARYTerminalRuleCall_0()); }
		RULE_BINARY
		{ after(grammarAccess.getBinaryValueAccess().getValueBINARYTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacterValueAccess().getValueCHARACTERTerminalRuleCall_0()); }
		RULE_CHARACTER
		{ after(grammarAccess.getCharacterValueAccess().getValueCHARACTERTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_HEXA : '$' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_BINARY : '%' ('0'..'1')+;

RULE_OCTAL : '@' ('0'..'7')+;

RULE_CHARACTER : '\'' ' '..'\u007F';

RULE_INT : ('0'..'9')+;

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))*;

RULE_ANY_EXCEPT_COMMENT_END_OF_LINE : ';' ~(('\n'|'\r'))*;

RULE_WS : (' '|'\t')+;

RULE_CR : '\r'? '\n';

RULE_END_OF_FILE : EOF;
